{
    "sourceFile": "view.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1743655378225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1743655378225,
            "name": "Commit-0",
            "content": "import java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ViewMain {\r\n    private static final Random random = new Random();\r\n    private static final String BORDER = \"==================================================\";\r\n    private static final String SUB_BORDER = \"---------------------------------------------------\";\r\n\r\n    static class Book {\r\n        String id;\r\n        String title;\r\n        String author;\r\n        int basePrice;\r\n        String type;\r\n        String condition;\r\n        String publicationDate;\r\n        Integer reviewRank;\r\n\r\n        public Book(String id, String title, String author, int basePrice, \r\n                   String type, String condition, String publicationDate, Integer reviewRank) {\r\n            this.id = id;\r\n            this.title = title;\r\n            this.author = author;\r\n            this.basePrice = basePrice;\r\n            this.type = type;\r\n            this.condition = condition;\r\n            this.publicationDate = publicationDate;\r\n            this.reviewRank = reviewRank;\r\n        }\r\n\r\n        public int getPrice() {\r\n            return switch(condition) {\r\n                case \"상\" -> (int)(basePrice * 0.7);\r\n                case \"중\" -> (int)(basePrice * 0.5);\r\n                case \"하\" -> (int)(basePrice * 0.3);\r\n                default -> basePrice;\r\n            };\r\n        }\r\n    }\r\n\r\n    static class MockDB {\r\n        private static final List<Book> masterBooks = Arrays.asList(\r\n            new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\", \"2025-01-15\", 1),\r\n            new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\", \"2024-12-01\", 2),\r\n            new Book(\"B003\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"new\", \"2025-03-20\", null),\r\n            new Book(\"B004\", \"React for Beginners\", \"Dan Abramov\", 35000, \"전체\", \"하\", \"2023-05-11\", null),\r\n            new Book(\"B005\", \"Python AI\", \"장영실\", 28000, \"전체\", \"new\", \"2025-02-28\", null)\r\n        );\r\n\r\n        private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n\r\n        static List<Book> getBooks(String searchType) {\r\n            return availableBooks.stream()\r\n                .filter(book -> searchType.equals(\"전체\") || book.type.equals(searchType))\r\n                .collect(Collectors.toList());\r\n        }\r\n\r\n        static void removeBook(String bookId) {\r\n            availableBooks.removeIf(book -> book.id.equals(bookId));\r\n        }\r\n    }\r\n\r\n    static class CartItem {\r\n        Book book;\r\n        int quantity;\r\n\r\n        public CartItem(Book book, int quantity) {\r\n            this.book = book;\r\n            this.quantity = quantity;\r\n        }\r\n\r\n        public int getTotalPrice() {\r\n            return book.getPrice() * quantity;\r\n        }\r\n    }\r\n\r\n    static class MockCartDB {\r\n        private static List<CartItem> cart = new ArrayList<>();\r\n\r\n        static void addItem(Book book, int quantity) {\r\n            cart.add(new CartItem(book, quantity));\r\n        }\r\n\r\n        static List<CartItem> getCart() {\r\n            return new ArrayList<>(cart);\r\n        }\r\n\r\n        static void clearCart() {\r\n            cart.clear();\r\n        }\r\n    }\r\n\r\n    private static final String[] PURCHASE_MESSAGES = {\r\n        \"지금까지 읽으신 책의 총 페이지를 쌓으면 에베레스트 높이의 3배에 달합니다.\",\r\n        \"당신이 읽은 책들을 쌓으면 남산타워 15개를 세운 높이입니다.\",\r\n        \"올해 독서에 투자한 시간은 서울에서 부산까지 KTX로 20번 왕복할 수 있는 시간입니다.\"\r\n    };\r\n\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        clearScreen();\r\n        \r\n        printHeader(\"온라인 서점 시스템\");\r\n        System.out.print(\"성명: \");\r\n        scanner.nextLine();\r\n        System.out.print(\"비밀번호: \");\r\n        scanner.nextLine();\r\n        \r\n        home(scanner);\r\n    }\r\n\r\n    private static void home(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"메인 메뉴\");\r\n            printMenu(new String[]{\r\n                \"1. 도서 검색\", \r\n                \"2. 회원 정보\", \r\n                \"3. 주문 이력\", \r\n                \"4. 장바구니\",\r\n                \"99. 종료\"\r\n            });\r\n            \r\n            try {\r\n                System.out.print(\"\\n>> 메뉴 선택: \");\r\n                int choice = scanner.nextInt();\r\n                scanner.nextLine();\r\n                \r\n                switch(choice) {\r\n                    case 1: searchFlow(scanner); break;\r\n                    case 2: userFlow(scanner); break;\r\n                    case 3: orderFlow(scanner); break;\r\n                    case 4: cartFlow(scanner); break;\r\n                    case 99: exit(scanner); break;\r\n                    default: errorMsg(\"잘못된 입력입니다.\");\r\n                }\r\n            } catch (Exception e) {\r\n                errorHandler(scanner, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void searchFlow(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"도서 검색\");\r\n            printMenu(new String[]{\r\n                \"1. 베스트셀러 검색\",\r\n                \"2. 신간 도서 검색\", \r\n                \"3. 전체 검색\",\r\n                \"0. 홈으로 돌아가기\",\r\n                \"99. 종료\"\r\n            });\r\n\r\n            System.out.print(\"\\n>> 검색 유형: \");\r\n            int choice = scanner.nextInt();\r\n            scanner.nextLine();\r\n            \r\n            if(choice == 0) return;\r\n            if(choice == 99) exit(scanner);\r\n            \r\n            String searchType = switch(choice) {\r\n                case 1 -> \"베스트셀러\";\r\n                case 2 -> \"신간\";\r\n                case 3 -> \"전체\";\r\n                default -> \"\";\r\n            };\r\n\r\n            System.out.print(\"\\n>> 검색어 입력: \");\r\n            String keyword = scanner.next();\r\n            scanner.nextLine();\r\n            \r\n            List<Book> results = MockDB.getBooks(searchType).stream()\r\n                .filter(book -> book.title.contains(keyword))\r\n                .collect(Collectors.toList());\r\n                \r\n            handleSearchResults(results, searchType, keyword, scanner);\r\n        }\r\n    }\r\n\r\n    private static void handleSearchResults(List<Book> books, String type, String keyword, Scanner scanner) {\r\n        clearScreen();\r\n        printHeader(\"'\" + keyword + \"' 검색 결과 (\" + type + \")\");\r\n\r\n        if(books.isEmpty()) {\r\n            System.out.println(\"\\n[알림] 검색 결과가 없습니다\");\r\n            pause(scanner);\r\n            return;\r\n        }\r\n\r\n        System.out.println(\"\\n[정렬 옵션]\");\r\n        printMenu(new String[]{\r\n            \"1. 가격 낮은 순\", \r\n            \"2. 가격 높은 순\", \r\n            \"3. 출판일 최신순\",\r\n            \"0. 홈으로 돌아가기\",\r\n            \"99. 종료\"\r\n        });\r\n\r\n        System.out.print(\"\\n>> 정렬 선택: \");\r\n        int sortChoice = scanner.nextInt();\r\n        scanner.nextLine();\r\n        \r\n        if(sortChoice == 0) return;\r\n        if(sortChoice == 99) exit(scanner);\r\n        \r\n        sortBooks(books, sortChoice);\r\n        displayBooks(books);\r\n        \r\n        System.out.println(\"\\n[액션 메뉴]\");\r\n        printMenu(new String[]{\r\n            \"1. 상세보기\", \r\n            \"2. 재검색\", \r\n            \"0. 홈으로 돌아가기\", \r\n            \"99. 종료\"\r\n        });\r\n        \r\n        System.out.print(\"\\n>> 선택: \");\r\n        int actionChoice = scanner.nextInt();\r\n        scanner.nextLine();\r\n        \r\n        switch(actionChoice) {\r\n            case 0: return;\r\n            case 1: \r\n                System.out.print(\">> 도서 번호 입력: \");\r\n                int bookNum = scanner.nextInt();\r\n                if(bookNum > 0 && bookNum <= books.size()) {\r\n                    showBookDetail(books.get(bookNum-1), scanner);\r\n                }\r\n                break;\r\n            case 99: exit(scanner); break;\r\n        }\r\n    }\r\n\r\n    private static void sortBooks(List<Book> books, int choice) {\r\n        switch(choice) {\r\n            case 1 -> books.sort(Comparator.comparingInt(Book::getPrice));\r\n            case 2 -> books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n            case 3 -> books.sort((b1, b2) -> b2.publicationDate.compareTo(b1.publicationDate));\r\n        }\r\n    }\r\n\r\n    private static void displayBooks(List<Book> books) {\r\n        for(int i=0; i<books.size(); i++) {\r\n            Book book = books.get(i);\r\n            System.out.printf(\"\\n%d. %s\\n\", i+1, book.title);\r\n            System.out.printf(\"├─ 가격: %,d원\\n\", book.getPrice());\r\n            System.out.printf(\"└─ 출판일: %s\\n\", book.publicationDate);\r\n            System.out.println(SUB_BORDER);\r\n        }\r\n    }\r\n\r\n    private static void showBookDetail(Book book, Scanner scanner) {\r\n        clearScreen();\r\n        printHeader(\"[상세 정보] \" + book.title);\r\n        System.out.printf(\"├─ ISBN: %s\\n\", book.id);\r\n        System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n        System.out.printf(\"├─ 가격: %,d원\\n\", book.getPrice());\r\n        System.out.printf(\"└─ 상태: %s\\n\", getConditionText(book.condition));\r\n        System.out.println(SUB_BORDER);\r\n\r\n        printMenu(new String[]{\r\n            \"1. 장바구니 추가\", \r\n            \"2. 바로구매\", \r\n            \"0. 돌아가기\", \r\n            \"99. 종료\"\r\n        });\r\n        \r\n        System.out.print(\"\\n>> 선택: \");\r\n        int choice = scanner.nextInt();\r\n        scanner.nextLine();\r\n        \r\n        switch(choice) {\r\n            case 0: return;\r\n            case 1: \r\n                System.out.print(\">> 수량 입력: \");\r\n                int qty = scanner.nextInt();\r\n                MockCartDB.addItem(book, qty);\r\n                System.out.printf(\"\\n[완료] %d권 추가 완료!\\n\", qty);\r\n                break;\r\n            case 99: exit(scanner); break;\r\n        }\r\n        pause(scanner);\r\n    }\r\n\r\n    private static void cartFlow(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"장바구니 관리\");\r\n            List<CartItem> cart = MockCartDB.getCart();\r\n            \r\n            if(cart.isEmpty()) {\r\n                System.out.println(\"\\n[알림] 장바구니가 비어 있습니다\");\r\n                pause(scanner);\r\n                return;\r\n            }\r\n\r\n            cart.forEach(item -> {\r\n                System.out.printf(\"\\n[도서] %s\\n\", item.book.title);\r\n                System.out.printf(\"├─ 수량: %d개\\n\", item.quantity);\r\n                System.out.printf(\"└─ 소계: %,d원\\n\", item.getTotalPrice());\r\n                System.out.println(SUB_BORDER);\r\n            });\r\n\r\n            printMenu(new String[]{\r\n                \"1. 전체 구매\", \r\n                \"2. 장바구니 비우기\", \r\n                \"0. 뒤로가기\", \r\n                \"99. 종료\"\r\n            });\r\n            \r\n            System.out.print(\"\\n>> 선택: \");\r\n            int choice = scanner.nextInt();\r\n            scanner.nextLine();\r\n            \r\n            switch(choice) {\r\n                case 0: return;\r\n                case 1: processBulkPurchase(scanner); break;\r\n                case 2: \r\n                    MockCartDB.clearCart();\r\n                    System.out.println(\"\\n[완료] 장바구니 비움\");\r\n                    break;\r\n                case 99: exit(scanner); break;\r\n            }\r\n            pause(scanner);\r\n        }\r\n    }\r\n\r\n    private static void processBulkPurchase(Scanner scanner) {\r\n        int total = MockCartDB.getCart().stream()\r\n            .mapToInt(CartItem::getTotalPrice)\r\n            .sum();\r\n        \r\n        System.out.println(\"\\n================ 결제 정보 ================\");\r\n        System.out.printf(\"총 결제금액: %,d원\\n\", total);\r\n        System.out.println(\"-----------------------------------------\");\r\n        \r\n        printMenu(new String[]{\r\n            \"1. 신용카드 결제\", \r\n            \"2. 계좌이체\", \r\n            \"0. 취소\", \r\n            \"99. 종료\"\r\n        });\r\n        \r\n        System.out.print(\"\\n>> 선택: \");\r\n        int choice = scanner.nextInt();\r\n        scanner.nextLine();\r\n        \r\n        if(choice == 1 || choice == 2) {\r\n            System.out.println(\"[완료] 결제 완료!\");\r\n            MockCartDB.clearCart();\r\n        }\r\n        pause(scanner);\r\n    }\r\n\r\n    private static String getConditionText(String condition) {\r\n        return switch(condition) {\r\n            case \"new\" -> \"신상품\";\r\n            case \"상\" -> \"중고-상\";\r\n            case \"중\" -> \"중고-중\";\r\n            case \"하\" -> \"중고-하\";\r\n            default -> \"알 수 없음\";\r\n        };\r\n    }\r\n\r\n    private static void userFlow(Scanner scanner) {\r\n        System.out.println(\"\\n[알림] 회원 정보 기능은 준비 중입니다.\");\r\n        pause(scanner);\r\n    }\r\n\r\n    private static void orderFlow(Scanner scanner) {\r\n        System.out.println(\"\\n[알림] 주문 이력 기능은 준비 중입니다.\");\r\n        pause(scanner);\r\n    }\r\n\r\n    private static void exit(Scanner scanner) {\r\n        System.out.println(\"\\n❤ 이용해주셔서 감사합니다!\");\r\n        scanner.close();\r\n        System.exit(0);\r\n    }\r\n\r\n    private static void printHeader(String title) {\r\n        System.out.println(BORDER);\r\n        System.out.println(\"| \" + title + \" |\");\r\n        System.out.println(BORDER);\r\n    }\r\n\r\n    private static void printMenu(String[] items) {\r\n        System.out.println(SUB_BORDER);\r\n        for(String item : items) {\r\n            System.out.println(item);\r\n        }\r\n        System.out.println(SUB_BORDER);\r\n    }\r\n\r\n    private static void clearScreen() {\r\n        for(int i=0; i<50; i++) System.out.println();\r\n    }\r\n\r\n    private static void pause(Scanner scanner) {\r\n        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n        scanner.nextLine();\r\n    }\r\n\r\n    private static void errorMsg(String msg) {\r\n        System.out.println(\"\\n[경고] \" + msg);\r\n    }\r\n\r\n    private static void errorHandler(Scanner scanner, Exception e) {\r\n        System.out.println(\"\\n[오류] \" + e.getMessage());\r\n        scanner.nextLine();\r\n    }\r\n}\r\n"
        }
    ]
}