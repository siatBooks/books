{
    "sourceFile": "src/ViewMain.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1743683692875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743683732167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n         );\r\n \r\n         private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n         // 초기화하는 장면인데, 실제 DB에서 가져오는 것처럼 보이게 하기 위해서 작성한것이다. 이는 전체 출력\r\n-        frontController.selectBookListInBest(\"\");\r\n+        frontController.selectBookList();\r\n \r\n         static List<Book> getBooks(String searchType) {\r\n             return availableBooks.stream()\r\n                     .filter(book -> searchType.equals(\"전체\") || book.types.equals(searchType))\r\n"
                },
                {
                    "date": 1743683756020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n         );\r\n \r\n         private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n         // 초기화하는 장면인데, 실제 DB에서 가져오는 것처럼 보이게 하기 위해서 작성한것이다. 이는 전체 출력\r\n-        frontController.selectBookList();\r\n+        frontController.selectBookList(\"\");\r\n \r\n         static List<Book> getBooks(String searchType) {\r\n             return availableBooks.stream()\r\n                     .filter(book -> searchType.equals(\"전체\") || book.types.equals(searchType))\r\n"
                },
                {
                    "date": 1743683831022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n         );\r\n \r\n         private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n         // 초기화하는 장면인데, 실제 DB에서 가져오는 것처럼 보이게 하기 위해서 작성한것이다. 이는 전체 출력\r\n-        frontController.selectBookList(\"\");\r\n+        \r\n         frontController.selectBookListInBest(\"\");\r\n \r\n         static List<Book> getBooks(String searchType) {\r\n             return availableBooks.stream()\r\n"
                },
                {
                    "date": 1743684098166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import controller.FrontController;\r\n+import domain.dto.book.BookListItemResponseDto;\r\n \r\n import java.util.*;\r\n import java.time.LocalDate;\r\n import java.time.format.DateTimeFormatter;\r\n@@ -400,9 +401,9 @@\n             System.out.print(\"\\n>> 검색어 입력: \");\r\n             String keyword = scanner.next();\r\n             scanner.nextLine(); // 버퍼 비우기\r\n \r\n-            frontController.selectBookList(keyword);\r\n+            List<BookListItemResponseDto> bookList = frontController.selectBookList(keyword);\r\n \r\n             // 북 - 검색 유형 선택 필요\r\n             String searchType = switch(choice) {\r\n                 case 1 -> \"베스트셀러\";\r\n"
                }
            ],
            "date": 1743683692875,
            "name": "Commit-0",
            "content": "import controller.FrontController;\r\n\r\nimport java.util.*;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ViewMain {\r\n    private static FrontController frontController = new FrontController();\r\n\r\n    private static final Random random = new Random();\r\n    private static final String BORDER = \"==================================================\";\r\n    private static final String SUB_BORDER = \"---------------------------------------------------\";\r\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\r\n\r\n    // 도서 정보 클래스\r\n    static class Book {\r\n        String id;\r\n        String title;\r\n        String author;\r\n        int basePrice;\r\n        String types;\r\n        String condition;\r\n        String publicationDate;\r\n        Integer reviewRank;\r\n        int pageCount; // 페이지 수 추가\r\n\r\n        public Book(String id, String title, String author, int basePrice,\r\n                    String types, String condition, String publicationDate, Integer reviewRank, int pageCount) {\r\n            this.id = id;\r\n            this.title = title;\r\n            this.author = author;\r\n            this.basePrice = basePrice;\r\n            this.types = types;\r\n            this.condition = condition;\r\n            this.publicationDate = publicationDate;\r\n            this.reviewRank = reviewRank;\r\n            this.pageCount = pageCount;\r\n        }\r\n\r\n        public int getPrice() {\r\n            return switch(condition) {\r\n                case \"상\" -> (int)(basePrice * 0.7);\r\n                case \"중\" -> (int)(basePrice * 0.5);\r\n                case \"하\" -> (int)(basePrice * 0.3);\r\n                default -> basePrice;\r\n            };\r\n        }\r\n    }\r\n\r\n    // 주문 클래스 추가\r\n    static class Order {\r\n        String orderId;\r\n        String customerName;\r\n        LocalDate orderDate;\r\n        List<OrderItem> items;\r\n        String status;\r\n        String shippingAddress;\r\n        String paymentMethod;\r\n        int totalAmount;\r\n\r\n        public Order(String orderId, String customerName, LocalDate orderDate,\r\n                     List<OrderItem> items, String status, String shippingAddress, String paymentMethod) {\r\n            this.orderId = orderId;\r\n            this.customerName = customerName;\r\n            this.orderDate = orderDate;\r\n            this.items = items;\r\n            this.status = status;\r\n            this.shippingAddress = shippingAddress;\r\n            this.paymentMethod = paymentMethod;\r\n            this.totalAmount = items.stream().mapToInt(OrderItem::getTotalPrice).sum();\r\n        }\r\n    }\r\n\r\n    // 주문 상품 클래스 추가\r\n    static class OrderItem {\r\n        Book book;\r\n        int quantity;\r\n        int priceAtPurchase;\r\n\r\n        public OrderItem(Book book, int quantity) {\r\n            this.book = book;\r\n            this.quantity = quantity;\r\n            this.priceAtPurchase = book.getPrice();\r\n        }\r\n\r\n        public int getTotalPrice() {\r\n            return priceAtPurchase * quantity;\r\n        }\r\n    }\r\n\r\n    // Mock 데이터베이스\r\n    static class MockDB {\r\n        private static final List<Book> masterBooks = Arrays.asList(\r\n                // 베스트셀러\r\n                new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\", \"2025-01-15\", 1, 450),\r\n                new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\", \"2024-12-01\", 2, 380),\r\n                new Book(\"B003\", \"Clean Code\", \"Robert C. Martin\", 40000, \"베스트셀러\", \"중\", \"2023-10-05\", 3, 420),\r\n                new Book(\"B004\", \"객체지향의 사실과 오해\", \"조영호\", 22000, \"베스트셀러\", \"하\", \"2022-08-12\", 4, 250),\r\n                new Book(\"B005\", \"모던 자바스크립트 Deep Dive\", \"이웅모\", 38000, \"베스트셀러\", \"new\", \"2024-11-20\", 5, 800),\r\n\r\n                new Book(\"B006\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"상\", \"2025-01-15\", 1, 450),\r\n                new Book(\"B007\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"중\", \"2025-01-15\", 1, 450),\r\n                new Book(\"B008\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\", \"2024-12-01\", 2, 380),\r\n                new Book(\"B009\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"하\", \"2024-12-01\", 2, 380),\r\n                new Book(\"B010\", \"Clean Code\", \"Robert C. Martin\", 40000, \"베스트셀러\", \"중\", \"2023-10-05\", 3, 420),\r\n                new Book(\"B011\", \"Clean Code\", \"Robert C. Martin\", 40000, \"베스트셀러\", \"하\", \"2023-10-05\", 3, 420),\r\n                new Book(\"B012\", \"객체지향의 사실과 오해\", \"조영호\", 22000, \"베스트셀러\", \"하\", \"2022-08-12\", 4, 250),\r\n                new Book(\"B013\", \"객체지향의 사실과 오해\", \"조영호\", 22000, \"베스트셀러\", \"하\", \"2022-08-12\", 4, 250),\r\n                new Book(\"B014\", \"모던 자바스크립트 Deep Dive\", \"이웅모\", 38000, \"베스트셀러\", \"중\", \"2024-11-20\", 5, 800),\r\n                new Book(\"B015\", \"모던 자바스크립트 Deep Dive\", \"이웅모\", 38000, \"베스트셀러\", \"중\", \"2024-11-20\", 5, 800),\r\n\r\n\r\n\r\n                // 신간\r\n                new Book(\"B101\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"new\", \"2025-03-20\", null, 320),\r\n                new Book(\"B102\", \"Kotlin Programming\", \"김민준\", 28000, \"신간\", \"new\", \"2025-03-15\", null, 280),\r\n                new Book(\"B103\", \"Cloud Native Architecture\", \"박지성\", 42000, \"신간\", \"new\", \"2025-03-10\", null, 350),\r\n                new Book(\"B104\", \"인공지능과 머신러닝 기초\", \"최영희\", 35000, \"신간\", \"new\", \"2025-03-05\", null, 420),\r\n                new Book(\"B105\", \"블록체인 개발 실전 가이드\", \"정승호\", 37000, \"신간\", \"new\", \"2025-02-28\", null, 380)\r\n\r\n                // // 웹개발\r\n                // new Book(\"B201\", \"React for Beginners\", \"Dan Abramov\", 35000, \"웹개발\", \"하\", \"2023-05-11\", null, 300),\r\n                // new Book(\"B202\", \"Vue.js 완벽 가이드\", \"장영실\", 28000, \"웹개발\", \"new\", \"2025-02-28\", null, 280),\r\n                // new Book(\"B203\", \"HTML/CSS 마스터\", \"구종만\", 33000, \"웹개발\", \"상\", \"2024-07-15\", null, 350),\r\n                // new Book(\"B204\", \"Angular 실전 프로젝트\", \"이동욱\", 45000, \"웹개발\", \"new\", \"2024-09-30\", null, 400),\r\n\r\n                // // 데이터베이스/백엔드\r\n                // new Book(\"B301\", \"SQL 레벨업\", \"미즈노 미츠히\", 32000, \"데이터베이스\", \"중\", \"2023-12-05\", null, 320),\r\n                // new Book(\"B302\", \"MongoDB 완벽 가이드\", \"유진우\", 37000, \"데이터베이스\", \"new\", \"2024-01-20\", null, 360),\r\n                // new Book(\"B303\", \"스프링 데이터 JPA\", \"김영한\", 35000, \"백엔드\", \"상\", \"2024-06-10\", null, 380),\r\n                // new Book(\"B304\", \"Node.js 백엔드 개발\", \"이태호\", 28000, \"백엔드\", \"하\", \"2022-05-15\", null, 290)\r\n        );\r\n\r\n        private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n        // 초기화하는 장면인데, 실제 DB에서 가져오는 것처럼 보이게 하기 위해서 작성한것이다. 이는 전체 출력\r\n        frontController.selectBookListInBest(\"\");\r\n\r\n        static List<Book> getBooks(String searchType) {\r\n            return availableBooks.stream()\r\n                    .filter(book -> searchType.equals(\"전체\") || book.types.equals(searchType))\r\n                    .collect(Collectors.toList());\r\n        }\r\n\r\n        static Book getBookById(String bookId) {\r\n            return masterBooks.stream()\r\n                    .filter(book -> book.id.equals(bookId))\r\n                    .findFirst()\r\n                    .orElse(null);\r\n        }\r\n\r\n        static void removeBook(String bookId) {\r\n            availableBooks.removeIf(book -> book.id.equals(bookId));\r\n        }\r\n    }\r\n\r\n    // 장바구니 아이템 클래스\r\n    static class CartItem {\r\n        Book book;\r\n        int quantity;\r\n\r\n        public CartItem(Book book, int quantity) {\r\n            this.book = book;\r\n            this.quantity = quantity;\r\n        }\r\n\r\n        public int getTotalPrice() {\r\n            return book.getPrice() * quantity;\r\n        }\r\n    }\r\n\r\n    // 장바구니 DB\r\n    static class MockCartDB {\r\n        private static List<CartItem> cart = new ArrayList<>();\r\n\r\n        static void addItem(Book book, int quantity) {\r\n            cart.add(new CartItem(book, quantity));\r\n        }\r\n\r\n        static List<CartItem> getCart() {\r\n            return new ArrayList<>(cart);\r\n        }\r\n\r\n        static void clearCart() {\r\n            cart.clear();\r\n        }\r\n    }\r\n\r\n    // 주문 이력 DB 추가\r\n    static class MockOrderDB {\r\n        private static List<Order> orders = new ArrayList<>();\r\n        private static int nextOrderId = 1001;\r\n\r\n        static String addOrder(String customerName, List<CartItem> cartItems, String address, String paymentMethod) {\r\n            String orderId = \"ORD-\" + nextOrderId++;\r\n            List<OrderItem> orderItems = cartItems.stream()\r\n                    .map(cartItem -> new OrderItem(cartItem.book, cartItem.quantity))\r\n                    .collect(Collectors.toList());\r\n\r\n            Order order = new Order(orderId, customerName, LocalDate.now(),\r\n                    orderItems, \"배송 준비중\", address, paymentMethod);\r\n            orders.add(order);\r\n\r\n            // 샘플 데이터 자동 생성\r\n            if (orders.size() <= 1) {\r\n                generateSampleOrders();\r\n            }\r\n\r\n            return orderId;\r\n        }\r\n\r\n        // 샘플 주문 이력 생성\r\n        private static void generateSampleOrders() {\r\n            // 과거 주문 1\r\n            List<OrderItem> items1 = new ArrayList<>();\r\n            items1.add(new OrderItem(MockDB.getBookById(\"B001\"), 2));\r\n            items1.add(new OrderItem(MockDB.getBookById(\"B003\"), 1));\r\n            orders.add(new Order(\"ORD-\" + nextOrderId++, \"홍길동\", LocalDate.now().minusDays(7),\r\n                    items1, \"배송 완료\", \"서울시 강남구\", \"신용카드\"));\r\n\r\n            // 과거 주문 2\r\n            List<OrderItem> items2 = new ArrayList<>();\r\n            items2.add(new OrderItem(MockDB.getBookById(\"B102\"), 1));\r\n            items2.add(new OrderItem(MockDB.getBookById(\"B301\"), 3));\r\n            orders.add(new Order(\"ORD-\" + nextOrderId++, \"김영희\", LocalDate.now().minusDays(14),\r\n                    items2, \"배송 중\", \"부산시 해운대구\", \"계좌이체\"));\r\n\r\n            // 과거 주문 3\r\n            List<OrderItem> items3 = new ArrayList<>();\r\n            items3.add(new OrderItem(MockDB.getBookById(\"B203\"), 2));\r\n            orders.add(new Order(\"ORD-\" + nextOrderId++, \"이철수\", LocalDate.now().minusMonths(1),\r\n                    items3, \"취소됨\", \"대구시 중구\", \"신용카드\"));\r\n\r\n            // 과거 주문 4\r\n            List<OrderItem> items4 = new ArrayList<>();\r\n            items4.add(new OrderItem(MockDB.getBookById(\"B004\"), 1));\r\n            items4.add(new OrderItem(MockDB.getBookById(\"B005\"), 1));\r\n            items4.add(new OrderItem(MockDB.getBookById(\"B201\"), 1));\r\n            orders.add(new Order(\"ORD-\" + nextOrderId++, \"박민지\", LocalDate.now().minusMonths(2),\r\n                    items4, \"배송 완료\", \"인천시 서구\", \"계좌이체\"));\r\n        }\r\n\r\n        static List<Order> getOrders() {\r\n            return new ArrayList<>(orders);\r\n        }\r\n\r\n        static Order getOrderById(String orderId) {\r\n            return orders.stream()\r\n                    .filter(order -> order.orderId.equals(orderId))\r\n                    .findFirst()\r\n                    .orElse(null);\r\n        }\r\n\r\n        static List<Order> getOrdersByDateRange(LocalDate startDate, LocalDate endDate) {\r\n            return orders.stream()\r\n                    .filter(order -> !order.orderDate.isBefore(startDate) && !order.orderDate.isAfter(endDate))\r\n                    .collect(Collectors.toList());\r\n        }\r\n\r\n        static List<Order> getOrdersByStatus(String status) {\r\n            if (status == null) {\r\n                return new ArrayList<>(orders);\r\n            }\r\n            return orders.stream()\r\n                    .filter(order -> order.status.equals(status))\r\n                    .collect(Collectors.toList());\r\n        }\r\n\r\n        static void updateOrderStatus(String orderId, String newStatus) {\r\n            orders.stream()\r\n                    .filter(order -> order.orderId.equals(orderId))\r\n                    .findFirst()\r\n                    .ifPresent(order -> order.status = newStatus);\r\n        }\r\n\r\n        static Map<String, Integer> getMonthlyOrderStats() {\r\n            Map<String, Integer> monthlyCounts = new HashMap<>();\r\n\r\n            for (Order order : orders) {\r\n                String monthYear = order.orderDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM\"));\r\n                monthlyCounts.put(monthYear, monthlyCounts.getOrDefault(monthYear, 0) + 1);\r\n            }\r\n\r\n            return monthlyCounts;\r\n        }\r\n    }\r\n\r\n    // 통계 메시지 클래스 추가\r\n    static class StatisticMessage {\r\n        String messageTemplate;\r\n        double factor;\r\n        String unitName;\r\n\r\n        public StatisticMessage(String messageTemplate, double factor, String unitName) {\r\n            this.messageTemplate = messageTemplate;\r\n            this.factor = factor;\r\n            this.unitName = unitName;\r\n        }\r\n\r\n        public String getFormattedMessage(int quantity) {\r\n            double value = quantity * factor;\r\n            return String.format(messageTemplate, value, unitName);\r\n        }\r\n    }\r\n\r\n    // 동적 계산되는 독서 통계 메시지\r\n    private static final StatisticMessage[] PURCHASE_STATISTICS = {\r\n            new StatisticMessage(\"지금까지 읽으신 책의 총 페이지를 쌓으면 에베레스트 높이의 %.1f%s에 달합니다.\", 0.03, \"배\"),\r\n            new StatisticMessage(\"당신이 읽은 책들을 쌓으면 남산타워 %.1f%s를 세운 높이입니다.\", 0.15, \"개\"),\r\n            new StatisticMessage(\"올해 독서에 투자한 시간은 서울에서 부산까지 KTX로 %.1f%s 왕복할 수 있는 시간입니다.\", 0.2, \"번\"),\r\n            new StatisticMessage(\"당신의 독서 시간은 넷플릭스 드라마 '오징어 게임' 시리즈를 %.1f%s 볼 수 있는 시간입니다.\", 0.35, \"번\"),\r\n            new StatisticMessage(\"각 페이지가 한 걸음이라면, 당신은 서울에서 부산까지 %.1f%s 왕복한 거리를 걸었습니다!\", 0.02, \"번\"),\r\n            new StatisticMessage(\"당신이 읽은 책의 페이지를 일렬로 늘어놓으면 한강 길이의 %.1f%s에 해당합니다.\", 0.05, \"배\"),\r\n            new StatisticMessage(\"당신의 전자책 독서 습관은 소나무 %.1f%s를 살렸습니다—여의도 공원의 1/10에 해당하는 면적입니다.\", 0.15, \"그루\"),\r\n            new StatisticMessage(\"당신이 읽은 책들의 무게는 중형 승용차 %.1f%s와 같습니다.\", 0.01, \"대\"),\r\n            new StatisticMessage(\"올해 읽은 책의 두께를 모두 합치면 냉장고 높이의 %.1f%s입니다.\", 0.02, \"배\")\r\n    };\r\n\r\n    // 출판 트렌드 메시지\r\n    private static final String[] TREND_MESSAGES = {\r\n            \"당신이 선호하는 장르의 평균 가격은 2020년 이후 15% 하락했습니다.\",\r\n            \"A출판사는 시장 점유율 30%로 선두를 달리고, B출판사가 20%로 뒤를 잇고 있습니다.\",\r\n            \"높은 평점을 받은 책들은 대체로 가격이 낮고 2020년 이후 출간된 경향이 있습니다.\",\r\n            \"미스터리 장르는 다른 장르에 비해 일관되게 높은 평점을 받고 있습니다.\",\r\n            \"전자책 시장은 지난 5년간 연평균 22%의 성장률을 보이고 있습니다.\",\r\n            \"기술 서적은 평균 3년 주기로 개정판이 출간되는 추세를 보입니다.\",\r\n            \"코딩 교육 도서는 지난 1년간 판매량이 35% 증가했습니다.\"\r\n    };\r\n\r\n    // 메인 함수\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        clearScreen();\r\n\r\n        printHeader(\"온라인 서점 시스템\");\r\n        // ! 유저 - 로그인 서비스\r\n        printSection(\"로그인\");\r\n        System.out.print(\"성명: \");\r\n        scanner.nextLine();\r\n        System.out.print(\"비밀번호: \");\r\n        scanner.nextLine();\r\n\r\n        home(scanner);\r\n    }\r\n\r\n    private static void home(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"메인 메뉴\");\r\n            printMenu(new String[]{\r\n                    \"1. 도서 검색\",\r\n                    \"2. 회원 정보\",\r\n                    \"3. 주문 이력\",\r\n                    \"4. 장바구니\",\r\n                    \"99. 종료\"\r\n            });\r\n\r\n            try {\r\n                System.out.print(\"\\n>> 메뉴 선택: \");\r\n                int choice = scanner.nextInt();\r\n                scanner.nextLine(); // 버퍼 비우기\r\n\r\n                switch(choice) {\r\n                    case 1: searchFlow(scanner); break;\r\n                    case 2: userFlow(scanner); break;\r\n                    case 3: orderFlow(scanner); break;\r\n                    case 4: cartFlow(scanner); break;\r\n                    // case 0: return; // 홈으로\r\n                    case 99: exit(scanner); break;\r\n                    default: errorMsg(\"잘못된 입력입니다.\");\r\n                }\r\n            } catch (Exception e) {\r\n                errorHandler(scanner, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 도서 검색 흐름\r\n    private static void searchFlow(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"도서 검색 시스템\");\r\n            printMenu(new String[]{\r\n                    \"1. 베스트셀러 검색\",\r\n                    \"2. 신간 도서 검색\",\r\n                    \"3. 전체 검색\",\r\n                    \"0. 홈으로 돌아가기\",\r\n                    \"99. 종료\"\r\n            });\r\n\r\n            System.out.print(\"\\n>> 검색 유형: \");\r\n            int choice = getValidNumber(scanner, 0, 99);\r\n\r\n            if(choice == 0) return;\r\n            if(choice == 99) exit(scanner);\r\n\r\n            // 북 - 검색 유형 선택 필요\r\n            String searchType = switch(choice) {\r\n                case 1 -> \"베스트셀러\";\r\n                case 2 -> \"신간\";\r\n                case 3 -> \"전체\";\r\n                default -> \"\";\r\n            };\r\n\r\n            System.out.print(\"\\n>> 검색어 입력: \");\r\n            String keyword = scanner.next();\r\n            scanner.nextLine(); // 버퍼 비우기\r\n\r\n            List<Book> results = MockDB.getBooks(searchType).stream()\r\n                    .filter(book -> book.title.contains(keyword) || book.author.contains(keyword))\r\n                    .collect(Collectors.toList());\r\n\r\n            handleSearchResults(results, searchType, keyword, scanner);\r\n        }\r\n    }\r\n\r\n    private static void handleSearchResults(List<Book> books, String types, String keyword, Scanner scanner) {\r\n        clearScreen();\r\n        printHeader(\"'\" + keyword + \"' 검색 결과 (\" + types + \")\");\r\n\r\n        // 추가 서비스 연결된 리스트\r\n        System.out.println(\"베스트\");\r\n        frontController.selectBookListInBest(\"\");\r\n        System.out.println(\"신간\");\r\n        frontController.selectBookListInNew(\"\");\r\n        frontController.selectBookList(\"\");\r\n\r\n        // 검색 리스트 서비스 추가 필요\r\n        if(books.isEmpty()) {\r\n            System.out.println(\"\\n[알림] 검색 결과가 없습니다\");\r\n            pause(scanner);\r\n            return;\r\n        }\r\n\r\n        displayBooks(books);\r\n\r\n        System.out.println(\"\\n[정렬 옵션]\");\r\n        System.out.println();\r\n        List<String> sortOptions = new ArrayList<>(Arrays.asList(\r\n                \"1. 가격 낮은 순\",\r\n                \"2. 가격 높은 순\",\r\n                \"3. 출판일 최신순\"\r\n        ));\r\n\r\n        if(types.equals(\"베스트셀러\")) {\r\n            sortOptions.add(\"4. 리뷰 순위 순\");\r\n        }\r\n        sortOptions.add(\"0. 홈으로 돌아가기\");\r\n        sortOptions.add(\"99. 종료\");\r\n\r\n        printMenu(sortOptions.toArray(new String[0]));\r\n\r\n        System.out.print(\"\\n>> 정렬 선택: \");\r\n        int sortChoice = getValidNumber(scanner, 0, 99);\r\n\r\n        if(sortChoice == 0) return;\r\n        if(sortChoice == 99) exit(scanner);\r\n\r\n        // 북 - 정렬 서비스 추가 필요\r\n        sortBooks(books, sortChoice, types);\r\n        displayBooks(books);\r\n\r\n        System.out.println(\"\\n[액션 메뉴]\");\r\n        printMenu(new String[]{\r\n                \"1. 상세보기\",\r\n                \"2. 재검색\",\r\n                \"0. 홈으로 돌아가기\",\r\n                \"99. 종료\"\r\n        });\r\n\r\n        System.out.print(\"\\n>> 선택: \");\r\n        int actionChoice = getValidNumber(scanner, 0, 99);\r\n\r\n        switch(actionChoice) {\r\n            case 0: return;\r\n            case 1:\r\n                System.out.print(\">> 도서 번호 입력: \");\r\n                int bookNum = getValidNumber(scanner, 1, books.size());\r\n                showBookDetail(books.get(bookNum-1), scanner);\r\n                break;\r\n            case 2: return; // 재검색\r\n            case 99: exit(scanner); break;\r\n        }\r\n    }\r\n\r\n    private static void sortBooks(List<Book> books, int sortChoice, String types) {\r\n        switch(sortChoice) {\r\n            case 1:\r\n                books.sort(Comparator.comparingInt(Book::getPrice));\r\n                break;\r\n            case 2:\r\n                books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n                break;\r\n            case 3:\r\n                books.sort((b1, b2) -> b2.publicationDate.compareTo(b1.publicationDate));\r\n                break;\r\n            case 4:\r\n                if(types.equals(\"베스트셀러\")) {\r\n                    books.sort(Comparator.comparingInt(b -> b.reviewRank != null ? b.reviewRank : Integer.MAX_VALUE));\r\n                }\r\n                break;\r\n            default:\r\n                books.sort(Comparator.comparing(b -> b.title));\r\n        }\r\n    }\r\n\r\n    private static void displayBooks(List<Book> books) {\r\n        int index = 1;\r\n        // 기존 뷰 더미데이터\r\n        for(Book book : books) {\r\n            System.out.printf(\"\\n%d. %s\\n\", index++, book.title);\r\n            System.out.printf(\"|- ID: %s\\n\", book.id);\r\n            System.out.printf(\"|- 저자: %s\\n\", book.author);\r\n            System.out.printf(\"|- 가격: %,d원\\n\", book.getPrice());\r\n            System.out.printf(\"|- 상태: %s\\n\", getConditionText(book.condition));\r\n            System.out.printf(\"|- 출판일: %s\\n\", book.publicationDate);\r\n            System.out.printf(\"|- 페이지: %d페이지\\n\", book.pageCount);\r\n            if(book.reviewRank != null) {\r\n                System.out.printf(\"|- 리뷰 순위: %d위\\n\", book.reviewRank);\r\n            }\r\n            System.out.println(SUB_BORDER);\r\n        }\r\n        // 추가 서비스 연결된 리스트\r\n        // 추가 서비스 연결된 리스트\r\n        System.out.println(\"베스트\");\r\n        frontController.selectBookListInBest(\"\");\r\n        System.out.println(\"신간\");\r\n        frontController.selectBookListInNew(\"\");\r\n        frontController.selectBookList(\"\");\r\n    }\r\n\r\n    private static String getConditionText(String condition) {\r\n        return switch(condition) {\r\n            case \"new\" -> \"신상품\";\r\n            case \"상\" -> \"중고-상\";\r\n            case \"중\" -> \"중고-중\";\r\n            case \"하\" -> \"중고-하\";\r\n            default -> \"알 수 없음\";\r\n        };\r\n    }\r\n\r\n    private static void showBookDetail(Book book, Scanner scanner) {\r\n        clearScreen();\r\n        // 북 - 상세보기 서비스 필요\r\n        printHeader(\"[상세 정보] \" + book.title);\r\n        System.out.printf(\"|- ISBN: %s\\n\", book.id);\r\n        System.out.printf(\"|- 저자: %s\\n\", book.author);\r\n        System.out.printf(\"|- 정가: %,d원\\n\", book.basePrice);\r\n        System.out.printf(\"|- 판매가: %,d원\\n\", book.getPrice());\r\n        System.out.printf(\"|- 상태: %s\\n\", getConditionText(book.condition));\r\n        System.out.printf(\"|- 출판일: %s\\n\", book.publicationDate);\r\n        System.out.printf(\"|- 페이지: %d페이지\\n\", book.pageCount);\r\n        if(book.reviewRank != null) {\r\n            System.out.printf(\"|- 리뷰 순위: %d위\\n\", book.reviewRank);\r\n        }\r\n        System.out.println(SUB_BORDER);\r\n\r\n        printMenu(new String[]{\r\n                \"1. 장바구니 추가\",\r\n                \"2. 바로구매\",\r\n                \"0. 돌아가기\",\r\n                \"99. 종료\"\r\n        });\r\n\r\n        System.out.print(\"\\n>> 선택: \");\r\n        int choice = getValidNumber(scanner, 0, 99);\r\n\r\n        switch(choice) {\r\n            case 0: return;\r\n            case 1: handleAddToCart(book, scanner); break;\r\n            case 2: processPurchase(book, scanner); break;\r\n            case 99: exit(scanner); break;\r\n        }\r\n    }\r\n\r\n    private static void handleAddToCart(Book book, Scanner scanner) {\r\n        System.out.print(\"\\n>> 수량 입력: \");\r\n        int quantity = getValidNumber(scanner, 1, 10);\r\n        MockCartDB.addItem(book, quantity);\r\n        System.out.printf(\"\\n[완료] %s %d권 장바구니 추가 완료!\\n\", book.title, quantity);\r\n        System.out.println(\"[독서 통계] \" + getRandomStatistic(quantity));\r\n        pause(scanner);\r\n    }\r\n\r\n    private static void processPurchase(Book book, Scanner scanner) {\r\n        System.out.print(\"\\n>> 수량 입력: \");\r\n        int quantity = getValidNumber(scanner, 1, 10);\r\n\r\n        System.out.println(\"\\n================ 결제 정보 ================\");\r\n        System.out.printf(\"도서명: %s\\n\", book.title);\r\n        System.out.printf(\"수량: %d권\\n\", quantity);\r\n        System.out.printf(\"결제금액: %,d원\\n\", book.getPrice() * quantity);\r\n        System.out.println(\"-----------------------------------------\");\r\n\r\n        System.out.print(\"배송지 주소: \");\r\n        String address = scanner.nextLine();\r\n\r\n        printMenu(new String[]{\r\n                \"1. 신용카드 결제\",\r\n                \"2. 계좌이체\",\r\n                \"0. 취소\"\r\n        });\r\n\r\n        System.out.print(\"\\n>> 결제 방법 선택: \");\r\n        int paymentType = getValidNumber(scanner, 0, 2);\r\n\r\n        if(paymentType != 0) {\r\n            String paymentMethod = (paymentType == 1) ? \"신용카드\" : \"계좌이체\";\r\n            System.out.println(\"[완료] 결제가 완료되었습니다!\");\r\n\r\n            // 장바구니에 추가\r\n            List<CartItem> orderItems = new ArrayList<>();\r\n            orderItems.add(new CartItem(book, quantity));\r\n\r\n            // 주문 생성\r\n            String orderId = MockOrderDB.addOrder(\"홍길동\", orderItems, address, paymentMethod);\r\n            System.out.printf(\"[주문번호] %s\\n\", orderId);\r\n\r\n            // 재고 감소\r\n            MockDB.removeBook(book.id);\r\n\r\n            // 동적 통계 메시지 출력\r\n            System.out.println(\"[독서 통계] \" + getRandomStatistic(quantity));\r\n        }\r\n        pause(scanner);\r\n    }\r\n\r\n    // 장바구니 관리 시스템\r\n    private static void cartFlow(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"장바구니 관리\");\r\n            List<CartItem> cart = MockCartDB.getCart();\r\n\r\n            if(cart.isEmpty()) {\r\n                System.out.println(\"\\n[알림] 장바구니가 비어 있습니다\");\r\n                pause(scanner);\r\n                return;\r\n            }\r\n\r\n            cart.forEach(item -> {\r\n                System.out.printf(\"\\n[도서] %s\\n\", item.book.title);\r\n                System.out.printf(\"|- 수량: %d개\\n\", item.quantity);\r\n                System.out.printf(\"|- 단가: %,d원\\n\", item.book.getPrice());\r\n                System.out.printf(\"|- 소계: %,d원\\n\", item.getTotalPrice());\r\n                System.out.println(SUB_BORDER);\r\n            });\r\n\r\n            // 랜덤 출판 트렌드 메시지 출력\r\n            System.out.println(\"[출판 트렌드] \" + getRandomMessage(TREND_MESSAGES));\r\n\r\n            printMenu(new String[]{\r\n                    \"1. 전체 구매\",\r\n                    \"2. 장바구니 비우기\",\r\n                    \"0. 뒤로가기\",\r\n                    \"99. 종료\"\r\n            });\r\n\r\n            System.out.print(\"\\n>> 선택: \");\r\n            int choice = getValidNumber(scanner, 0, 99);\r\n\r\n            switch(choice) {\r\n                case 0: return;\r\n                case 1: processBulkPurchase(scanner); break;\r\n                case 2:\r\n                    MockCartDB.clearCart();\r\n                    System.out.println(\"\\n[완료] 장바구니를 비웠습니다\");\r\n                    pause(scanner);\r\n                    break;\r\n                case 99: exit(scanner); break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 일괄 구매 처리\r\n    private static void processBulkPurchase(Scanner scanner) {\r\n        List<CartItem> cart = MockCartDB.getCart();\r\n        int total = cart.stream().mapToInt(CartItem::getTotalPrice).sum();\r\n        int totalQuantity = cart.stream().mapToInt(item -> item.quantity).sum();\r\n\r\n        System.out.println(\"\\n================ 결제 정보 ================\");\r\n        System.out.printf(\"총 결제금액: %,d원\\n\", total);\r\n        System.out.printf(\"총 도서 수량: %d권\\n\", totalQuantity);\r\n        System.out.println(\"-----------------------------------------\");\r\n\r\n        System.out.print(\"배송지 주소: \");\r\n        String address = scanner.nextLine();\r\n\r\n        printMenu(new String[]{\r\n                \"1. 신용카드 결제\",\r\n                \"2. 계좌이체\",\r\n                \"0. 취소\"\r\n        });\r\n\r\n        System.out.print(\"\\n>> 결제 방법 선택: \");\r\n        int paymentType = getValidNumber(scanner, 0, 2);\r\n\r\n        if(paymentType != 0) {\r\n            String paymentMethod = (paymentType == 1) ? \"신용카드\" : \"계좌이체\";\r\n            System.out.println(\"[완료] 결제가 완료되었습니다!\");\r\n\r\n            // 주문 생성\r\n            String orderId = MockOrderDB.addOrder(\"홍길동\", cart, address, paymentMethod);\r\n            System.out.printf(\"[주문번호] %s\\n\", orderId);\r\n\r\n            // 구매한 모든 책 재고에서 제거\r\n            cart.forEach(item -> MockDB.removeBook(item.book.id));\r\n            MockCartDB.clearCart();\r\n\r\n            // 동적 통계 메시지 출력\r\n            System.out.println(\"[독서 통계] \" + getRandomStatistic(totalQuantity));\r\n        }\r\n        pause(scanner);\r\n    }\r\n\r\n    // 주문 이력 관리 - 신규 구현\r\n    private static void orderFlow(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"주문 이력 관리\");\r\n            printSection(\"구매 내역 및 주문 상태 확인\");\r\n\r\n            List<Order> orders = MockOrderDB.getOrders();\r\n\r\n            if(orders.isEmpty()) {\r\n                System.out.println(\"\\n[알림] 주문 내역이 없습니다\");\r\n                pause(scanner);\r\n                return;\r\n            }\r\n\r\n            System.out.println(\"\\n[주문 목록]\");\r\n            for(int i=0; i<orders.size(); i++) {\r\n                Order order = orders.get(i);\r\n                System.out.printf(\"%d. 주문번호: %s | 고객명: %s | 주문일: %s | 상태: %s | 총액: %,d원\\n\",\r\n                        i+1, order.orderId, order.customerName, order.orderDate,\r\n                        order.status, order.totalAmount);\r\n            }\r\n\r\n            printMenu(new String[]{\r\n                    \"1. 주문 상세 조회\",\r\n                    \"2. 날짜별 검색\",\r\n                    \"3. 상태별 검색\",\r\n                    \"4. 월별 주문 통계\",\r\n                    \"0. 홈으로 돌아가기\",\r\n                    \"99. 종료\"\r\n            });\r\n\r\n            System.out.print(\"\\n>> 선택: \");\r\n            int choice = getValidNumber(scanner, 0, 99);\r\n\r\n            switch(choice) {\r\n                case 0: return;\r\n                case 1: viewOrderDetails(scanner, orders); break;\r\n                case 2: searchOrdersByDate(scanner); break;\r\n                case 3: searchOrdersByStatus(scanner); break;\r\n                case 4: showMonthlyOrderStats(scanner); break;\r\n                case 99: exit(scanner); break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void viewOrderDetails(Scanner scanner, List<Order> orders) {\r\n        System.out.print(\"\\n>> 조회할 주문 번호 선택: \");\r\n        int orderNum = getValidNumber(scanner, 1, orders.size());\r\n\r\n        Order order = orders.get(orderNum-1);\r\n\r\n        clearScreen();\r\n        printHeader(\"[주문 상세 정보] \" + order.orderId);\r\n        System.out.printf(\"|- 주문자: %s\\n\", order.customerName);\r\n        System.out.printf(\"|- 주문일: %s\\n\", order.orderDate);\r\n        System.out.printf(\"|- 상태: %s\\n\", order.status);\r\n        System.out.printf(\"|- 배송지: %s\\n\", order.shippingAddress);\r\n        System.out.printf(\"|- 결제방법: %s\\n\", order.paymentMethod);\r\n        System.out.println(\"\\n[주문 상품 목록]\");\r\n\r\n        int totalPages = 0;\r\n\r\n        for(int i=0; i<order.items.size(); i++) {\r\n            OrderItem item = order.items.get(i);\r\n            System.out.printf(\"%d. %s | 저자: %s | 수량: %d개 | 가격: %,d원 | 소계: %,d원\\n\",\r\n                    i+1, item.book.title, item.book.author, item.quantity,\r\n                    item.priceAtPurchase, item.getTotalPrice());\r\n            totalPages += item.book.pageCount * item.quantity;\r\n        }\r\n\r\n        System.out.printf(\"\\n|- 총 페이지 수: %d페이지\\n\", totalPages);\r\n        System.out.printf(\"|- 총 결제금액: %,d원\\n\", order.totalAmount);\r\n\r\n        printMenu(new String[]{\r\n                \"1. 주문 상태 변경\",\r\n                \"2. 배송 추적\",\r\n                \"3. 영수증 출력\",\r\n                \"0. 돌아가기\",\r\n                \"99. 종료\"\r\n        });\r\n\r\n        System.out.print(\"\\n>> 선택: \");\r\n        int choice = getValidNumber(scanner, 0, 99);\r\n\r\n        switch(choice) {\r\n            case 0: return;\r\n            case 1: changeOrderStatus(scanner, order); break;\r\n            case 2:\r\n                System.out.println(\"\\n[배송 추적 정보]\");\r\n                System.out.println(\"배송 상태: \" + order.status);\r\n                if(order.status.equals(\"배송 중\")) {\r\n                    System.out.println(\"현재 위치: 물류센터 -> 대구 허브 -> 지역 배송점 이동 중\");\r\n                    System.out.println(\"예상 도착일: \" + LocalDate.now().plusDays(2));\r\n                } else if(order.status.equals(\"배송 완료\")) {\r\n                    System.out.println(\"배송 완료일: \" + order.orderDate.plusDays(3));\r\n                    System.out.println(\"수령인: \" + order.customerName);\r\n                } else {\r\n                    System.out.println(\"아직 배송이 시작되지 않았습니다.\");\r\n                }\r\n                pause(scanner);\r\n                break;\r\n            case 3:\r\n                System.out.println(\"\\n[영수증 출력]\");\r\n                System.out.println(BORDER);\r\n                System.out.println(\"               온라인 서점 영수증\");\r\n                System.out.println(\"주문번호: \" + order.orderId);\r\n                System.out.println(\"주문일시: \" + order.orderDate);\r\n                System.out.println(\"고객명: \" + order.customerName);\r\n                System.out.println(SUB_BORDER);\r\n\r\n                for(OrderItem item : order.items) {\r\n                    System.out.printf(\"%s x %d권 = %,d원\\n\",\r\n                            item.book.title, item.quantity, item.getTotalPrice());\r\n                }\r\n\r\n                System.out.println(SUB_BORDER);\r\n                System.out.printf(\"결제 금액: %,d원\\n\", order.totalAmount);\r\n                System.out.printf(\"결제 방법: %s\\n\", order.paymentMethod);\r\n                System.out.println(BORDER);\r\n                System.out.println(\"영수증이 프린터로 전송되었습니다.\");\r\n                pause(scanner);\r\n                break;\r\n            case 99: exit(scanner); break;\r\n        }\r\n    }\r\n\r\n    private static void changeOrderStatus(Scanner scanner, Order order) {\r\n        System.out.println(\"\\n[주문 상태 변경]\");\r\n        printMenu(new String[]{\r\n                \"1. 배송 준비중\",\r\n                \"2. 배송 중\",\r\n                \"3. 배송 완료\",\r\n                \"4. 취소됨\",\r\n                \"0. 돌아가기\"\r\n        });\r\n\r\n        System.out.print(\"\\n>> 새 상태 선택: \");\r\n        int choice = getValidNumber(scanner, 0, 4);\r\n\r\n        if(choice == 0) return;\r\n\r\n        String newStatus = switch(choice) {\r\n            case 1 -> \"배송 준비중\";\r\n            case 2 -> \"배송 중\";\r\n            case 3 -> \"배송 완료\";\r\n            case 4 -> \"취소됨\";\r\n            default -> order.status;\r\n        };\r\n\r\n        MockOrderDB.updateOrderStatus(order.orderId, newStatus);\r\n        System.out.printf(\"\\n[완료] 주문 %s의 상태가 '%s'로 변경되었습니다.\\n\",\r\n                order.orderId, newStatus);\r\n        pause(scanner);\r\n    }\r\n\r\n    private static void searchOrdersByDate(Scanner scanner) {\r\n        System.out.println(\"\\n[날짜별 검색]\");\r\n        System.out.print(\"검색 시작일 입력 (YYYY-MM-DD): \");\r\n        String startDateStr = scanner.nextLine();\r\n        System.out.print(\"검색 종료일 입력 (YYYY-MM-DD): \");\r\n        String endDateStr = scanner.nextLine();\r\n\r\n        try {\r\n            LocalDate startDate = LocalDate.parse(startDateStr, DATE_FORMATTER);\r\n            LocalDate endDate = LocalDate.parse(endDateStr, DATE_FORMATTER);\r\n\r\n            List<Order> filteredOrders = MockOrderDB.getOrdersByDateRange(startDate, endDate);\r\n\r\n            if(filteredOrders.isEmpty()) {\r\n                System.out.println(\"\\n[알림] 해당 기간에 주문 내역이 없습니다\");\r\n            } else {\r\n                System.out.printf(\"\\n[%s ~ %s 주문 목록]\\n\", startDateStr, endDateStr);\r\n                for(int i=0; i<filteredOrders.size(); i++) {\r\n                    Order order = filteredOrders.get(i);\r\n                    System.out.printf(\"%d. 주문번호: %s | 고객명: %s | 주문일: %s | 상태: %s | 총액: %,d원\\n\",\r\n                            i+1, order.orderId, order.customerName, order.orderDate,\r\n                            order.status, order.totalAmount);\r\n                }\r\n            }\r\n        } catch (DateTimeParseException e) {\r\n            System.out.println(\"\\n[오류] 날짜 형식이 올바르지 않습니다 (YYYY-MM-DD)\");\r\n        }\r\n\r\n        pause(scanner);\r\n    }\r\n\r\n    private static void searchOrdersByStatus(Scanner scanner) {\r\n        System.out.println(\"\\n[상태별 검색]\");\r\n        printMenu(new String[]{\r\n                \"1. 배송 준비중\",\r\n                \"2. 배송 중\",\r\n                \"3. 배송 완료\",\r\n                \"4. 취소됨\",\r\n                \"5. 전체 상태\",\r\n                \"0. 돌아가기\"\r\n        });\r\n\r\n        System.out.print(\"\\n>> 검색할 상태: \");\r\n        int choice = getValidNumber(scanner, 0, 5);\r\n\r\n        if(choice == 0) return;\r\n\r\n        String statusToSearch = switch(choice) {\r\n            case 1 -> \"배송 준비중\";\r\n            case 2 -> \"배송 중\";\r\n            case 3 -> \"배송 완료\";\r\n            case 4 -> \"취소됨\";\r\n            case 5 -> null; // 전체 상태\r\n            default -> null;\r\n        };\r\n\r\n        List<Order> filteredOrders = MockOrderDB.getOrdersByStatus(statusToSearch);\r\n\r\n        if(filteredOrders.isEmpty()) {\r\n            System.out.println(\"\\n[알림] 해당 상태의 주문 내역이 없습니다\");\r\n        } else {\r\n            System.out.printf(\"\\n[%s 상태 주문 목록]\\n\",\r\n                    statusToSearch != null ? statusToSearch : \"전체\");\r\n            for(int i=0; i<filteredOrders.size(); i++) {\r\n                Order order = filteredOrders.get(i);\r\n                System.out.printf(\"%d. 주문번호: %s | 고객명: %s | 주문일: %s | 총액: %,d원\\n\",\r\n                        i+1, order.orderId, order.customerName, order.orderDate,\r\n                        order.totalAmount);\r\n            }\r\n        }\r\n\r\n        pause(scanner);\r\n    }\r\n\r\n    private static void showMonthlyOrderStats(Scanner scanner) {\r\n        clearScreen();\r\n        printHeader(\"월별 주문 통계\");\r\n\r\n        Map<String, Integer> monthlyStats = MockOrderDB.getMonthlyOrderStats();\r\n\r\n        if(monthlyStats.isEmpty()) {\r\n            System.out.println(\"\\n[알림] 주문 통계 데이터가 없습니다\");\r\n        } else {\r\n            System.out.println(\"\\n[월별 주문 건수]\");\r\n\r\n            // 날짜순으로 정렬\r\n            List<String> sortedMonths = new ArrayList<>(monthlyStats.keySet());\r\n            Collections.sort(sortedMonths);\r\n\r\n            System.out.println(SUB_BORDER);\r\n            System.out.printf(\"%-10s | %-10s | %-10s\\n\", \"년-월\", \"주문 건수\", \"그래프\");\r\n            System.out.println(SUB_BORDER);\r\n\r\n            for(String month : sortedMonths) {\r\n                int count = monthlyStats.get(month);\r\n                System.out.printf(\"%-10s | %-10d | %s\\n\",\r\n                        month, count, \"*\".repeat(count * 2));\r\n            }\r\n\r\n            System.out.println(SUB_BORDER);\r\n\r\n            // 총계 계산\r\n            int total = monthlyStats.values().stream().mapToInt(Integer::intValue).sum();\r\n            System.out.printf(\"총 주문 건수: %d건\\n\", total);\r\n        }\r\n\r\n        printMenu(new String[]{\"0. 돌아가기\"});\r\n        System.out.print(\"\\n>> 선택: \");\r\n        getValidNumber(scanner, 0, 0);\r\n    }\r\n\r\n    // 회원 정보 관리\r\n    private static void userFlow(Scanner scanner) {\r\n        System.out.println(\"회원 정보 관리 기능은 아직 준비 중입니다.\");\r\n        pause(scanner);\r\n    }\r\n\r\n    // 섹션 출력\r\n    private static void printSection(String title) {\r\n        System.out.println(\"\\n\" + SUB_BORDER);\r\n        System.out.println(\"| \" + title);\r\n        System.out.println(SUB_BORDER);\r\n    }\r\n\r\n    // 헤더 출력\r\n    private static void printHeader(String title) {\r\n        System.out.println(BORDER);\r\n        System.out.println(\"| \" + title + \" |\");\r\n        System.out.println(BORDER);\r\n    }\r\n\r\n    // 메뉴 출력\r\n    private static void printMenu(String[] items) {\r\n        System.out.println(\"\\n\" + SUB_BORDER);\r\n        for(String item : items) {\r\n            System.out.println(item);\r\n        }\r\n        System.out.println(SUB_BORDER);\r\n    }\r\n\r\n    // 화면 클리어\r\n    private static void clearScreen() {\r\n        for(int i=0; i<50; i++) {\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    // 일시 정지\r\n    private static void pause(Scanner scanner) {\r\n        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n        scanner.nextLine();\r\n    }\r\n\r\n    // 에러 메시지 출력\r\n    private static void errorMsg(String message) {\r\n        System.out.println(\"\\n[경고] \" + message);\r\n    }\r\n\r\n    // 입력 검증\r\n    private static int getValidNumber(Scanner scanner, int min, int max) {\r\n        while(true) {\r\n            try {\r\n                int input = scanner.nextInt();\r\n                scanner.nextLine(); // 버퍼 비우기\r\n                if(input == 0 || input == 99 || (input >= min && input <= max)) {\r\n                    return input;\r\n                }\r\n                System.out.printf(\"[경고] %d~%d 사이 숫자를 입력해주세요 (0:뒤로가기, 99:종료)\\n\", min, max);\r\n            } catch(InputMismatchException e) {\r\n                System.out.println(\"[경고] 숫자만 입력 가능합니다\");\r\n                scanner.nextLine(); // 버퍼 비우기\r\n            }\r\n        }\r\n    }\r\n\r\n    // 랜덤 메시지 생성\r\n    private static String getRandomMessage(String[] messages) {\r\n        return messages[random.nextInt(messages.length)];\r\n    }\r\n\r\n    // 랜덤 통계 메시지 생성 (수량 기반 동적 계산)\r\n    private static String getRandomStatistic(int quantity) {\r\n        StatisticMessage statistic = PURCHASE_STATISTICS[random.nextInt(PURCHASE_STATISTICS.length)];\r\n        return statistic.getFormattedMessage(quantity);\r\n    }\r\n\r\n    // 예외 처리 핸들러\r\n    private static void errorHandler(Scanner scanner, Exception e) {\r\n        System.out.println(\"\\n[시스템 오류] \" + e.getMessage());\r\n        scanner.nextLine(); // 버퍼 비우기\r\n    }\r\n\r\n    // 종료\r\n    private static void exit(Scanner scanner) {\r\n        System.out.println(\"\\n[종료] 프로그램을 종료합니다.\");\r\n        System.out.println(\"이용해주셔서 감사합니다!\");\r\n        scanner.close();\r\n        System.exit(0);\r\n    }\r\n}\r\n"
        }
    ]
}