{
    "sourceFile": "src/ViewMainTest3.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1743648002737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743648293107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import java.util.*;\r\n import java.util.stream.Collectors;\r\n \r\n-public class ViewMainTest3 {\r\n+public class ViewMain {\r\n     private static final Random random = new Random();\r\n     private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦\";\r\n     private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n \r\n"
                },
                {
                    "date": 1743648362715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,9 +355,9 @@\n         System.out.println(\"✦\\t\" + title + \"\\t✦\");\r\n         System.out.println(BORDER);\r\n     }\r\n \r\n-    private static void printMenu(String[] items) {\r\n+    private static void printMenu(List<String> items) {\r\n         System.out.println(SUB_BORDER);\r\n         for(int i=0; i<items.length; i++) {\r\n             System.out.printf(\"%2d. %s\\n\", i+1, items[i]);\r\n         }\r\n"
                },
                {
                    "date": 1743648381149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -357,10 +357,10 @@\n     }\r\n \r\n     private static void printMenu(List<String> items) {\r\n         System.out.println(SUB_BORDER);\r\n-        for(int i=0; i<items.length; i++) {\r\n-            System.out.printf(\"%2d. %s\\n\", i+1, items[i]);\r\n+        for(int i=0; i<items.size(); i++) {\r\n+            System.out.printf(\"%2d. %s\\n\", i+1, items.get(i));\r\n         }\r\n         System.out.println(SUB_BORDER);\r\n     }\r\n \r\n"
                },
                {
                    "date": 1743648438156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n                 System.out.printf(\"└─ 소계: %,d원\\n\", item.getTotalPrice());\r\n                 System.out.println(SUB_BORDER);\r\n             });\r\n \r\n-            printMenu(new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"});\r\n+            printMenu(new ArrayList<String>({\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"})); // new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"}\r\n             handleCartAction(scanner);\r\n         }\r\n     }\r\n \r\n"
                },
                {
                    "date": 1743648447038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n                 System.out.printf(\"└─ 소계: %,d원\\n\", item.getTotalPrice());\r\n                 System.out.println(SUB_BORDER);\r\n             });\r\n \r\n-            printMenu(new ArrayList<String>({\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"})); // new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"}\r\n+            printMenu(new ArrayList<>(Arrays.asList(\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"))); // new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"}\r\n             handleCartAction(scanner);\r\n         }\r\n     }\r\n \r\n"
                },
                {
                    "date": 1743648466352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,9 +254,9 @@\n             System.out.printf(\"├─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n         }\r\n         System.out.println(SUB_BORDER);\r\n \r\n-        printMenu(new String[]{\"1. 장바구니 추가\", \"2. 바로구매\", \"0. 돌아가기\"});\r\n+        printMenu(new ArrayList<>(Arrays.asList(\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"))); // new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"}\r\n         handlePurchaseChoice(book, scanner);\r\n     }\r\n \r\n     private static void handlePurchaseChoice(Book book, Scanner scanner) {\r\n"
                },
                {
                    "date": 1743648490653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,9 +254,11 @@\n             System.out.printf(\"├─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n         }\r\n         System.out.println(SUB_BORDER);\r\n \r\n+\r\n         printMenu(new ArrayList<>(Arrays.asList(\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"))); // new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"}\r\n+\r\n         handlePurchaseChoice(book, scanner);\r\n     }\r\n \r\n     private static void handlePurchaseChoice(Book book, Scanner scanner) {\r\n"
                },
                {
                    "date": 1743648514262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,14 +136,16 @@\n     private static void searchFlow(Scanner scanner) {\r\n         while(true) {\r\n             clearScreen();\r\n             printHeader(\"도서 검색\");\r\n-            printMenu(new String[]{\r\n+            printMenu(new ArrayList<>(Arrays.asList(\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"))); // new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"}\r\n+\r\n+            printMenu(new ArrayList<>(Arrays.asList(\r\n                 \"1. 베스트셀러\", \r\n-                \"2. 신간 도서\", \r\n-                \"3. 전체 검색\",\r\n-                \"0. 홈으로\"\r\n-            });\r\n+                \"2. 신간\", \r\n+                \"3. 전체\"\r\n+            )));\r\n+            System.out.print(\"\\n▶ 검색할 도서 종류 (0: 뒤로가기): \");\r\n \r\n             int choice = getValidNumber(scanner, 0, 3);\r\n             if(choice == 0) return;\r\n             \r\n"
                },
                {
                    "date": 1743648521795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,10 +136,9 @@\n     private static void searchFlow(Scanner scanner) {\r\n         while(true) {\r\n             clearScreen();\r\n             printHeader(\"도서 검색\");\r\n-            printMenu(new ArrayList<>(Arrays.asList(\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"))); // new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"}\r\n-\r\n+            System.out.println(\"└─ 검색할 도서 종류를 선택하세요\");\r\n             printMenu(new ArrayList<>(Arrays.asList(\r\n                 \"1. 베스트셀러\", \r\n                 \"2. 신간\", \r\n                 \"3. 전체\"\r\n"
                },
                {
                    "date": 1743648527234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,8 +137,9 @@\n         while(true) {\r\n             clearScreen();\r\n             printHeader(\"도서 검색\");\r\n             System.out.println(\"└─ 검색할 도서 종류를 선택하세요\");\r\n+            System.out.println(\"───────────────────────────────────────────\");\r\n             printMenu(new ArrayList<>(Arrays.asList(\r\n                 \"1. 베스트셀러\", \r\n                 \"2. 신간\", \r\n                 \"3. 전체\"\r\n"
                },
                {
                    "date": 1743648544623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,13 +112,16 @@\n     private static void home(Scanner scanner) {\r\n         while(true) {\r\n             clearScreen();\r\n             printHeader(\"메인 메뉴\");\r\n-            printMenu(new String[]{\r\n+            System.out.println(\"└─ 원하는 메뉴를 선택하세요\");\r\n+            System.out.println(SUB_BORDER);\r\n+            \r\n+            printMenu(new ArrayList<>(Arrays.asList(\r\n                 \"1. 도서 검색\", \r\n-                \"2. 장바구니\",\r\n+                \"2. 장바구니 관리\", \r\n                 \"99. 종료\"\r\n-            });\r\n+            )));\r\n             \r\n             try {\r\n                 System.out.print(\"\\n▶ 메뉴 선택: \");\r\n                 int choice = getValidNumber(scanner, 1, 99);\r\n"
                },
                {
                    "date": 1743648594116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import java.util.*;\r\n+import java.util.stream.Collectors;\r\n+\r\n+public class ViewMain {\r\n+    private static final Random random = new Random();\r\n+    private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦\";\r\n+    private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n+\r\n+    static class Book {\r\n+        String id;\r\n+        String title;\r\n+        String author;\r\n+        int basePrice;\r\n+        String type;\r\n+        String condition;\r\n+        String publicationDate;\r\n+        Integer reviewRank;\r\n+\r\n+        public Book(String id, String title, String author, int basePrice, \r\n+                   String type, String condition, String publicationDate, Integer reviewRank) {\r\n+            this.id = id;\r\n+            this.title = title;\r\n+            this.author = author;\r\n+            this.basePrice = basePrice;\r\n+            this.type = type;\r\n+            this.condition = condition;\r\n+            this.publicationDate = publicationDate;\r\n+            this.reviewRank = reviewRank;\r\n+        }\r\n+\r\n+        public int getPrice() {\r\n+            return switch(condition) {\r\n+                case \"상\" -> (int)(basePrice * 0.7);\r\n+                case \"중\" -> (int)(basePrice * 0.5);\r\n+                case \"하\" -> (int)(basePrice * 0.3);\r\n+                default -> basePrice;\r\n+            };\r\n+        }\r\n+    }\r\n+\r\n+    static class MockDB {\r\n+        private static final List<Book> masterBooks = Arrays.asList(\r\n+            new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\", \"2025-01-15\", 1),\r\n+            new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\", \"2024-12-01\", 2),\r\n+            new Book(\"B003\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"new\", \"2025-03-20\", null),\r\n+            new Book(\"B004\", \"React for Beginners\", \"Dan Abramov\", 35000, \"전체\", \"하\", \"2023-05-11\", null),\r\n+            new Book(\"B005\", \"Python AI\", \"장영실\", 28000, \"전체\", \"new\", \"2025-02-28\", null)\r\n+        );\r\n+\r\n+        private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n+\r\n+        static List<Book> getBooks(String searchType) {\r\n+            return availableBooks.stream()\r\n+                .filter(book -> searchType.equals(\"전체\") || book.type.equals(searchType))\r\n+                .collect(Collectors.toList());\r\n+        }\r\n+\r\n+        static void removeBook(String bookId) {\r\n+            availableBooks.removeIf(book -> book.id.equals(bookId));\r\n+        }\r\n+    }\r\n+\r\n+    static class CartItem {\r\n+        Book book;\r\n+        int quantity;\r\n+\r\n+        public CartItem(Book book, int quantity) {\r\n+            this.book = book;\r\n+            this.quantity = quantity;\r\n+        }\r\n+\r\n+        public int getTotalPrice() {\r\n+            return book.getPrice() * quantity;\r\n+        }\r\n+    }\r\n+\r\n+    static class MockCartDB {\r\n+        private static List<CartItem> cart = new ArrayList<>();\r\n+\r\n+        static void addItem(Book book, int quantity) {\r\n+            cart.add(new CartItem(book, quantity));\r\n+        }\r\n+\r\n+        static List<CartItem> getCart() {\r\n+            return new ArrayList<>(cart);\r\n+        }\r\n+\r\n+        static void clearCart() {\r\n+            cart.clear();\r\n+        }\r\n+    }\r\n+\r\n+    private static final String[] PURCHASE_MESSAGES = {\r\n+        \"지금까지 읽으신 책의 총 페이지를 쌓으면 에베레스트 높이의 3배에 달합니다.\",\r\n+        \"당신이 읽은 책들을 쌓으면 남산타워 15개를 세운 높이입니다.\"\r\n+    };\r\n+\r\n+    public static void main(String[] args) {\r\n+        Scanner scanner = new Scanner(System.in);\r\n+        clearScreen();\r\n+        \r\n+        printHeader(\"온라인 서점 시스템\");\r\n+        printSection(\"로그인\");\r\n+        System.out.print(\"├─ 성명: \");\r\n+        scanner.nextLine();\r\n+        System.out.print(\"├─ 비밀번호: \");\r\n+        scanner.nextLine();\r\n+        \r\n+        home(scanner);\r\n+    }\r\n+\r\n+    private static void printSection(String string) {\r\n+        // TODO Auto-generated method stub\r\n+        throw new UnsupportedOperationException(\"Unimplemented method 'printSection'\");\r\n+    }\r\n+\r\n+    private static void home(Scanner scanner) {\r\n+        while(true) {\r\n+            clearScreen();\r\n+            printHeader(\"메인 메뉴\");\r\n+            System.out.println(\"└─ 원하는 메뉴를 선택하세요\");\r\n+            System.out.println(SUB_BORDER);\r\n+            \r\n+            printMenu(new ArrayList<>(Arrays.asList(\r\n+                \"1. 도서 검색\", \r\n+                \"2. 장바구니 관리\", \r\n+                \"99. 종료\"\r\n+            )));\r\n+            \r\n+            try {\r\n+                System.out.print(\"\\n▶ 메뉴 선택: \");\r\n+                int choice = getValidNumber(scanner, 1, 99);\r\n+                switch(choice) {\r\n+                    case 1: searchFlow(scanner); break;\r\n+                    case 2: cartFlow(scanner); break;\r\n+                    case 99: exit(scanner); break;\r\n+                }\r\n+            } catch (Exception e) {\r\n+                errorHandler(e);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static void searchFlow(Scanner scanner) {\r\n+        while(true) {\r\n+            clearScreen();\r\n+            printHeader(\"도서 검색\");\r\n+            System.out.println(\"└─ 검색할 도서 종류를 선택하세요\");\r\n+            System.out.println(\"───────────────────────────────────────────\");\r\n+            printMenu(new ArrayList<>(Arrays.asList(\r\n+                \"1. 베스트셀러\", \r\n+                \"2. 신간\", \r\n+                \"3. 전체\"\r\n+            )));\r\n+            System.out.print(\"\\n▶ 검색할 도서 종류 (0: 뒤로가기): \");\r\n+\r\n+            int choice = getValidNumber(scanner, 0, 3);\r\n+            if(choice == 0) return;\r\n+            \r\n+            String searchType = switch(choice) {\r\n+                case 1 -> \"베스트셀러\";\r\n+                case 2 -> \"신간\";\r\n+                case 3 -> \"전체\";\r\n+                default -> \"\";\r\n+            };\r\n+\r\n+            System.out.print(\"\\n🔍 검색어 입력: \");\r\n+            String keyword = scanner.next();\r\n+            \r\n+            List<Book> results = MockDB.getBooks(searchType).stream()\r\n+                .filter(book -> book.title.contains(keyword))\r\n+                .collect(Collectors.toList());\r\n+                \r\n+            handleSearchResults(results, searchType, keyword, scanner);\r\n+        }\r\n+    }\r\n+\r\n+    private static void handleSearchResults(List<Book> books, String type, String keyword, Scanner scanner) {\r\n+        clearScreen();\r\n+        printHeader(\"'\" + keyword + \"' 검색 결과 (\" + type + \")\");\r\n+\r\n+        if(books.isEmpty()) {\r\n+            System.out.println(\"\\n⚠ 검색 결과가 없습니다\");\r\n+            pause(scanner);\r\n+            return;\r\n+        }\r\n+\r\n+        System.out.println(\"\\n[정렬 옵션]\");\r\n+        List<String> sortOptions = new ArrayList<>(Arrays.asList(\r\n+            \"1. 가격 낮은 순\", \r\n+            \"2. 가격 높은 순\", \r\n+            \"3. 출판일 최신순\"\r\n+        ));\r\n+        \r\n+        if(type.equals(\"베스트셀러\")) {\r\n+            sortOptions.add(\"4. 리뷰 순위 순\");\r\n+        }\r\n+        sortOptions.add(\"0. 기본 정렬(가나다순)\");\r\n+        printMenu(sortOptions);\r\n+\r\n+        int sortChoice = getValidNumber(scanner, 0, sortOptions.size());\r\n+        sortBooks(books, sortChoice, type);\r\n+\r\n+        displayBooks(books);\r\n+        handleBookSelection(books, scanner);\r\n+    }\r\n+\r\n+    private static void sortBooks(List<Book> books, int sortChoice, String type) {\r\n+        switch(sortChoice) {\r\n+            case 1 -> books.sort(Comparator.comparingInt(Book::getPrice));\r\n+            case 2 -> books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n+            case 3 -> books.sort((b1, b2) -> b2.publicationDate.compareTo(b1.publicationDate));\r\n+            case 4 -> {\r\n+                if(type.equals(\"베스트셀러\")) {\r\n+                    books.sort(Comparator.comparingInt(b -> b.reviewRank));\r\n+                }\r\n+            }\r\n+            default -> books.sort(Comparator.comparing(b -> b.title));\r\n+        }\r\n+    }\r\n+\r\n+    private static void displayBooks(List<Book> books) {\r\n+        int index = 1;\r\n+        for(Book book : books) {\r\n+            System.out.printf(\"\\n%d. %s\\n\", index++, book.title);\r\n+            System.out.printf(\"├─ ID: %s\\n\", book.id);\r\n+            System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n+            System.out.printf(\"├─ 가격: %,d원\\n\", book.getPrice());\r\n+            System.out.printf(\"├─ 상태: %s\\n\", getConditionText(book.condition));\r\n+            System.out.printf(\"├─ 출판일: %s\\n\", book.publicationDate);\r\n+            if(book.reviewRank != null) {\r\n+                System.out.printf(\"└─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n+            }\r\n+            System.out.println(SUB_BORDER);\r\n+        }\r\n+    }\r\n+\r\n+    private static String getConditionText(String condition) {\r\n+        return switch(condition) {\r\n+            case \"new\" -> \"신상품\";\r\n+            case \"상\" -> \"중고-상\";\r\n+            case \"중\" -> \"중고-중\"; \r\n+            case \"하\" -> \"중고-하\";\r\n+            default -> \"알 수 없음\";\r\n+        };\r\n+    }\r\n+\r\n+    private static void handleBookSelection(List<Book> books, Scanner scanner) {\r\n+        System.out.print(\"\\n▶ 상세보기 할 도서 번호 (0: 뒤로가기): \");\r\n+        int choice = getValidNumber(scanner, 0, books.size());\r\n+        if(choice != 0) showBookDetail(books.get(choice-1), scanner);\r\n+    }\r\n+\r\n+    private static void showBookDetail(Book book, Scanner scanner) {\r\n+        clearScreen();\r\n+        printHeader(\"[상세 정보] \" + book.title);\r\n+        System.out.printf(\"├─ ISBN: %s\\n\", book.id);\r\n+        System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n+        System.out.printf(\"├─ 정가: %,d원\\n\", book.basePrice);\r\n+        System.out.printf(\"├─ 판매가: %,d원\\n\", book.getPrice());\r\n+        System.out.printf(\"├─ 상태: %s\\n\", getConditionText(book.condition));\r\n+        System.out.printf(\"├─ 출판일: %s\\n\", book.publicationDate);\r\n+        if(book.reviewRank != null) {\r\n+            System.out.printf(\"├─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n+        }\r\n+        System.out.println(SUB_BORDER);\r\n+\r\n+\r\n+        printMenu(new ArrayList<>(Arrays.asList(\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"))); // new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"}\r\n+\r\n+        handlePurchaseChoice(book, scanner);\r\n+    }\r\n+\r\n+    private static void handlePurchaseChoice(Book book, Scanner scanner) {\r\n+        int choice = getValidNumber(scanner, 0, 2);\r\n+        switch(choice) {\r\n+            case 1 -> handleAddToCart(book, scanner);\r\n+            case 2 -> processPurchase(book, scanner);\r\n+        }\r\n+    }\r\n+\r\n+    private static void handleAddToCart(Book book, Scanner scanner) {\r\n+        System.out.print(\"\\n▶ 수량 입력: \");\r\n+        int quantity = getValidNumber(scanner, 1, 10);\r\n+        MockCartDB.addItem(book, quantity);\r\n+        System.out.printf(\"\\n✅ %s %d권 장바구니 추가 완료!\\n\", book.title, quantity);\r\n+        pause(scanner);\r\n+    }\r\n+\r\n+    private static void processPurchase(Book book, Scanner scanner) {\r\n+        System.out.print(\"\\n▶ 수량 입력: \");\r\n+        int quantity = getValidNumber(scanner, 1, 10);\r\n+        \r\n+        System.out.println(\"\\n================ 결제 정보 ================\");\r\n+        System.out.printf(\"도서명: %s\\n\", book.title);\r\n+        System.out.printf(\"수량: %d권\\n\", quantity);\r\n+        System.out.printf(\"결제금액: %,d원\\n\", book.getPrice() * quantity);\r\n+        System.out.println(\"-----------------------------------------\");\r\n+        System.out.println(\"1. 신용카드 결제 | 2. 계좌이체 | 0. 취소\");\r\n+        \r\n+        int paymentType = getValidNumber(scanner, 0, 2);\r\n+        if(paymentType != 0) {\r\n+            System.out.println(\"✅ 결제가 완료되었습니다!\");\r\n+            MockDB.removeBook(book.id);\r\n+            System.out.println(\"📊 \" + getRandomMessage());\r\n+        }\r\n+        pause(scanner);\r\n+    }\r\n+\r\n+    private static void cartFlow(Scanner scanner) {\r\n+        while(true) {\r\n+            clearScreen();\r\n+            printHeader(\"장바구니 관리\");\r\n+            List<CartItem> cart = MockCartDB.getCart();\r\n+            \r\n+            if(cart.isEmpty()) {\r\n+                System.out.println(\"\\n🛒 장바구니가 비어 있습니다\");\r\n+                pause(scanner);\r\n+                return;\r\n+            }\r\n+\r\n+            cart.forEach(item -> {\r\n+                System.out.printf(\"\\n📘 %s\\n\", item.book.title);\r\n+                System.out.printf(\"├─ 수량: %d개\\n\", item.quantity);\r\n+                System.out.printf(\"├─ 단가: %,d원\\n\", item.book.getPrice());\r\n+                System.out.printf(\"└─ 소계: %,d원\\n\", item.getTotalPrice());\r\n+                System.out.println(SUB_BORDER);\r\n+            });\r\n+\r\n+            printMenu(new ArrayList<>(Arrays.asList(\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"))); // new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"}\r\n+            handleCartAction(scanner);\r\n+        }\r\n+    }\r\n+\r\n+    private static void handleCartAction(Scanner scanner) {\r\n+        int choice = getValidNumber(scanner, 0, 2);\r\n+        switch(choice) {\r\n+            case 1 -> processBulkPurchase(scanner);\r\n+            case 2 -> {\r\n+                MockCartDB.clearCart();\r\n+                System.out.println(\"\\n✅ 장바구니를 비웠습니다\");\r\n+                pause(scanner);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static void processBulkPurchase(Scanner scanner) {\r\n+        System.out.println(\"\\n================ 총 결제 정보 ================\");\r\n+        int total = MockCartDB.getCart().stream()\r\n+                .mapToInt(CartItem::getTotalPrice)\r\n+                .sum();\r\n+        System.out.printf(\"총 결제금액: %,d원\\n\", total);\r\n+        System.out.println(\"-----------------------------------------\");\r\n+        System.out.println(\"1. 신용카드 결제 | 2. 계좌이체 | 0. 취소\");\r\n+        \r\n+        int paymentType = getValidNumber(scanner, 0, 2);\r\n+        if(paymentType != 0) {\r\n+            System.out.println(\"✅ 전체 결제가 완료되었습니다!\");\r\n+            MockCartDB.clearCart();\r\n+        }\r\n+        pause(scanner);\r\n+    }\r\n+\r\n+    // 유틸리티 메서드\r\n+    private static void printHeader(String title) {\r\n+        System.out.println(BORDER);\r\n+        System.out.println(\"✦\\t\" + title + \"\\t✦\");\r\n+        System.out.println(BORDER);\r\n+    }\r\n+\r\n+    private static void printMenu(List<String> items) {\r\n+        System.out.println(SUB_BORDER);\r\n+        for(int i=0; i<items.size(); i++) {\r\n+            System.out.printf(\"%2d. %s\\n\", i+1, items.get(i));\r\n+        }\r\n+        System.out.println(SUB_BORDER);\r\n+    }\r\n+\r\n+    private static void clearScreen() { \r\n+        System.out.print(\"\\033[H\\033[2J\"); \r\n+        System.out.flush();\r\n+    }\r\n+\r\n+    private static void pause(Scanner scanner) {\r\n+        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n+        scanner.nextLine();\r\n+    }\r\n+\r\n+    private static int getValidNumber(Scanner scanner, int min, int max) {\r\n+        while(true) {\r\n+            try {\r\n+                int input = scanner.nextInt();\r\n+                if(input >= min && input <= max) return input;\r\n+                System.out.printf(\"⚠ %d~%d 사이 숫자 입력 필요\\n\", min, max);\r\n+            } catch (InputMismatchException e) {\r\n+                System.out.println(\"⚠ 숫자만 입력 가능합니다\");\r\n+                scanner.nextLine();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static String getRandomMessage() {\r\n+        return PURCHASE_MESSAGES[random.nextInt(PURCHASE_MESSAGES.length)];\r\n+    }\r\n+\r\n+    private static void errorHandler(Exception e) {\r\n+        System.out.println(\"\\n[시스템 오류] \" + e.getMessage());\r\n+    }\r\n+\r\n+    private static void exit(Scanner scanner) {\r\n+        System.out.println(\"\\n❤ 이용해주셔서 감사합니다!\");\r\n+        scanner.close();\r\n+        System.exit(0);\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1743648909908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import java.util.*;\r\n import java.util.stream.Collectors;\r\n \r\n-public class ViewMain {\r\n+public class ViewMainTest3 {\r\n     private static final Random random = new Random();\r\n     private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦\";\r\n     private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n \r\n"
                },
                {
                    "date": 1743648970051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,11 +108,13 @@\n         \r\n         home(scanner);\r\n     }\r\n \r\n-    private static void printSection(String string) {\r\n-        // TODO Auto-generated method stub\r\n-        throw new UnsupportedOperationException(\"Unimplemented method 'printSection'\");\r\n+    // printSection 메서드 구현\r\n+    private static void printSection(String title) {\r\n+        System.out.println(\"\\n\" + BORDER);\r\n+        System.out.printf(\"✦ %s ✦\\n\", title);\r\n+        System.out.println(BORDER + \"\\n\");\r\n     }\r\n \r\n     private static void home(Scanner scanner) {\r\n         while(true) {\r\n"
                },
                {
                    "date": 1743649007989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,8 +376,16 @@\n             System.out.printf(\"%2d. %s\\n\", i+1, items.get(i));\r\n         }\r\n         System.out.println(SUB_BORDER);\r\n     }\r\n+    // 기존 printMenu(String[]) 유지\r\n+    private static void printMenu(String[] items) {\r\n+        System.out.println(SUB_BORDER);\r\n+        for (int i = 0; i < items.length; i++) {\r\n+            System.out.printf(\"%2d. %s\\n\", i + 1, items[i]);\r\n+        }\r\n+        System.out.println(SUB_BORDER);\r\n+    }\r\n \r\n     private static void clearScreen() { \r\n         System.out.print(\"\\033[H\\033[2J\"); \r\n         System.out.flush();\r\n"
                },
                {
                    "date": 1743649013509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -422,414 +422,4 @@\n         scanner.close();\r\n         System.exit(0);\r\n     }\r\n }\r\n-import java.util.*;\r\n-import java.util.stream.Collectors;\r\n-\r\n-public class ViewMain {\r\n-    private static final Random random = new Random();\r\n-    private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦\";\r\n-    private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n-\r\n-    static class Book {\r\n-        String id;\r\n-        String title;\r\n-        String author;\r\n-        int basePrice;\r\n-        String type;\r\n-        String condition;\r\n-        String publicationDate;\r\n-        Integer reviewRank;\r\n-\r\n-        public Book(String id, String title, String author, int basePrice, \r\n-                   String type, String condition, String publicationDate, Integer reviewRank) {\r\n-            this.id = id;\r\n-            this.title = title;\r\n-            this.author = author;\r\n-            this.basePrice = basePrice;\r\n-            this.type = type;\r\n-            this.condition = condition;\r\n-            this.publicationDate = publicationDate;\r\n-            this.reviewRank = reviewRank;\r\n-        }\r\n-\r\n-        public int getPrice() {\r\n-            return switch(condition) {\r\n-                case \"상\" -> (int)(basePrice * 0.7);\r\n-                case \"중\" -> (int)(basePrice * 0.5);\r\n-                case \"하\" -> (int)(basePrice * 0.3);\r\n-                default -> basePrice;\r\n-            };\r\n-        }\r\n-    }\r\n-\r\n-    static class MockDB {\r\n-        private static final List<Book> masterBooks = Arrays.asList(\r\n-            new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\", \"2025-01-15\", 1),\r\n-            new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\", \"2024-12-01\", 2),\r\n-            new Book(\"B003\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"new\", \"2025-03-20\", null),\r\n-            new Book(\"B004\", \"React for Beginners\", \"Dan Abramov\", 35000, \"전체\", \"하\", \"2023-05-11\", null),\r\n-            new Book(\"B005\", \"Python AI\", \"장영실\", 28000, \"전체\", \"new\", \"2025-02-28\", null)\r\n-        );\r\n-\r\n-        private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n-\r\n-        static List<Book> getBooks(String searchType) {\r\n-            return availableBooks.stream()\r\n-                .filter(book -> searchType.equals(\"전체\") || book.type.equals(searchType))\r\n-                .collect(Collectors.toList());\r\n-        }\r\n-\r\n-        static void removeBook(String bookId) {\r\n-            availableBooks.removeIf(book -> book.id.equals(bookId));\r\n-        }\r\n-    }\r\n-\r\n-    static class CartItem {\r\n-        Book book;\r\n-        int quantity;\r\n-\r\n-        public CartItem(Book book, int quantity) {\r\n-            this.book = book;\r\n-            this.quantity = quantity;\r\n-        }\r\n-\r\n-        public int getTotalPrice() {\r\n-            return book.getPrice() * quantity;\r\n-        }\r\n-    }\r\n-\r\n-    static class MockCartDB {\r\n-        private static List<CartItem> cart = new ArrayList<>();\r\n-\r\n-        static void addItem(Book book, int quantity) {\r\n-            cart.add(new CartItem(book, quantity));\r\n-        }\r\n-\r\n-        static List<CartItem> getCart() {\r\n-            return new ArrayList<>(cart);\r\n-        }\r\n-\r\n-        static void clearCart() {\r\n-            cart.clear();\r\n-        }\r\n-    }\r\n-\r\n-    private static final String[] PURCHASE_MESSAGES = {\r\n-        \"지금까지 읽으신 책의 총 페이지를 쌓으면 에베레스트 높이의 3배에 달합니다.\",\r\n-        \"당신이 읽은 책들을 쌓으면 남산타워 15개를 세운 높이입니다.\"\r\n-    };\r\n-\r\n-    public static void main(String[] args) {\r\n-        Scanner scanner = new Scanner(System.in);\r\n-        clearScreen();\r\n-        \r\n-        printHeader(\"온라인 서점 시스템\");\r\n-        printSection(\"로그인\");\r\n-        System.out.print(\"├─ 성명: \");\r\n-        scanner.nextLine();\r\n-        System.out.print(\"├─ 비밀번호: \");\r\n-        scanner.nextLine();\r\n-        \r\n-        home(scanner);\r\n-    }\r\n-\r\n-    private static void home(Scanner scanner) {\r\n-        while(true) {\r\n-            clearScreen();\r\n-            printHeader(\"메인 메뉴\");\r\n-            System.out.println(\"└─ 원하는 메뉴를 선택하세요\");\r\n-            System.out.println(SUB_BORDER);\r\n-            \r\n-            printMenu(new ArrayList<>(Arrays.asList(\r\n-                \"1. 도서 검색\", \r\n-                \"2. 장바구니 관리\", \r\n-                \"99. 종료\"\r\n-            )));\r\n-            \r\n-            try {\r\n-                System.out.print(\"\\n▶ 메뉴 선택: \");\r\n-                int choice = getValidNumber(scanner, 1, 99);\r\n-                switch(choice) {\r\n-                    case 1: searchFlow(scanner); break;\r\n-                    case 2: cartFlow(scanner); break;\r\n-                    case 99: exit(scanner); break;\r\n-                }\r\n-            } catch (Exception e) {\r\n-                errorHandler(e);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private static void searchFlow(Scanner scanner) {\r\n-        while(true) {\r\n-            clearScreen();\r\n-            printHeader(\"도서 검색\");\r\n-            System.out.println(\"└─ 검색할 도서 종류를 선택하세요\");\r\n-            System.out.println(\"───────────────────────────────────────────\");\r\n-            printMenu(new ArrayList<>(Arrays.asList(\r\n-                \"1. 베스트셀러\", \r\n-                \"2. 신간\", \r\n-                \"3. 전체\"\r\n-            )));\r\n-            System.out.print(\"\\n▶ 검색할 도서 종류 (0: 뒤로가기): \");\r\n-\r\n-            int choice = getValidNumber(scanner, 0, 3);\r\n-            if(choice == 0) return;\r\n-            \r\n-            String searchType = switch(choice) {\r\n-                case 1 -> \"베스트셀러\";\r\n-                case 2 -> \"신간\";\r\n-                case 3 -> \"전체\";\r\n-                default -> \"\";\r\n-            };\r\n-\r\n-            System.out.print(\"\\n🔍 검색어 입력: \");\r\n-            String keyword = scanner.next();\r\n-            \r\n-            List<Book> results = MockDB.getBooks(searchType).stream()\r\n-                .filter(book -> book.title.contains(keyword))\r\n-                .collect(Collectors.toList());\r\n-                \r\n-            handleSearchResults(results, searchType, keyword, scanner);\r\n-        }\r\n-    }\r\n-\r\n-    private static void handleSearchResults(List<Book> books, String type, String keyword, Scanner scanner) {\r\n-        clearScreen();\r\n-        printHeader(\"'\" + keyword + \"' 검색 결과 (\" + type + \")\");\r\n-\r\n-        if(books.isEmpty()) {\r\n-            System.out.println(\"\\n⚠ 검색 결과가 없습니다\");\r\n-            pause(scanner);\r\n-            return;\r\n-        }\r\n-\r\n-        System.out.println(\"\\n[정렬 옵션]\");\r\n-        List<String> sortOptions = new ArrayList<>(Arrays.asList(\r\n-            \"1. 가격 낮은 순\", \r\n-            \"2. 가격 높은 순\", \r\n-            \"3. 출판일 최신순\"\r\n-        ));\r\n-        \r\n-        if(type.equals(\"베스트셀러\")) {\r\n-            sortOptions.add(\"4. 리뷰 순위 순\");\r\n-        }\r\n-        sortOptions.add(\"0. 기본 정렬(가나다순)\");\r\n-        printMenu(sortOptions);\r\n-\r\n-        int sortChoice = getValidNumber(scanner, 0, sortOptions.size());\r\n-        sortBooks(books, sortChoice, type);\r\n-\r\n-        displayBooks(books);\r\n-        handleBookSelection(books, scanner);\r\n-    }\r\n-\r\n-    private static void sortBooks(List<Book> books, int sortChoice, String type) {\r\n-        switch(sortChoice) {\r\n-            case 1 -> books.sort(Comparator.comparingInt(Book::getPrice));\r\n-            case 2 -> books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n-            case 3 -> books.sort((b1, b2) -> b2.publicationDate.compareTo(b1.publicationDate));\r\n-            case 4 -> {\r\n-                if(type.equals(\"베스트셀러\")) {\r\n-                    books.sort(Comparator.comparingInt(b -> b.reviewRank));\r\n-                }\r\n-            }\r\n-            default -> books.sort(Comparator.comparing(b -> b.title));\r\n-        }\r\n-    }\r\n-\r\n-    private static void displayBooks(List<Book> books) {\r\n-        int index = 1;\r\n-        for(Book book : books) {\r\n-            System.out.printf(\"\\n%d. %s\\n\", index++, book.title);\r\n-            System.out.printf(\"├─ ID: %s\\n\", book.id);\r\n-            System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n-            System.out.printf(\"├─ 가격: %,d원\\n\", book.getPrice());\r\n-            System.out.printf(\"├─ 상태: %s\\n\", getConditionText(book.condition));\r\n-            System.out.printf(\"├─ 출판일: %s\\n\", book.publicationDate);\r\n-            if(book.reviewRank != null) {\r\n-                System.out.printf(\"└─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n-            }\r\n-            System.out.println(SUB_BORDER);\r\n-        }\r\n-    }\r\n-\r\n-    private static String getConditionText(String condition) {\r\n-        return switch(condition) {\r\n-            case \"new\" -> \"신상품\";\r\n-            case \"상\" -> \"중고-상\";\r\n-            case \"중\" -> \"중고-중\"; \r\n-            case \"하\" -> \"중고-하\";\r\n-            default -> \"알 수 없음\";\r\n-        };\r\n-    }\r\n-\r\n-    private static void handleBookSelection(List<Book> books, Scanner scanner) {\r\n-        System.out.print(\"\\n▶ 상세보기 할 도서 번호 (0: 뒤로가기): \");\r\n-        int choice = getValidNumber(scanner, 0, books.size());\r\n-        if(choice != 0) showBookDetail(books.get(choice-1), scanner);\r\n-    }\r\n-\r\n-    private static void showBookDetail(Book book, Scanner scanner) {\r\n-        clearScreen();\r\n-        printHeader(\"[상세 정보] \" + book.title);\r\n-        System.out.printf(\"├─ ISBN: %s\\n\", book.id);\r\n-        System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n-        System.out.printf(\"├─ 정가: %,d원\\n\", book.basePrice);\r\n-        System.out.printf(\"├─ 판매가: %,d원\\n\", book.getPrice());\r\n-        System.out.printf(\"├─ 상태: %s\\n\", getConditionText(book.condition));\r\n-        System.out.printf(\"├─ 출판일: %s\\n\", book.publicationDate);\r\n-        if(book.reviewRank != null) {\r\n-            System.out.printf(\"├─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n-        }\r\n-        System.out.println(SUB_BORDER);\r\n-\r\n-\r\n-        printMenu(new ArrayList<>(Arrays.asList(\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"))); // new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"}\r\n-\r\n-        handlePurchaseChoice(book, scanner);\r\n-    }\r\n-\r\n-    private static void handlePurchaseChoice(Book book, Scanner scanner) {\r\n-        int choice = getValidNumber(scanner, 0, 2);\r\n-        switch(choice) {\r\n-            case 1 -> handleAddToCart(book, scanner);\r\n-            case 2 -> processPurchase(book, scanner);\r\n-        }\r\n-    }\r\n-\r\n-    private static void handleAddToCart(Book book, Scanner scanner) {\r\n-        System.out.print(\"\\n▶ 수량 입력: \");\r\n-        int quantity = getValidNumber(scanner, 1, 10);\r\n-        MockCartDB.addItem(book, quantity);\r\n-        System.out.printf(\"\\n✅ %s %d권 장바구니 추가 완료!\\n\", book.title, quantity);\r\n-        pause(scanner);\r\n-    }\r\n-\r\n-    private static void processPurchase(Book book, Scanner scanner) {\r\n-        System.out.print(\"\\n▶ 수량 입력: \");\r\n-        int quantity = getValidNumber(scanner, 1, 10);\r\n-        \r\n-        System.out.println(\"\\n================ 결제 정보 ================\");\r\n-        System.out.printf(\"도서명: %s\\n\", book.title);\r\n-        System.out.printf(\"수량: %d권\\n\", quantity);\r\n-        System.out.printf(\"결제금액: %,d원\\n\", book.getPrice() * quantity);\r\n-        System.out.println(\"-----------------------------------------\");\r\n-        System.out.println(\"1. 신용카드 결제 | 2. 계좌이체 | 0. 취소\");\r\n-        \r\n-        int paymentType = getValidNumber(scanner, 0, 2);\r\n-        if(paymentType != 0) {\r\n-            System.out.println(\"✅ 결제가 완료되었습니다!\");\r\n-            MockDB.removeBook(book.id);\r\n-            System.out.println(\"📊 \" + getRandomMessage());\r\n-        }\r\n-        pause(scanner);\r\n-    }\r\n-\r\n-    private static void cartFlow(Scanner scanner) {\r\n-        while(true) {\r\n-            clearScreen();\r\n-            printHeader(\"장바구니 관리\");\r\n-            List<CartItem> cart = MockCartDB.getCart();\r\n-            \r\n-            if(cart.isEmpty()) {\r\n-                System.out.println(\"\\n🛒 장바구니가 비어 있습니다\");\r\n-                pause(scanner);\r\n-                return;\r\n-            }\r\n-\r\n-            cart.forEach(item -> {\r\n-                System.out.printf(\"\\n📘 %s\\n\", item.book.title);\r\n-                System.out.printf(\"├─ 수량: %d개\\n\", item.quantity);\r\n-                System.out.printf(\"├─ 단가: %,d원\\n\", item.book.getPrice());\r\n-                System.out.printf(\"└─ 소계: %,d원\\n\", item.getTotalPrice());\r\n-                System.out.println(SUB_BORDER);\r\n-            });\r\n-\r\n-            printMenu(new ArrayList<>(Arrays.asList(\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"))); // new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"}\r\n-            handleCartAction(scanner);\r\n-        }\r\n-    }\r\n-\r\n-    private static void handleCartAction(Scanner scanner) {\r\n-        int choice = getValidNumber(scanner, 0, 2);\r\n-        switch(choice) {\r\n-            case 1 -> processBulkPurchase(scanner);\r\n-            case 2 -> {\r\n-                MockCartDB.clearCart();\r\n-                System.out.println(\"\\n✅ 장바구니를 비웠습니다\");\r\n-                pause(scanner);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private static void processBulkPurchase(Scanner scanner) {\r\n-        System.out.println(\"\\n================ 총 결제 정보 ================\");\r\n-        int total = MockCartDB.getCart().stream()\r\n-                .mapToInt(CartItem::getTotalPrice)\r\n-                .sum();\r\n-        System.out.printf(\"총 결제금액: %,d원\\n\", total);\r\n-        System.out.println(\"-----------------------------------------\");\r\n-        System.out.println(\"1. 신용카드 결제 | 2. 계좌이체 | 0. 취소\");\r\n-        \r\n-        int paymentType = getValidNumber(scanner, 0, 2);\r\n-        if(paymentType != 0) {\r\n-            System.out.println(\"✅ 전체 결제가 완료되었습니다!\");\r\n-            MockCartDB.clearCart();\r\n-        }\r\n-        pause(scanner);\r\n-    }\r\n-\r\n-    // 유틸리티 메서드\r\n-    private static void printHeader(String title) {\r\n-        System.out.println(BORDER);\r\n-        System.out.println(\"✦\\t\" + title + \"\\t✦\");\r\n-        System.out.println(BORDER);\r\n-    }\r\n-\r\n-    private static void printMenu(List<String> items) {\r\n-        System.out.println(SUB_BORDER);\r\n-        for(int i=0; i<items.size(); i++) {\r\n-            System.out.printf(\"%2d. %s\\n\", i+1, items.get(i));\r\n-        }\r\n-        System.out.println(SUB_BORDER);\r\n-    }\r\n-\r\n-    private static void clearScreen() { \r\n-        System.out.print(\"\\033[H\\033[2J\"); \r\n-        System.out.flush();\r\n-    }\r\n-\r\n-    private static void pause(Scanner scanner) {\r\n-        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n-        scanner.nextLine();\r\n-    }\r\n-\r\n-    private static int getValidNumber(Scanner scanner, int min, int max) {\r\n-        while(true) {\r\n-            try {\r\n-                int input = scanner.nextInt();\r\n-                if(input >= min && input <= max) return input;\r\n-                System.out.printf(\"⚠ %d~%d 사이 숫자 입력 필요\\n\", min, max);\r\n-            } catch (InputMismatchException e) {\r\n-                System.out.println(\"⚠ 숫자만 입력 가능합니다\");\r\n-                scanner.nextLine();\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private static String getRandomMessage() {\r\n-        return PURCHASE_MESSAGES[random.nextInt(PURCHASE_MESSAGES.length)];\r\n-    }\r\n-\r\n-    private static void errorHandler(Exception e) {\r\n-        System.out.println(\"\\n[시스템 오류] \" + e.getMessage());\r\n-    }\r\n-\r\n-    private static void exit(Scanner scanner) {\r\n-        System.out.println(\"\\n❤ 이용해주셔서 감사합니다!\");\r\n-        scanner.close();\r\n-        System.exit(0);\r\n-    }\r\n-}\r\n"
                }
            ],
            "date": 1743648002737,
            "name": "Commit-0",
            "content": "import java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ViewMainTest3 {\r\n    private static final Random random = new Random();\r\n    private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦\";\r\n    private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n\r\n    static class Book {\r\n        String id;\r\n        String title;\r\n        String author;\r\n        int basePrice;\r\n        String type;\r\n        String condition;\r\n        String publicationDate;\r\n        Integer reviewRank;\r\n\r\n        public Book(String id, String title, String author, int basePrice, \r\n                   String type, String condition, String publicationDate, Integer reviewRank) {\r\n            this.id = id;\r\n            this.title = title;\r\n            this.author = author;\r\n            this.basePrice = basePrice;\r\n            this.type = type;\r\n            this.condition = condition;\r\n            this.publicationDate = publicationDate;\r\n            this.reviewRank = reviewRank;\r\n        }\r\n\r\n        public int getPrice() {\r\n            return switch(condition) {\r\n                case \"상\" -> (int)(basePrice * 0.7);\r\n                case \"중\" -> (int)(basePrice * 0.5);\r\n                case \"하\" -> (int)(basePrice * 0.3);\r\n                default -> basePrice;\r\n            };\r\n        }\r\n    }\r\n\r\n    static class MockDB {\r\n        private static final List<Book> masterBooks = Arrays.asList(\r\n            new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\", \"2025-01-15\", 1),\r\n            new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\", \"2024-12-01\", 2),\r\n            new Book(\"B003\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"new\", \"2025-03-20\", null),\r\n            new Book(\"B004\", \"React for Beginners\", \"Dan Abramov\", 35000, \"전체\", \"하\", \"2023-05-11\", null),\r\n            new Book(\"B005\", \"Python AI\", \"장영실\", 28000, \"전체\", \"new\", \"2025-02-28\", null)\r\n        );\r\n\r\n        private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n\r\n        static List<Book> getBooks(String searchType) {\r\n            return availableBooks.stream()\r\n                .filter(book -> searchType.equals(\"전체\") || book.type.equals(searchType))\r\n                .collect(Collectors.toList());\r\n        }\r\n\r\n        static void removeBook(String bookId) {\r\n            availableBooks.removeIf(book -> book.id.equals(bookId));\r\n        }\r\n    }\r\n\r\n    static class CartItem {\r\n        Book book;\r\n        int quantity;\r\n\r\n        public CartItem(Book book, int quantity) {\r\n            this.book = book;\r\n            this.quantity = quantity;\r\n        }\r\n\r\n        public int getTotalPrice() {\r\n            return book.getPrice() * quantity;\r\n        }\r\n    }\r\n\r\n    static class MockCartDB {\r\n        private static List<CartItem> cart = new ArrayList<>();\r\n\r\n        static void addItem(Book book, int quantity) {\r\n            cart.add(new CartItem(book, quantity));\r\n        }\r\n\r\n        static List<CartItem> getCart() {\r\n            return new ArrayList<>(cart);\r\n        }\r\n\r\n        static void clearCart() {\r\n            cart.clear();\r\n        }\r\n    }\r\n\r\n    private static final String[] PURCHASE_MESSAGES = {\r\n        \"지금까지 읽으신 책의 총 페이지를 쌓으면 에베레스트 높이의 3배에 달합니다.\",\r\n        \"당신이 읽은 책들을 쌓으면 남산타워 15개를 세운 높이입니다.\"\r\n    };\r\n\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        clearScreen();\r\n        \r\n        printHeader(\"온라인 서점 시스템\");\r\n        printSection(\"로그인\");\r\n        System.out.print(\"├─ 성명: \");\r\n        scanner.nextLine();\r\n        System.out.print(\"├─ 비밀번호: \");\r\n        scanner.nextLine();\r\n        \r\n        home(scanner);\r\n    }\r\n\r\n    private static void home(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"메인 메뉴\");\r\n            printMenu(new String[]{\r\n                \"1. 도서 검색\", \r\n                \"2. 장바구니\",\r\n                \"99. 종료\"\r\n            });\r\n            \r\n            try {\r\n                System.out.print(\"\\n▶ 메뉴 선택: \");\r\n                int choice = getValidNumber(scanner, 1, 99);\r\n                switch(choice) {\r\n                    case 1: searchFlow(scanner); break;\r\n                    case 2: cartFlow(scanner); break;\r\n                    case 99: exit(scanner); break;\r\n                }\r\n            } catch (Exception e) {\r\n                errorHandler(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void searchFlow(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"도서 검색\");\r\n            printMenu(new String[]{\r\n                \"1. 베스트셀러\", \r\n                \"2. 신간 도서\", \r\n                \"3. 전체 검색\",\r\n                \"0. 홈으로\"\r\n            });\r\n\r\n            int choice = getValidNumber(scanner, 0, 3);\r\n            if(choice == 0) return;\r\n            \r\n            String searchType = switch(choice) {\r\n                case 1 -> \"베스트셀러\";\r\n                case 2 -> \"신간\";\r\n                case 3 -> \"전체\";\r\n                default -> \"\";\r\n            };\r\n\r\n            System.out.print(\"\\n🔍 검색어 입력: \");\r\n            String keyword = scanner.next();\r\n            \r\n            List<Book> results = MockDB.getBooks(searchType).stream()\r\n                .filter(book -> book.title.contains(keyword))\r\n                .collect(Collectors.toList());\r\n                \r\n            handleSearchResults(results, searchType, keyword, scanner);\r\n        }\r\n    }\r\n\r\n    private static void handleSearchResults(List<Book> books, String type, String keyword, Scanner scanner) {\r\n        clearScreen();\r\n        printHeader(\"'\" + keyword + \"' 검색 결과 (\" + type + \")\");\r\n\r\n        if(books.isEmpty()) {\r\n            System.out.println(\"\\n⚠ 검색 결과가 없습니다\");\r\n            pause(scanner);\r\n            return;\r\n        }\r\n\r\n        System.out.println(\"\\n[정렬 옵션]\");\r\n        List<String> sortOptions = new ArrayList<>(Arrays.asList(\r\n            \"1. 가격 낮은 순\", \r\n            \"2. 가격 높은 순\", \r\n            \"3. 출판일 최신순\"\r\n        ));\r\n        \r\n        if(type.equals(\"베스트셀러\")) {\r\n            sortOptions.add(\"4. 리뷰 순위 순\");\r\n        }\r\n        sortOptions.add(\"0. 기본 정렬(가나다순)\");\r\n        printMenu(sortOptions);\r\n\r\n        int sortChoice = getValidNumber(scanner, 0, sortOptions.size());\r\n        sortBooks(books, sortChoice, type);\r\n\r\n        displayBooks(books);\r\n        handleBookSelection(books, scanner);\r\n    }\r\n\r\n    private static void sortBooks(List<Book> books, int sortChoice, String type) {\r\n        switch(sortChoice) {\r\n            case 1 -> books.sort(Comparator.comparingInt(Book::getPrice));\r\n            case 2 -> books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n            case 3 -> books.sort((b1, b2) -> b2.publicationDate.compareTo(b1.publicationDate));\r\n            case 4 -> {\r\n                if(type.equals(\"베스트셀러\")) {\r\n                    books.sort(Comparator.comparingInt(b -> b.reviewRank));\r\n                }\r\n            }\r\n            default -> books.sort(Comparator.comparing(b -> b.title));\r\n        }\r\n    }\r\n\r\n    private static void displayBooks(List<Book> books) {\r\n        int index = 1;\r\n        for(Book book : books) {\r\n            System.out.printf(\"\\n%d. %s\\n\", index++, book.title);\r\n            System.out.printf(\"├─ ID: %s\\n\", book.id);\r\n            System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n            System.out.printf(\"├─ 가격: %,d원\\n\", book.getPrice());\r\n            System.out.printf(\"├─ 상태: %s\\n\", getConditionText(book.condition));\r\n            System.out.printf(\"├─ 출판일: %s\\n\", book.publicationDate);\r\n            if(book.reviewRank != null) {\r\n                System.out.printf(\"└─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n            }\r\n            System.out.println(SUB_BORDER);\r\n        }\r\n    }\r\n\r\n    private static String getConditionText(String condition) {\r\n        return switch(condition) {\r\n            case \"new\" -> \"신상품\";\r\n            case \"상\" -> \"중고-상\";\r\n            case \"중\" -> \"중고-중\"; \r\n            case \"하\" -> \"중고-하\";\r\n            default -> \"알 수 없음\";\r\n        };\r\n    }\r\n\r\n    private static void handleBookSelection(List<Book> books, Scanner scanner) {\r\n        System.out.print(\"\\n▶ 상세보기 할 도서 번호 (0: 뒤로가기): \");\r\n        int choice = getValidNumber(scanner, 0, books.size());\r\n        if(choice != 0) showBookDetail(books.get(choice-1), scanner);\r\n    }\r\n\r\n    private static void showBookDetail(Book book, Scanner scanner) {\r\n        clearScreen();\r\n        printHeader(\"[상세 정보] \" + book.title);\r\n        System.out.printf(\"├─ ISBN: %s\\n\", book.id);\r\n        System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n        System.out.printf(\"├─ 정가: %,d원\\n\", book.basePrice);\r\n        System.out.printf(\"├─ 판매가: %,d원\\n\", book.getPrice());\r\n        System.out.printf(\"├─ 상태: %s\\n\", getConditionText(book.condition));\r\n        System.out.printf(\"├─ 출판일: %s\\n\", book.publicationDate);\r\n        if(book.reviewRank != null) {\r\n            System.out.printf(\"├─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n        }\r\n        System.out.println(SUB_BORDER);\r\n\r\n        printMenu(new String[]{\"1. 장바구니 추가\", \"2. 바로구매\", \"0. 돌아가기\"});\r\n        handlePurchaseChoice(book, scanner);\r\n    }\r\n\r\n    private static void handlePurchaseChoice(Book book, Scanner scanner) {\r\n        int choice = getValidNumber(scanner, 0, 2);\r\n        switch(choice) {\r\n            case 1 -> handleAddToCart(book, scanner);\r\n            case 2 -> processPurchase(book, scanner);\r\n        }\r\n    }\r\n\r\n    private static void handleAddToCart(Book book, Scanner scanner) {\r\n        System.out.print(\"\\n▶ 수량 입력: \");\r\n        int quantity = getValidNumber(scanner, 1, 10);\r\n        MockCartDB.addItem(book, quantity);\r\n        System.out.printf(\"\\n✅ %s %d권 장바구니 추가 완료!\\n\", book.title, quantity);\r\n        pause(scanner);\r\n    }\r\n\r\n    private static void processPurchase(Book book, Scanner scanner) {\r\n        System.out.print(\"\\n▶ 수량 입력: \");\r\n        int quantity = getValidNumber(scanner, 1, 10);\r\n        \r\n        System.out.println(\"\\n================ 결제 정보 ================\");\r\n        System.out.printf(\"도서명: %s\\n\", book.title);\r\n        System.out.printf(\"수량: %d권\\n\", quantity);\r\n        System.out.printf(\"결제금액: %,d원\\n\", book.getPrice() * quantity);\r\n        System.out.println(\"-----------------------------------------\");\r\n        System.out.println(\"1. 신용카드 결제 | 2. 계좌이체 | 0. 취소\");\r\n        \r\n        int paymentType = getValidNumber(scanner, 0, 2);\r\n        if(paymentType != 0) {\r\n            System.out.println(\"✅ 결제가 완료되었습니다!\");\r\n            MockDB.removeBook(book.id);\r\n            System.out.println(\"📊 \" + getRandomMessage());\r\n        }\r\n        pause(scanner);\r\n    }\r\n\r\n    private static void cartFlow(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"장바구니 관리\");\r\n            List<CartItem> cart = MockCartDB.getCart();\r\n            \r\n            if(cart.isEmpty()) {\r\n                System.out.println(\"\\n🛒 장바구니가 비어 있습니다\");\r\n                pause(scanner);\r\n                return;\r\n            }\r\n\r\n            cart.forEach(item -> {\r\n                System.out.printf(\"\\n📘 %s\\n\", item.book.title);\r\n                System.out.printf(\"├─ 수량: %d개\\n\", item.quantity);\r\n                System.out.printf(\"├─ 단가: %,d원\\n\", item.book.getPrice());\r\n                System.out.printf(\"└─ 소계: %,d원\\n\", item.getTotalPrice());\r\n                System.out.println(SUB_BORDER);\r\n            });\r\n\r\n            printMenu(new String[]{\"1. 전체 구매\", \"2. 장바구니 비우기\", \"0. 뒤로가기\"});\r\n            handleCartAction(scanner);\r\n        }\r\n    }\r\n\r\n    private static void handleCartAction(Scanner scanner) {\r\n        int choice = getValidNumber(scanner, 0, 2);\r\n        switch(choice) {\r\n            case 1 -> processBulkPurchase(scanner);\r\n            case 2 -> {\r\n                MockCartDB.clearCart();\r\n                System.out.println(\"\\n✅ 장바구니를 비웠습니다\");\r\n                pause(scanner);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void processBulkPurchase(Scanner scanner) {\r\n        System.out.println(\"\\n================ 총 결제 정보 ================\");\r\n        int total = MockCartDB.getCart().stream()\r\n                .mapToInt(CartItem::getTotalPrice)\r\n                .sum();\r\n        System.out.printf(\"총 결제금액: %,d원\\n\", total);\r\n        System.out.println(\"-----------------------------------------\");\r\n        System.out.println(\"1. 신용카드 결제 | 2. 계좌이체 | 0. 취소\");\r\n        \r\n        int paymentType = getValidNumber(scanner, 0, 2);\r\n        if(paymentType != 0) {\r\n            System.out.println(\"✅ 전체 결제가 완료되었습니다!\");\r\n            MockCartDB.clearCart();\r\n        }\r\n        pause(scanner);\r\n    }\r\n\r\n    // 유틸리티 메서드\r\n    private static void printHeader(String title) {\r\n        System.out.println(BORDER);\r\n        System.out.println(\"✦\\t\" + title + \"\\t✦\");\r\n        System.out.println(BORDER);\r\n    }\r\n\r\n    private static void printMenu(String[] items) {\r\n        System.out.println(SUB_BORDER);\r\n        for(int i=0; i<items.length; i++) {\r\n            System.out.printf(\"%2d. %s\\n\", i+1, items[i]);\r\n        }\r\n        System.out.println(SUB_BORDER);\r\n    }\r\n\r\n    private static void clearScreen() { \r\n        System.out.print(\"\\033[H\\033[2J\"); \r\n        System.out.flush();\r\n    }\r\n\r\n    private static void pause(Scanner scanner) {\r\n        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n        scanner.nextLine();\r\n    }\r\n\r\n    private static int getValidNumber(Scanner scanner, int min, int max) {\r\n        while(true) {\r\n            try {\r\n                int input = scanner.nextInt();\r\n                if(input >= min && input <= max) return input;\r\n                System.out.printf(\"⚠ %d~%d 사이 숫자 입력 필요\\n\", min, max);\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"⚠ 숫자만 입력 가능합니다\");\r\n                scanner.nextLine();\r\n            }\r\n        }\r\n    }\r\n\r\n    private static String getRandomMessage() {\r\n        return PURCHASE_MESSAGES[random.nextInt(PURCHASE_MESSAGES.length)];\r\n    }\r\n\r\n    private static void errorHandler(Exception e) {\r\n        System.out.println(\"\\n[시스템 오류] \" + e.getMessage());\r\n    }\r\n\r\n    private static void exit(Scanner scanner) {\r\n        System.out.println(\"\\n❤ 이용해주셔서 감사합니다!\");\r\n        scanner.close();\r\n        System.exit(0);\r\n    }\r\n}\r\n"
        }
    ]
}