{
    "sourceFile": "src/ViewMainTest2.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1743647848435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743647915127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,447 +0,0 @@\n-import java.util.*;\r\n-import java.util.stream.Collectors;\r\n-\r\n-public class ViewMainTest2 {\r\n-    private static final Random random = new Random();\r\n-    private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦\";\r\n-    private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n-\r\n-    // 도서 정보 클래스\r\n-    static class Book {\r\n-        String id;\r\n-        String title;\r\n-        String author;\r\n-        int basePrice;\r\n-        String type;\r\n-        String condition;\r\n-        String publicationDate;  // 추가된 필드\r\n-        Integer reviewRank;      // 베스트셀러 전용 필드\r\n-\r\n-        public Book(String id, String title, String author, int basePrice, \r\n-                   String type, String condition, String publicationDate, Integer reviewRank) {\r\n-            this.id = id;\r\n-            this.title = title;\r\n-            this.author = author;\r\n-            this.basePrice = basePrice;\r\n-            this.type = type;\r\n-            this.condition = condition;\r\n-            this.publicationDate = publicationDate;\r\n-            this.reviewRank = reviewRank;\r\n-        }\r\n-\r\n-        public int getPrice() {\r\n-            return switch(condition) {\r\n-                case \"상\" -> (int)(basePrice * 0.7);\r\n-                case \"중\" -> (int)(basePrice * 0.5);\r\n-                case \"하\" -> (int)(basePrice * 0.3);\r\n-                default -> basePrice;\r\n-            };\r\n-        }\r\n-    }\r\n-\r\n-    // 개선된 Mock 데이터베이스\r\n-    static class MockDB {\r\n-        private static final List<Book> masterBooks = Arrays.asList(\r\n-            // 베스트셀러 (리뷰 순위 포함)\r\n-            new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\", \"2025-01-15\", 1),\r\n-            new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\", \"2024-12-01\", 2),\r\n-            new Book(\"B002-1\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"중\", \"2024-12-01\", 2),\r\n-            \r\n-            // 신간 도서\r\n-            new Book(\"B003\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"new\", \"2025-03-20\", null),\r\n-            new Book(\"B003-1\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"상\", \"2025-03-20\", null),\r\n-            \r\n-            // 중고 도서\r\n-            new Book(\"B004\", \"React for Beginners\", \"Dan Abramov\", 35000, \"전체\", \"하\", \"2023-05-11\", null),\r\n-            new Book(\"B005\", \"Python AI\", \"장영실\", 28000, \"전체\", \"new\", \"2025-02-28\", null),\r\n-            new Book(\"B006\", \"Clean Code\", \"Robert C. Martin\", 40000, \"전체\", \"상\", \"2024-10-01\", null),\r\n-            new Book(\"B007\", \"디자인 패턴의 정석\", \"GoF\", 50000, \"베스트셀러\", \"중\", \"2023-07-22\", 3)\r\n-        );\r\n-\r\n-        private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n-\r\n-        static List<Book> getBooks(String searchType) {\r\n-            return availableBooks.stream()\r\n-                .filter(book -> searchType.equals(\"전체\") || book.type.equals(searchType))\r\n-                .collect(Collectors.toList());\r\n-        }\r\n-\r\n-        static void removeBook(String bookId) {\r\n-            availableBooks.removeIf(book -> book.id.equals(bookId));\r\n-        }\r\n-    }\r\n-\r\n-    // 장바구니 아이템 클래스\r\n-    static class CartItem {\r\n-        Book book;\r\n-        int quantity;\r\n-\r\n-        public CartItem(Book book, int quantity) {\r\n-            this.book = book;\r\n-            this.quantity = quantity;\r\n-        }\r\n-\r\n-        public int getTotalPrice() {\r\n-            return book.getPrice() * quantity;\r\n-        }\r\n-    }\r\n-\r\n-    // 장바구니 DB\r\n-    static class MockCartDB {\r\n-        private static List<CartItem> cart = new ArrayList<>();\r\n-\r\n-        static void addItem(Book book, int quantity) {\r\n-            cart.add(new CartItem(book, quantity));\r\n-        }\r\n-\r\n-        static List<CartItem> getCart() {\r\n-            return new ArrayList<>(cart);\r\n-        }\r\n-\r\n-        static void clearCart() {\r\n-            cart.clear();\r\n-        }\r\n-    }\r\n-\r\n-    // 독서 통계 메시지\r\n-    private static final String[] PURCHASE_MESSAGES = { /* 이전과 동일 */ };\r\n-\r\n-    // 시스템 메인 흐름\r\n-    public static void main(String[] args) {\r\n-        Scanner scanner = new Scanner(System.in);\r\n-        clearScreen();\r\n-        \r\n-        printHeader(\"온라인 서점 시스템\");\r\n-        printSection(\"로그인\");\r\n-        System.out.print(\"├─ 성명: \");\r\n-        scanner.nextLine();\r\n-        System.out.print(\"├─ 비밀번호: \");\r\n-        scanner.nextLine();\r\n-        \r\n-        home(scanner);\r\n-    }\r\n-\r\n-    private static void home(Scanner scanner) {\r\n-        while(true) {\r\n-            clearScreen();\r\n-            printHeader(\"메인 메뉴\");\r\n-            printMenu(new String[]{\r\n-                \"1. 도서 검색\", \r\n-                \"2. 회원 정보\", \r\n-                \"3. 주문 이력\", \r\n-                \"4. 장바구니\",\r\n-                \"99. 종료\"\r\n-            });\r\n-            \r\n-            try {\r\n-                System.out.print(\"\\n▶ 메뉴 선택: \");\r\n-                switch(scanner.nextInt()) {\r\n-                    case 1: searchFlow(scanner); break;\r\n-                    case 2: userFlow(scanner); break;\r\n-                    case 3: orderFlow(scanner); break;\r\n-                    case 4: cartFlow(scanner); break;\r\n-                    case 99: exit(scanner); break;\r\n-                    default: errorMsg(\"잘못된 입력\");\r\n-                }\r\n-            } catch (Exception e) {\r\n-                errorHandler(scanner, e);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    // 도서 검색 및 정렬 시스템\r\n-    private static void searchFlow(Scanner scanner) {\r\n-        while(true) {\r\n-            clearScreen();\r\n-            printHeader(\"도서 검색 시스템\");\r\n-            printMenu(new String[]{\r\n-                \"1. 베스트셀러 검색\",\r\n-                \"2. 신간 도서 검색\", \r\n-                \"3. 전체 검색\",\r\n-                \"0. 홈으로 돌아가기\",\r\n-                \"99. 시스템 종료\"\r\n-            });\r\n-\r\n-            int choice = getValidNumber(scanner, 0, 99);\r\n-            if(choice == 0) return;\r\n-            if(choice == 99) exit(scanner);\r\n-            \r\n-            String searchType = switch(choice) {\r\n-                case 1 -> \"베스트셀러\";\r\n-                case 2 -> \"신간\";\r\n-                case 3 -> \"전체\";\r\n-                default -> \"\";\r\n-            };\r\n-\r\n-            System.out.print(\"\\n🔍 검색어 입력: \");\r\n-            String keyword = scanner.next();\r\n-            \r\n-            List<Book> results = MockDB.getBooks(searchType).stream()\r\n-                .filter(book -> book.title.contains(keyword))\r\n-                .collect(Collectors.toList());\r\n-                \r\n-            handleSearchResults(results, searchType, keyword, scanner);\r\n-        }\r\n-    }\r\n-\r\n-    private static void handleSearchResults(List<Book> books, String type, String keyword, Scanner scanner) {\r\n-        clearScreen();\r\n-        printHeader(\"'\" + keyword + \"' 검색 결과 (\" + type + \")\");\r\n-\r\n-        if(books.isEmpty()) {\r\n-            System.out.println(\"\\n⚠ 검색 결과가 없습니다\");\r\n-            pause(scanner);\r\n-            return;\r\n-        }\r\n-\r\n-        // 정렬 옵션 표시\r\n-        System.out.println(\"\\n[정렬 옵션]\");\r\n-        List<String> sortOptions = new ArrayList<>(Arrays.asList(\r\n-            \"1. 가격 낮은 순\", \r\n-            \"2. 가격 높은 순\", \r\n-            \"3. 출판일 최신순\"\r\n-        ));\r\n-        \r\n-        if(type.equals(\"베스트셀러\")) {\r\n-            sortOptions.add(\"4. 리뷰 순위 순\");\r\n-        }\r\n-        sortOptions.add(\"0. 기본 정렬(가나다순)\");\r\n-        printMenu(sortOptions);\r\n-\r\n-        int sortChoice = getValidNumber(scanner, 0, sortOptions.size());\r\n-        sortBooks(books, sortChoice, type);\r\n-\r\n-        displayBooks(books);\r\n-        handleBookSelection(books, scanner);\r\n-    }\r\n-\r\n-    private static void sortBooks(List<Book> books, int sortChoice, String type) {\r\n-        switch(sortChoice) {\r\n-            case 1:\r\n-                books.sort(Comparator.comparingInt(Book::getPrice));\r\n-                break;\r\n-            case 2:\r\n-                books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n-                break;\r\n-            case 3:\r\n-                books.sort((b1, b2) -> b2.publicationDate.compareTo(b1.publicationDate));\r\n-                break;\r\n-            case 4:\r\n-                if(type.equals(\"베스트셀러\")) {\r\n-                    books.sort(Comparator.comparingInt(b -> b.reviewRank));\r\n-                }\r\n-                break;\r\n-            default:\r\n-                books.sort(Comparator.comparing(b -> b.title));\r\n-        }\r\n-    }\r\n-\r\n-    private static void displayBooks(List<Book> books) {\r\n-        int index = 1;\r\n-        for(Book book : books) {\r\n-            System.out.printf(\"\\n%d. %s\\n\", index++, book.title);\r\n-            System.out.printf(\"├─ ID: %s\\n\", book.id);\r\n-            System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n-            System.out.printf(\"├─ 가격: %,d원\\n\", book.getPrice());\r\n-            System.out.printf(\"├─ 상태: %s\\n\", getConditionText(book.condition));\r\n-            System.out.printf(\"├─ 출판일: %s\\n\", book.publicationDate);\r\n-            if(book.reviewRank != null) {\r\n-                System.out.printf(\"└─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n-            }\r\n-            System.out.println(SUB_BORDER);\r\n-        }\r\n-    }\r\n-\r\n-    private static String getConditionText(String condition) {\r\n-        return switch(condition) {\r\n-            case \"new\" -> \"신상품\";\r\n-            case \"상\" -> \"중고-상\";\r\n-            case \"중\" -> \"중고-중\";\r\n-            case \"하\" -> \"중고-하\";\r\n-            default -> \"알 수 없음\";\r\n-        };\r\n-    }\r\n-\r\n-    private static void handleBookSelection(List<Book> books, Scanner scanner) {\r\n-        System.out.print(\"\\n▶ 상세보기 할 도서 번호 (0: 뒤로가기): \");\r\n-        int choice = getValidNumber(scanner, 0, books.size());\r\n-        \r\n-        if(choice != 0) {\r\n-            Book selected = books.get(choice-1);\r\n-            showBookDetail(selected, scanner);\r\n-        }\r\n-    }\r\n-\r\n-    private static void showBookDetail(Book book, Scanner scanner) {\r\n-        clearScreen();\r\n-        printHeader(\"[상세 정보] \" + book.title);\r\n-        System.out.printf(\"├─ ISBN: %s\\n\", book.id);\r\n-        System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n-        System.out.printf(\"├─ 정가: %,d원\\n\", book.basePrice);\r\n-        System.out.printf(\"├─ 판매가: %,d원\\n\", book.getPrice());\r\n-        System.out.printf(\"├─ 상태: %s\\n\", getConditionText(book.condition));\r\n-        System.out.printf(\"├─ 출판일: %s\\n\", book.publicationDate);\r\n-        if(book.reviewRank != null) {\r\n-            System.out.printf(\"├─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n-        }\r\n-        System.out.println(SUB_BORDER);\r\n-\r\n-        printMenu(new String[]{\r\n-            \"1. 장바구니 추가\", \r\n-            \"2. 바로구매\", \r\n-            \"0. 돌아가기\"\r\n-        });\r\n-        \r\n-        handlePurchaseChoice(book, scanner);\r\n-    }\r\n-\r\n-    private static void handlePurchaseChoice(Book book, Scanner scanner) {\r\n-        int choice = getValidNumber(scanner, 0, 2);\r\n-        switch(choice) {\r\n-            case 1:\r\n-                handleAddToCart(book, scanner);\r\n-                break;\r\n-            case 2:\r\n-                processPurchase(book, scanner);\r\n-                break;\r\n-        }\r\n-    }\r\n-\r\n-    private static void handleAddToCart(Book book, Scanner scanner) {\r\n-        System.out.print(\"\\n▶ 수량 입력: \");\r\n-        int quantity = getValidNumber(scanner, 1, 10);\r\n-        MockCartDB.addItem(book, quantity);\r\n-        System.out.printf(\"\\n✅ %s %d권 장바구니 추가 완료!\\n\", book.title, quantity);\r\n-        pause(scanner);\r\n-    }\r\n-\r\n-    private static void processPurchase(Book book, Scanner scanner) {\r\n-        System.out.print(\"\\n▶ 수량 입력: \");\r\n-        int quantity = getValidNumber(scanner, 1, 10);\r\n-        \r\n-        System.out.println(\"\\n================ 결제 정보 ================\");\r\n-        System.out.printf(\"도서명: %s\\n\", book.title);\r\n-        System.out.printf(\"수량: %d권\\n\", quantity);\r\n-        System.out.printf(\"결제금액: %,d원\\n\", book.getPrice() * quantity);\r\n-        System.out.println(\"-----------------------------------------\");\r\n-        System.out.println(\"1. 신용카드 결제 | 2. 계좌이체 | 0. 취소\");\r\n-        \r\n-        int paymentType = getValidNumber(scanner, 0, 2);\r\n-        if(paymentType != 0) {\r\n-            System.out.println(\"✅ 결제가 완료되었습니다!\");\r\n-            MockDB.removeBook(book.id);\r\n-            System.out.println(\"📊 \" + getRandomMessage(PURCHASE_MESSAGES));\r\n-        }\r\n-        pause(scanner);\r\n-    }\r\n-\r\n-    // 장바구니 관리 시스템\r\n-    private static void cartFlow(Scanner scanner) {\r\n-        while(true) {\r\n-            clearScreen();\r\n-            printHeader(\"장바구니 관리\");\r\n-            List<CartItem> cart = MockCartDB.getCart();\r\n-            \r\n-            if(cart.isEmpty()) {\r\n-                System.out.println(\"\\n🛒 장바구니가 비어 있습니다\");\r\n-                pause(scanner);\r\n-                return;\r\n-            }\r\n-\r\n-            cart.forEach(item -> {\r\n-                System.out.printf(\"\\n📘 %s\\n\", item.book.title);\r\n-                System.out.printf(\"├─ 수량: %d개\\n\", item.quantity);\r\n-                System.out.printf(\"├─ 단가: %,d원\\n\", item.book.getPrice());\r\n-                System.out.printf(\"└─ 소계: %,d원\\n\", item.getTotalPrice());\r\n-                System.out.println(SUB_BORDER);\r\n-            });\r\n-\r\n-            printMenu(new String[]{\r\n-                \"1. 전체 구매\", \r\n-                \"2. 수량 변경\", \r\n-                \"3. 장바구니 비우기\",\r\n-                \"0. 뒤로가기\"\r\n-            });\r\n-            \r\n-            handleCartAction(scanner);\r\n-        }\r\n-    }\r\n-\r\n-    private static void handleCartAction(Scanner scanner) {\r\n-        int choice = getValidNumber(scanner, 0, 3);\r\n-        switch(choice) {\r\n-            case 1:\r\n-                processBulkPurchase(scanner);\r\n-                break;\r\n-            case 2:\r\n-                modifyQuantity(scanner);\r\n-                break;\r\n-            case 3:\r\n-                MockCartDB.clearCart();\r\n-                System.out.println(\"\\n✅ 장바구니를 비웠습니다\");\r\n-                pause(scanner);\r\n-                break;\r\n-            case 0:\r\n-                return;\r\n-        }\r\n-    }\r\n-\r\n-    // 유틸리티 메서드들 (앞선 코드와 동일)\r\n-    // ...// 헤더 출력\r\n-    private static void printHeader(String title) {\r\n-        System.out.println(\"====================\" + \"=\".repeat(title.length()*2));\r\n-        System.out.println(\"= \" + title + \" =\");\r\n-        System.out.println(\"====================\" + \"=\".repeat(title.length()*2));\r\n-    }\r\n-\r\n-    // 메뉴 출력\r\n-    private static void printMenu(String[] items) {\r\n-        System.out.println(\"\\n---------------------\");\r\n-        for (int i = 0; i < items.length; i++) {\r\n-            System.out.printf(\"%2d. %s\\n\", i+1, items[i]);\r\n-        }\r\n-        System.out.println(\"---------------------\");\r\n-    }\r\n-\r\n-    // 화면 클리어\r\n-    private static void clearScreen() {\r\n-        for (int i = 0; i < 50; i++) {\r\n-            System.out.println();\r\n-        }\r\n-    }\r\n-\r\n-    // 일시 정지\r\n-    private static void pause(Scanner scanner) {\r\n-        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n-        scanner.nextLine();\r\n-    }\r\n-\r\n-    // 에러 메시지 출력\r\n-    private static void errorMsg(String message) {\r\n-        System.out.println(\"\\n[!] \" + message);\r\n-    }\r\n-\r\n-    // 시스템 종료\r\n-    private static void exit(Scanner scanner) {\r\n-        System.out.println(\"\\n시스템을 종료합니다.\");\r\n-        scanner.close();\r\n-        System.exit(0);\r\n-    }\r\n-\r\n-    // 검색 타입 변환\r\n-    private static String getSearchType(int typeCode) {\r\n-        return switch (typeCode) {\r\n-            case 1 -> \"베스트셀러\";\r\n-            case 2 -> \"신간\";\r\n-            case 3 -> \"전체\";\r\n-            default -> \"\";\r\n-        };\r\n-}\r\n-\r\n-// 예외 처리 핸들러\r\n-private static void errorHandler(Exception e) {\r\n-    System.out.println(\"\\n[시스템 오류] \" + e.getMessage());\r\n-    System.out.println(\"잠시 후 다시 시도해주세요.\");\r\n-}\r\n-\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1743647927293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,235 @@\n+import java.util.Scanner;\r\n+import java.util.Random;\r\n+\r\n+public class ViewMainTest2 {\r\n+    private static final Random random = new Random();\r\n+    private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧\";\r\n+    private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n+\r\n+    // 데이터베이스 연결을 위한 템플릿 (추후 구현)\r\n+    static class Book {\r\n+        String title;\r\n+        String author;\r\n+        int price;\r\n+        String type;\r\n+        \r\n+        public Book(String title, String author, int price, String type) {\r\n+            this.title = title;\r\n+            this.author = author;\r\n+            this.price = price;\r\n+            this.type = type;\r\n+        }\r\n+    }\r\n+\r\n+    static class MockDB {\r\n+        static Book[] getBooks(String searchType) {\r\n+            // 실제 DB 연결시 이 부분 구현\r\n+            return new Book[]{\r\n+                new Book(\"Java Master\", \"홍길동\", 25000, \"베스트셀러\"),\r\n+                new Book(\"Spring Boot Guide\", \"이순신\", 30000, \"신간\"),\r\n+                new Book(\"Python AI\", \"장영실\", 28000, \"전체\")\r\n+            };\r\n+        }\r\n+    }\r\n+\r\n+    // 독서 통계 메시지\r\n+    private static final String[] STATS_MSG = {\r\n+        \"📊 지금까지 읽은 페이지: 에베레스트 %.1f배\",\r\n+        \"⏳ 독서 시간: 서울→부산 KTX %d회 왕복\",\r\n+        \"🌳 전자책으로 나무 %d그루 구출\"\r\n+    };\r\n+\r\n+    public static void main(String[] args) {\r\n+        Scanner scanner = new Scanner(System.in);\r\n+        clearScreen();\r\n+        \r\n+        printHeader(\"온라인 서점 시스템\");\r\n+        printSection(\"로그인\");\r\n+        System.out.print(\"├─ 성명: \");\r\n+        scanner.nextLine();\r\n+        System.out.print(\"├─ 비밀번호: \");\r\n+        scanner.nextLine();\r\n+        \r\n+        home(scanner);\r\n+    }\r\n+\r\n+    private static void home(Scanner scanner) {\r\n+        while(true) {\r\n+            clearScreen();\r\n+            printHeader(\"메인 메뉴\");\r\n+            printMenu(new String[]{\r\n+                \"1. 도서 검색\", \r\n+                \"2. 회원 정보\", \r\n+                \"3. 주문 이력\", \r\n+                \"4. 장바구니\",\r\n+                \"99. 종료\"\r\n+            });\r\n+            \r\n+            try {\r\n+                System.out.print(\"\\n▶ 메뉴 선택: \");\r\n+                switch(scanner.nextInt()) {\r\n+                    case 1: searchFlow(scanner); break;\r\n+                    case 2: userFlow(scanner); break;\r\n+                    case 3: orderFlow(scanner); break;\r\n+                    case 4: cartFlow(scanner); break;\r\n+                    case 99: exit(scanner); break;\r\n+                    default: errorMsg(\"잘못된 입력\");\r\n+                }\r\n+            } catch (Exception e) {\r\n+                errorHandler(scanner, e);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static void searchFlow(Scanner scanner) {\r\n+        while(true) {\r\n+            clearScreen();\r\n+            printHeader(\"도서 검색\");\r\n+            printMenu(new String[]{\r\n+                \"1. 베스트셀러\", \r\n+                \"2. 신간 도서\", \r\n+                \"3. 전체 검색\",\r\n+                \"0. 홈으로\",\r\n+                \"99. 종료\"\r\n+            });\r\n+\r\n+            System.out.print(\"\\n▶ 검색 유형: \");\r\n+            int type = scanner.nextInt();\r\n+            scanner.nextLine();\r\n+            \r\n+            if(type == 0) return;\r\n+            if(type == 99) exit(scanner);\r\n+            \r\n+            System.out.print(\"\\n🔍 검색어 입력: \");\r\n+            String keyword = scanner.nextLine();\r\n+            \r\n+            // 데이터베이스에서 실제 검색\r\n+            Book[] results = MockDB.getBooks(getSearchType(type));\r\n+            displayResults(results, keyword, scanner);\r\n+        }\r\n+    }\r\n+\r\n+    private static void displayResults(Book[] books, String keyword, Scanner scanner) {\r\n+        clearScreen();\r\n+        printHeader(\"검색 결과\");\r\n+        System.out.printf(\"├─ 검색어: %s\\n\", keyword);\r\n+        System.out.println(SUB_BORDER);\r\n+        \r\n+        for(int i=0; i<books.length; i++) {\r\n+            System.out.printf(\"%d. %s\\n\", i+1, books[i].title);\r\n+            System.out.printf(\"├─ 저자: %s\\n\", books[i].author);\r\n+            System.out.printf(\"├─ 가격: %,d원\\n\", books[i].price);\r\n+            System.out.println(SUB_BORDER);\r\n+        }\r\n+        \r\n+        printMenu(new String[]{\r\n+            \"1. 상세보기\", \r\n+            \"2. 정렬 변경\", \r\n+            \"0. 이전 메뉴\",\r\n+            \"99. 종료\"\r\n+        });\r\n+        \r\n+        handleResultAction(scanner, books);\r\n+    }\r\n+\r\n+    private static void handleResultAction(Scanner scanner, Book[] books) {\r\n+        System.out.print(\"\\n▶ 액션 선택: \");\r\n+        switch(scanner.nextInt()) {\r\n+            case 1: \r\n+                showDetail(scanner, books[0]); // 실제 구현시 인덱스 처리 필요\r\n+                break;\r\n+            case 2: \r\n+                sortResults(scanner);\r\n+                break;\r\n+            case 0: return;\r\n+            case 99: exit(scanner);\r\n+            default: errorMsg(\"잘못된 선택\");\r\n+        }\r\n+    }\r\n+\r\n+    private static void showDetail(Scanner scanner, Book book) {\r\n+        clearScreen();\r\n+        printHeader(\"도서 상세\");\r\n+        System.out.printf(\"├─ 제목: %s\\n\", book.title);\r\n+        System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n+        System.out.printf(\"├─ 가격: %,d원\\n\", book.price);\r\n+        System.out.println(SUB_BORDER);\r\n+        System.out.println(\"📈 \" + getRandomStat());\r\n+        \r\n+        printMenu(new String[]{\r\n+            \"1. 장바구니 담기\", \r\n+            \"2. 바로 구매\", \r\n+            \"0. 돌아가기\"\r\n+        });\r\n+        \r\n+        handlePurchase(scanner, book);\r\n+    }\r\n+\r\n+    private static void handlePurchase(Scanner scanner, Book book) {\r\n+        System.out.print(\"\\n▶ 선택: \");\r\n+        switch(scanner.nextInt()) {\r\n+            case 1: \r\n+                addToCart(scanner, book);\r\n+                break;\r\n+            case 2: \r\n+                processPayment(scanner, book);\r\n+                break;\r\n+            case 0: return;\r\n+        }\r\n+    }\r\n+\r\n+    private static void addToCart(Scanner scanner, Book book) {\r\n+        System.out.print(\"\\n▶ 수량 입력: \");\r\n+        int qty = scanner.nextInt();\r\n+        System.out.printf(\"\\n✅ %s %d권 장바구니 추가\\n\", book.title, qty);\r\n+        pause(scanner);\r\n+    }\r\n+\r\n+    private static void processPayment(Scanner scanner, Book book) {\r\n+        System.out.print(\"\\n▶ 수량 입력: \");\r\n+        int qty = scanner.nextInt();\r\n+        System.out.printf(\"\\n✅ %s %d권 구매 완료\\n\", book.title, qty);\r\n+        System.out.println(\"📊 \" + getRandomStat());\r\n+        pause(scanner);\r\n+    }\r\n+\r\n+    // 기타 메서드들...\r\n+    \r\n+    private static String getRandomStat() {\r\n+        return STATS_MSG[random.nextInt(STATS_MSG.length)]\r\n+            .formatted(random.nextDouble()*10, random.nextInt(50)+1, random.nextInt(20)+1);\r\n+    }\r\n+\r\n+    private static void printHeader(String title) {\r\n+        System.out.println(BORDER);\r\n+        System.out.printf(\"✦\\t%s\\n\", title);\r\n+        System.out.println(BORDER);\r\n+    }\r\n+\r\n+    private static void printMenu(String[] items) {\r\n+        System.out.println(\"\\n\" + SUB_BORDER);\r\n+        for(String item : items) {\r\n+            System.out.printf(\"│ %s\\n\", item);\r\n+        }\r\n+        System.out.println(SUB_BORDER);\r\n+    }\r\n+\r\n+    private static void clearScreen() {\r\n+        System.out.print(\"\\033[H\\033[2J\");\r\n+        System.out.flush();\r\n+    }\r\n+\r\n+    private static void pause(Scanner scanner) {\r\n+        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n+        scanner.nextLine();\r\n+    }\r\n+\r\n+    private static void errorMsg(String msg) {\r\n+        System.out.println(\"\\n⚠ \" + msg);\r\n+    }\r\n+\r\n+    private static void exit(Scanner scanner) {\r\n+        System.out.println(\"\\n❤ 이용해주셔서 감사합니다!\");\r\n+        System.exit(0);\r\n+    }\r\n+}\r\n"
                }
            ],
            "date": 1743647848435,
            "name": "Commit-0",
            "content": "import java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ViewMainTest2 {\r\n    private static final Random random = new Random();\r\n    private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦\";\r\n    private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n\r\n    // 도서 정보 클래스\r\n    static class Book {\r\n        String id;\r\n        String title;\r\n        String author;\r\n        int basePrice;\r\n        String type;\r\n        String condition;\r\n        String publicationDate;  // 추가된 필드\r\n        Integer reviewRank;      // 베스트셀러 전용 필드\r\n\r\n        public Book(String id, String title, String author, int basePrice, \r\n                   String type, String condition, String publicationDate, Integer reviewRank) {\r\n            this.id = id;\r\n            this.title = title;\r\n            this.author = author;\r\n            this.basePrice = basePrice;\r\n            this.type = type;\r\n            this.condition = condition;\r\n            this.publicationDate = publicationDate;\r\n            this.reviewRank = reviewRank;\r\n        }\r\n\r\n        public int getPrice() {\r\n            return switch(condition) {\r\n                case \"상\" -> (int)(basePrice * 0.7);\r\n                case \"중\" -> (int)(basePrice * 0.5);\r\n                case \"하\" -> (int)(basePrice * 0.3);\r\n                default -> basePrice;\r\n            };\r\n        }\r\n    }\r\n\r\n    // 개선된 Mock 데이터베이스\r\n    static class MockDB {\r\n        private static final List<Book> masterBooks = Arrays.asList(\r\n            // 베스트셀러 (리뷰 순위 포함)\r\n            new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\", \"2025-01-15\", 1),\r\n            new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\", \"2024-12-01\", 2),\r\n            new Book(\"B002-1\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"중\", \"2024-12-01\", 2),\r\n            \r\n            // 신간 도서\r\n            new Book(\"B003\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"new\", \"2025-03-20\", null),\r\n            new Book(\"B003-1\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"상\", \"2025-03-20\", null),\r\n            \r\n            // 중고 도서\r\n            new Book(\"B004\", \"React for Beginners\", \"Dan Abramov\", 35000, \"전체\", \"하\", \"2023-05-11\", null),\r\n            new Book(\"B005\", \"Python AI\", \"장영실\", 28000, \"전체\", \"new\", \"2025-02-28\", null),\r\n            new Book(\"B006\", \"Clean Code\", \"Robert C. Martin\", 40000, \"전체\", \"상\", \"2024-10-01\", null),\r\n            new Book(\"B007\", \"디자인 패턴의 정석\", \"GoF\", 50000, \"베스트셀러\", \"중\", \"2023-07-22\", 3)\r\n        );\r\n\r\n        private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n\r\n        static List<Book> getBooks(String searchType) {\r\n            return availableBooks.stream()\r\n                .filter(book -> searchType.equals(\"전체\") || book.type.equals(searchType))\r\n                .collect(Collectors.toList());\r\n        }\r\n\r\n        static void removeBook(String bookId) {\r\n            availableBooks.removeIf(book -> book.id.equals(bookId));\r\n        }\r\n    }\r\n\r\n    // 장바구니 아이템 클래스\r\n    static class CartItem {\r\n        Book book;\r\n        int quantity;\r\n\r\n        public CartItem(Book book, int quantity) {\r\n            this.book = book;\r\n            this.quantity = quantity;\r\n        }\r\n\r\n        public int getTotalPrice() {\r\n            return book.getPrice() * quantity;\r\n        }\r\n    }\r\n\r\n    // 장바구니 DB\r\n    static class MockCartDB {\r\n        private static List<CartItem> cart = new ArrayList<>();\r\n\r\n        static void addItem(Book book, int quantity) {\r\n            cart.add(new CartItem(book, quantity));\r\n        }\r\n\r\n        static List<CartItem> getCart() {\r\n            return new ArrayList<>(cart);\r\n        }\r\n\r\n        static void clearCart() {\r\n            cart.clear();\r\n        }\r\n    }\r\n\r\n    // 독서 통계 메시지\r\n    private static final String[] PURCHASE_MESSAGES = { /* 이전과 동일 */ };\r\n\r\n    // 시스템 메인 흐름\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        clearScreen();\r\n        \r\n        printHeader(\"온라인 서점 시스템\");\r\n        printSection(\"로그인\");\r\n        System.out.print(\"├─ 성명: \");\r\n        scanner.nextLine();\r\n        System.out.print(\"├─ 비밀번호: \");\r\n        scanner.nextLine();\r\n        \r\n        home(scanner);\r\n    }\r\n\r\n    private static void home(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"메인 메뉴\");\r\n            printMenu(new String[]{\r\n                \"1. 도서 검색\", \r\n                \"2. 회원 정보\", \r\n                \"3. 주문 이력\", \r\n                \"4. 장바구니\",\r\n                \"99. 종료\"\r\n            });\r\n            \r\n            try {\r\n                System.out.print(\"\\n▶ 메뉴 선택: \");\r\n                switch(scanner.nextInt()) {\r\n                    case 1: searchFlow(scanner); break;\r\n                    case 2: userFlow(scanner); break;\r\n                    case 3: orderFlow(scanner); break;\r\n                    case 4: cartFlow(scanner); break;\r\n                    case 99: exit(scanner); break;\r\n                    default: errorMsg(\"잘못된 입력\");\r\n                }\r\n            } catch (Exception e) {\r\n                errorHandler(scanner, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 도서 검색 및 정렬 시스템\r\n    private static void searchFlow(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"도서 검색 시스템\");\r\n            printMenu(new String[]{\r\n                \"1. 베스트셀러 검색\",\r\n                \"2. 신간 도서 검색\", \r\n                \"3. 전체 검색\",\r\n                \"0. 홈으로 돌아가기\",\r\n                \"99. 시스템 종료\"\r\n            });\r\n\r\n            int choice = getValidNumber(scanner, 0, 99);\r\n            if(choice == 0) return;\r\n            if(choice == 99) exit(scanner);\r\n            \r\n            String searchType = switch(choice) {\r\n                case 1 -> \"베스트셀러\";\r\n                case 2 -> \"신간\";\r\n                case 3 -> \"전체\";\r\n                default -> \"\";\r\n            };\r\n\r\n            System.out.print(\"\\n🔍 검색어 입력: \");\r\n            String keyword = scanner.next();\r\n            \r\n            List<Book> results = MockDB.getBooks(searchType).stream()\r\n                .filter(book -> book.title.contains(keyword))\r\n                .collect(Collectors.toList());\r\n                \r\n            handleSearchResults(results, searchType, keyword, scanner);\r\n        }\r\n    }\r\n\r\n    private static void handleSearchResults(List<Book> books, String type, String keyword, Scanner scanner) {\r\n        clearScreen();\r\n        printHeader(\"'\" + keyword + \"' 검색 결과 (\" + type + \")\");\r\n\r\n        if(books.isEmpty()) {\r\n            System.out.println(\"\\n⚠ 검색 결과가 없습니다\");\r\n            pause(scanner);\r\n            return;\r\n        }\r\n\r\n        // 정렬 옵션 표시\r\n        System.out.println(\"\\n[정렬 옵션]\");\r\n        List<String> sortOptions = new ArrayList<>(Arrays.asList(\r\n            \"1. 가격 낮은 순\", \r\n            \"2. 가격 높은 순\", \r\n            \"3. 출판일 최신순\"\r\n        ));\r\n        \r\n        if(type.equals(\"베스트셀러\")) {\r\n            sortOptions.add(\"4. 리뷰 순위 순\");\r\n        }\r\n        sortOptions.add(\"0. 기본 정렬(가나다순)\");\r\n        printMenu(sortOptions);\r\n\r\n        int sortChoice = getValidNumber(scanner, 0, sortOptions.size());\r\n        sortBooks(books, sortChoice, type);\r\n\r\n        displayBooks(books);\r\n        handleBookSelection(books, scanner);\r\n    }\r\n\r\n    private static void sortBooks(List<Book> books, int sortChoice, String type) {\r\n        switch(sortChoice) {\r\n            case 1:\r\n                books.sort(Comparator.comparingInt(Book::getPrice));\r\n                break;\r\n            case 2:\r\n                books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n                break;\r\n            case 3:\r\n                books.sort((b1, b2) -> b2.publicationDate.compareTo(b1.publicationDate));\r\n                break;\r\n            case 4:\r\n                if(type.equals(\"베스트셀러\")) {\r\n                    books.sort(Comparator.comparingInt(b -> b.reviewRank));\r\n                }\r\n                break;\r\n            default:\r\n                books.sort(Comparator.comparing(b -> b.title));\r\n        }\r\n    }\r\n\r\n    private static void displayBooks(List<Book> books) {\r\n        int index = 1;\r\n        for(Book book : books) {\r\n            System.out.printf(\"\\n%d. %s\\n\", index++, book.title);\r\n            System.out.printf(\"├─ ID: %s\\n\", book.id);\r\n            System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n            System.out.printf(\"├─ 가격: %,d원\\n\", book.getPrice());\r\n            System.out.printf(\"├─ 상태: %s\\n\", getConditionText(book.condition));\r\n            System.out.printf(\"├─ 출판일: %s\\n\", book.publicationDate);\r\n            if(book.reviewRank != null) {\r\n                System.out.printf(\"└─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n            }\r\n            System.out.println(SUB_BORDER);\r\n        }\r\n    }\r\n\r\n    private static String getConditionText(String condition) {\r\n        return switch(condition) {\r\n            case \"new\" -> \"신상품\";\r\n            case \"상\" -> \"중고-상\";\r\n            case \"중\" -> \"중고-중\";\r\n            case \"하\" -> \"중고-하\";\r\n            default -> \"알 수 없음\";\r\n        };\r\n    }\r\n\r\n    private static void handleBookSelection(List<Book> books, Scanner scanner) {\r\n        System.out.print(\"\\n▶ 상세보기 할 도서 번호 (0: 뒤로가기): \");\r\n        int choice = getValidNumber(scanner, 0, books.size());\r\n        \r\n        if(choice != 0) {\r\n            Book selected = books.get(choice-1);\r\n            showBookDetail(selected, scanner);\r\n        }\r\n    }\r\n\r\n    private static void showBookDetail(Book book, Scanner scanner) {\r\n        clearScreen();\r\n        printHeader(\"[상세 정보] \" + book.title);\r\n        System.out.printf(\"├─ ISBN: %s\\n\", book.id);\r\n        System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n        System.out.printf(\"├─ 정가: %,d원\\n\", book.basePrice);\r\n        System.out.printf(\"├─ 판매가: %,d원\\n\", book.getPrice());\r\n        System.out.printf(\"├─ 상태: %s\\n\", getConditionText(book.condition));\r\n        System.out.printf(\"├─ 출판일: %s\\n\", book.publicationDate);\r\n        if(book.reviewRank != null) {\r\n            System.out.printf(\"├─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n        }\r\n        System.out.println(SUB_BORDER);\r\n\r\n        printMenu(new String[]{\r\n            \"1. 장바구니 추가\", \r\n            \"2. 바로구매\", \r\n            \"0. 돌아가기\"\r\n        });\r\n        \r\n        handlePurchaseChoice(book, scanner);\r\n    }\r\n\r\n    private static void handlePurchaseChoice(Book book, Scanner scanner) {\r\n        int choice = getValidNumber(scanner, 0, 2);\r\n        switch(choice) {\r\n            case 1:\r\n                handleAddToCart(book, scanner);\r\n                break;\r\n            case 2:\r\n                processPurchase(book, scanner);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private static void handleAddToCart(Book book, Scanner scanner) {\r\n        System.out.print(\"\\n▶ 수량 입력: \");\r\n        int quantity = getValidNumber(scanner, 1, 10);\r\n        MockCartDB.addItem(book, quantity);\r\n        System.out.printf(\"\\n✅ %s %d권 장바구니 추가 완료!\\n\", book.title, quantity);\r\n        pause(scanner);\r\n    }\r\n\r\n    private static void processPurchase(Book book, Scanner scanner) {\r\n        System.out.print(\"\\n▶ 수량 입력: \");\r\n        int quantity = getValidNumber(scanner, 1, 10);\r\n        \r\n        System.out.println(\"\\n================ 결제 정보 ================\");\r\n        System.out.printf(\"도서명: %s\\n\", book.title);\r\n        System.out.printf(\"수량: %d권\\n\", quantity);\r\n        System.out.printf(\"결제금액: %,d원\\n\", book.getPrice() * quantity);\r\n        System.out.println(\"-----------------------------------------\");\r\n        System.out.println(\"1. 신용카드 결제 | 2. 계좌이체 | 0. 취소\");\r\n        \r\n        int paymentType = getValidNumber(scanner, 0, 2);\r\n        if(paymentType != 0) {\r\n            System.out.println(\"✅ 결제가 완료되었습니다!\");\r\n            MockDB.removeBook(book.id);\r\n            System.out.println(\"📊 \" + getRandomMessage(PURCHASE_MESSAGES));\r\n        }\r\n        pause(scanner);\r\n    }\r\n\r\n    // 장바구니 관리 시스템\r\n    private static void cartFlow(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"장바구니 관리\");\r\n            List<CartItem> cart = MockCartDB.getCart();\r\n            \r\n            if(cart.isEmpty()) {\r\n                System.out.println(\"\\n🛒 장바구니가 비어 있습니다\");\r\n                pause(scanner);\r\n                return;\r\n            }\r\n\r\n            cart.forEach(item -> {\r\n                System.out.printf(\"\\n📘 %s\\n\", item.book.title);\r\n                System.out.printf(\"├─ 수량: %d개\\n\", item.quantity);\r\n                System.out.printf(\"├─ 단가: %,d원\\n\", item.book.getPrice());\r\n                System.out.printf(\"└─ 소계: %,d원\\n\", item.getTotalPrice());\r\n                System.out.println(SUB_BORDER);\r\n            });\r\n\r\n            printMenu(new String[]{\r\n                \"1. 전체 구매\", \r\n                \"2. 수량 변경\", \r\n                \"3. 장바구니 비우기\",\r\n                \"0. 뒤로가기\"\r\n            });\r\n            \r\n            handleCartAction(scanner);\r\n        }\r\n    }\r\n\r\n    private static void handleCartAction(Scanner scanner) {\r\n        int choice = getValidNumber(scanner, 0, 3);\r\n        switch(choice) {\r\n            case 1:\r\n                processBulkPurchase(scanner);\r\n                break;\r\n            case 2:\r\n                modifyQuantity(scanner);\r\n                break;\r\n            case 3:\r\n                MockCartDB.clearCart();\r\n                System.out.println(\"\\n✅ 장바구니를 비웠습니다\");\r\n                pause(scanner);\r\n                break;\r\n            case 0:\r\n                return;\r\n        }\r\n    }\r\n\r\n    // 유틸리티 메서드들 (앞선 코드와 동일)\r\n    // ...// 헤더 출력\r\n    private static void printHeader(String title) {\r\n        System.out.println(\"====================\" + \"=\".repeat(title.length()*2));\r\n        System.out.println(\"= \" + title + \" =\");\r\n        System.out.println(\"====================\" + \"=\".repeat(title.length()*2));\r\n    }\r\n\r\n    // 메뉴 출력\r\n    private static void printMenu(String[] items) {\r\n        System.out.println(\"\\n---------------------\");\r\n        for (int i = 0; i < items.length; i++) {\r\n            System.out.printf(\"%2d. %s\\n\", i+1, items[i]);\r\n        }\r\n        System.out.println(\"---------------------\");\r\n    }\r\n\r\n    // 화면 클리어\r\n    private static void clearScreen() {\r\n        for (int i = 0; i < 50; i++) {\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    // 일시 정지\r\n    private static void pause(Scanner scanner) {\r\n        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n        scanner.nextLine();\r\n    }\r\n\r\n    // 에러 메시지 출력\r\n    private static void errorMsg(String message) {\r\n        System.out.println(\"\\n[!] \" + message);\r\n    }\r\n\r\n    // 시스템 종료\r\n    private static void exit(Scanner scanner) {\r\n        System.out.println(\"\\n시스템을 종료합니다.\");\r\n        scanner.close();\r\n        System.exit(0);\r\n    }\r\n\r\n    // 검색 타입 변환\r\n    private static String getSearchType(int typeCode) {\r\n        return switch (typeCode) {\r\n            case 1 -> \"베스트셀러\";\r\n            case 2 -> \"신간\";\r\n            case 3 -> \"전체\";\r\n            default -> \"\";\r\n        };\r\n}\r\n\r\n// 예외 처리 핸들러\r\nprivate static void errorHandler(Exception e) {\r\n    System.out.println(\"\\n[시스템 오류] \" + e.getMessage());\r\n    System.out.println(\"잠시 후 다시 시도해주세요.\");\r\n}\r\n\r\n}\r\n"
        }
    ]
}