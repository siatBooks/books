{
    "sourceFile": "src/ViewMain-test.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1743647391029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743647410621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,312 @@\n+import java.util.*;\r\n+import java.util.stream.Collectors;\r\n+\r\n+public class ViewMain-test {\r\n+    private static final Random random = new Random();\r\n+    private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦\";\r\n+    private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n+\r\n+    // 도서 정보 클래스\r\n+    static class Book {\r\n+        String id;\r\n+        String title;\r\n+        String author;\r\n+        int basePrice;\r\n+        String type;\r\n+        String condition;\r\n+\r\n+        public Book(String id, String title, String author, int basePrice, String type, String condition) {\r\n+            this.id = id;\r\n+            this.title = title;\r\n+            this.author = author;\r\n+            this.basePrice = basePrice;\r\n+            this.type = type;\r\n+            this.condition = condition;\r\n+        }\r\n+\r\n+        public int getPrice() {\r\n+            return switch(condition) {\r\n+                case \"상\" -> (int)(basePrice * 0.7);\r\n+                case \"중\" -> (int)(basePrice * 0.5);\r\n+                case \"하\" -> (int)(basePrice * 0.3);\r\n+                default -> basePrice;\r\n+            };\r\n+        }\r\n+    }\r\n+\r\n+    // 개선된 Mock 데이터베이스\r\n+    static class MockDB {\r\n+        private static final List<Book> masterBooks = Arrays.asList(\r\n+            new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\"),\r\n+            new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\"),\r\n+            new Book(\"B002-1\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\"),\r\n+            new Book(\"B003\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"중\"),\r\n+            new Book(\"B003-1\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"중\"),\r\n+            new Book(\"B004\", \"React for Beginners\", \"Dan Abramov\", 35000, \"신간\", \"하\"),\r\n+            new Book(\"B005\", \"Python AI\", \"장영실\", 28000, \"전체\", \"new\"),\r\n+            new Book(\"B006\", \"Clean Code\", \"Robert C. Martin\", 40000, \"전체\", \"상\"),\r\n+            new Book(\"B007\", \"디자인 패턴의 정석\", \"GoF\", 50000, \"베스트셀러\", \"중\"),\r\n+            new Book(\"B008\", \"모던 자바스크립트\", \"이선 브라운\", 32000, \"신간\", \"new\")\r\n+        );\r\n+\r\n+        private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n+\r\n+        static List<Book> getBooks(String searchType) {\r\n+            return availableBooks.stream()\r\n+                .filter(book -> searchType.equals(\"전체\") || book.type.equals(searchType))\r\n+                .collect(Collectors.toList());\r\n+        }\r\n+\r\n+        static void removeBook(String bookId) {\r\n+            availableBooks.removeIf(book -> book.id.equals(bookId));\r\n+        }\r\n+    }\r\n+\r\n+    // 독서 통계 메시지\r\n+    private static final String[] PURCHASE_MESSAGES = {\r\n+        \"지금까지 읽으신 책의 총 페이지를 쌓으면 에베레스트 높이의 3배에 달합니다.\",\r\n+        \"당신이 읽은 책들을 쌓으면 남산타워 15개를 세운 높이입니다.\",\r\n+        \"올해 독서에 투자한 시간은 서울에서 부산까지 KTX로 20번 왕복할 수 있는 시간입니다.\",\r\n+        \"당신의 독서 시간은 넷플릭스 드라마 '오징어 게임' 시리즈를 35번 볼 수 있는 시간입니다.\",\r\n+        \"각 페이지가 한 걸음이라면, 당신은 서울에서 부산까지 두 번 왕복한 거리를 걸었습니다!\",\r\n+        \"당신이 읽은 책의 페이지를 일렬로 늘어놓으면 한강 길이의 5배에 해당합니다.\",\r\n+        \"당신의 전자책 독서 습관은 소나무 15그루를 살렸습니다—여의도 공원의 1/10에 해당하는 면적입니다.\",\r\n+        \"당신이 읽은 책들의 무게는 중형 승용차 한 대와 같습니다.\",\r\n+        \"올해 읽은 책의 두께를 모두 합치면 냉장고 높이의 2배입니다.\"\r\n+    };\r\n+\r\n+    // 출판 트렌드 메시지\r\n+    private static final String[] TREND_MESSAGES = {\r\n+        \"당신이 선호하는 장르의 평균 가격은 2020년 이후 15% 하락했습니다.\",\r\n+        \"A출판사는 시장 점유율 30%로 선두를 달리고, B출판사가 20%로 뒤를 잇고 있습니다.\",\r\n+        \"높은 평점을 받은 책들은 대체로 가격이 낮고 2020년 이후 출간된 경향이 있습니다.\",\r\n+        \"미스터리 장르는 다른 장르에 비해 일관되게 높은 평점을 받고 있습니다.\"\r\n+    };\r\n+\r\n+    public static void main(String[] args) {\r\n+        Scanner scanner = new Scanner(System.in);\r\n+        clearScreen();\r\n+        \r\n+        printHeader(\"온라인 서점 시스템\");\r\n+        printSection(\"로그인\");\r\n+        System.out.print(\"├─ 성명: \");\r\n+        scanner.nextLine();\r\n+        System.out.print(\"├─ 비밀번호: \");\r\n+        scanner.nextLine();\r\n+        \r\n+        home(scanner);\r\n+    }\r\n+\r\n+    private static void home(Scanner scanner) {\r\n+        while(true) {\r\n+            clearScreen();\r\n+            printHeader(\"메인 메뉴\");\r\n+            printMenu(new String[]{\r\n+                \"1. 도서 검색\", \r\n+                \"2. 회원 정보\", \r\n+                \"3. 주문 이력\", \r\n+                \"4. 장바구니\",\r\n+                \"99. 종료\"\r\n+            });\r\n+            \r\n+            try {\r\n+                System.out.print(\"\\n▶ 메뉴 선택: \");\r\n+                switch(scanner.nextInt()) {\r\n+                    case 1: searchFlow(scanner); break;\r\n+                    case 2: userFlow(scanner); break;\r\n+                    case 3: orderFlow(scanner); break;\r\n+                    case 4: cartFlow(scanner); break;\r\n+                    case 99: exit(scanner); break;\r\n+                    default: errorMsg(\"잘못된 입력\");\r\n+                }\r\n+            } catch (Exception e) {\r\n+                errorHandler(scanner, e);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static void searchFlow(Scanner scanner) {\r\n+        while(true) {\r\n+            clearScreen();\r\n+            printHeader(\"도서 검색\");\r\n+            printMenu(new String[]{\r\n+                \"1. 베스트셀러\", \r\n+                \"2. 신간 도서\", \r\n+                \"3. 전체 검색\",\r\n+                \"0. 홈으로\",\r\n+                \"99. 종료\"\r\n+            });\r\n+\r\n+            System.out.print(\"\\n▶ 검색 유형: \");\r\n+            int type = scanner.nextInt();\r\n+            scanner.nextLine();\r\n+            \r\n+            if(type == 0) return;\r\n+            if(type == 99) exit(scanner);\r\n+            \r\n+            System.out.print(\"\\n🔍 검색어 입력: \");\r\n+            String keyword = scanner.nextLine();\r\n+            \r\n+            List<Book> results = MockDB.getBooks(getSearchType(type)).stream()\r\n+                .filter(book -> book.title.contains(keyword))\r\n+                .collect(Collectors.toList());\r\n+                \r\n+            displayResults(results, keyword, scanner);\r\n+        }\r\n+    }\r\n+\r\n+    private static void displayResults(List<Book> books, String keyword, Scanner scanner) {\r\n+        clearScreen();\r\n+        printHeader(\"'\" + keyword + \"' 검색 결과\");\r\n+        System.out.println(SUB_BORDER);\r\n+        \r\n+        if(books.isEmpty()) {\r\n+            System.out.println(\"\\n⚠ 검색 결과가 없습니다\");\r\n+            pause(scanner);\r\n+            return;\r\n+        }\r\n+\r\n+        System.out.println(\"\\n[정렬 옵션]\");\r\n+        System.out.println(\"1. 가격 낮은 순 2. 가격 높은 순\");\r\n+        System.out.print(\"▶ 선택: \");\r\n+        int sortOption = scanner.nextInt();\r\n+        scanner.nextLine();\r\n+\r\n+        if(sortOption == 1) {\r\n+            books.sort(Comparator.comparingInt(Book::getPrice));\r\n+        } else if(sortOption == 2) {\r\n+            books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n+        }\r\n+\r\n+        int index = 1;\r\n+        for(Book book : books) {\r\n+            System.out.printf(\"\\n%d. %s\\n\", index++, book.title);\r\n+            System.out.printf(\"├─ 저   자: %s\\n\", book.author);\r\n+            System.out.printf(\"├─ 가   격: %,d원\\n\", book.getPrice());\r\n+            System.out.printf(\"├─ 유   형: %s\\n\", book.type);\r\n+            System.out.printf(\"└─ 상 태: %s\\n\", book.condition.equals(\"new\") ? \"신상품\" : \"중고-\" + book.condition);\r\n+            System.out.println(SUB_BORDER);\r\n+        }\r\n+\r\n+        handleBookSelection(books, scanner);\r\n+    }\r\n+\r\n+    private static void handleBookSelection(List<Book> books, Scanner scanner) {\r\n+        System.out.print(\"\\n▶ 상세보기 할 도서 번호 (0: 뒤로가기): \");\r\n+        int choice = scanner.nextInt();\r\n+        scanner.nextLine();\r\n+\r\n+        if(choice == 0) return;\r\n+        if(choice < 1 || choice > books.size()) {\r\n+            errorMsg(\"잘못된 선택\");\r\n+            return;\r\n+        }\r\n+\r\n+        showBookDetail(books.get(choice-1), scanner);\r\n+    }\r\n+\r\n+    private static void showBookDetail(Book book, Scanner scanner) {\r\n+        clearScreen();\r\n+        printHeader(\"[상세 정보] \" + book.title);\r\n+        System.out.printf(\"├─ ISBN: %s\\n\", book.id);\r\n+        System.out.printf(\"├─ 저   자: %s\\n\", book.author);\r\n+        System.out.printf(\"├─ 정가: %,d원\\n\", book.basePrice);\r\n+        System.out.printf(\"├─ 판매가: %,d원\\n\", book.getPrice());\r\n+        System.out.printf(\"├─ 유   형: %s\\n\", book.type);\r\n+        System.out.printf(\"└─ 상 태: %s\\n\", book.condition.equals(\"new\") ? \"신상품\" : \"중고-\" + book.condition);\r\n+        System.out.println(SUB_BORDER);\r\n+\r\n+        printMenu(new String[]{\r\n+            \"1. 장바구니 추가\", \r\n+            \"2. 바로구매\", \r\n+            \"0. 돌아가기\"\r\n+        });\r\n+        \r\n+        handlePurchaseChoice(book, scanner);\r\n+    }\r\n+\r\n+    private static void handlePurchaseChoice(Book book, Scanner scanner) {\r\n+        System.out.print(\"\\n▶ 선택: \");\r\n+        switch(scanner.nextInt()) {\r\n+            case 1: \r\n+                addToCart(book, scanner);\r\n+                break;\r\n+            case 2: \r\n+                processPurchase(book, scanner);\r\n+                break;\r\n+            case 0: \r\n+                return;\r\n+        }\r\n+    }\r\n+\r\n+    private static void addToCart(Book book, Scanner scanner) {\r\n+        System.out.print(\"\\n▶ 수량 입력: \");\r\n+        int qty = scanner.nextInt();\r\n+        System.out.printf(\"\\n✅ %s %d권 장바구니 추가\\n\", book.title, qty);\r\n+        pause(scanner);\r\n+    }\r\n+\r\n+    private static void processPurchase(Book book, Scanner scanner) {\r\n+        System.out.print(\"\\n▶ 수량 입력: \");\r\n+        int qty = scanner.nextInt();\r\n+        System.out.printf(\"\\n✅ [%s] %d권 구매 완료!\\n\", book.title, qty);\r\n+        System.out.println(\"📊 \" + getRandomStat());\r\n+        MockDB.removeBook(book.id);\r\n+        pause(scanner);\r\n+    }\r\n+\r\n+    private static String getRandomStat() {\r\n+        return PURCHASE_MESSAGES[random.nextInt(PURCHASE_MESSAGES.length)]\r\n+            .formatted(random.nextDouble()*10, random.nextInt(50)+1, random.nextInt(20)+1);\r\n+    }\r\n+\r\n+    // 기타 유틸리티 메서드\r\n+    private static void printHeader(String title) {\r\n+        System.out.println(BORDER);\r\n+        System.out.printf(\"✦\\t%s\\n\", title);\r\n+        System.out.println(BORDER);\r\n+    }\r\n+\r\n+    private static void printMenu(String[] items) {\r\n+        System.out.println(\"\\n\" + SUB_BORDER);\r\n+        for(String item : items) {\r\n+            System.out.printf(\"│ %s\\n\", item);\r\n+        }\r\n+        System.out.println(SUB_BORDER);\r\n+    }\r\n+\r\n+    private static void clearScreen() {\r\n+        System.out.print(\"\\033[H\\033[2J\");\r\n+        System.out.flush();\r\n+    }\r\n+\r\n+    private static void pause(Scanner scanner) {\r\n+        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n+        scanner.nextLine();\r\n+    }\r\n+\r\n+    private static void errorMsg(String msg) {\r\n+        System.out.println(\"\\n⚠ \" + msg);\r\n+    }\r\n+\r\n+    private static void exit(Scanner scanner) {\r\n+        System.out.println(\"\\n❤ 이용해주셔서 감사합니다!\");\r\n+        System.exit(0);\r\n+    }\r\n+\r\n+    private static String getSearchType(int type) {\r\n+        return switch(type) {\r\n+            case 1 -> \"베스트셀러\";\r\n+            case 2 -> \"신간\";\r\n+            case 3 -> \"전체\";\r\n+            default -> \"\";\r\n+        };\r\n+    }\r\n+\r\n+    private static void errorHandler(Scanner scanner, Exception e) {\r\n+        System.out.println(\"⚠ 오류 발생: \" + e.getMessage());\r\n+        scanner.nextLine();\r\n+    }\r\n+\r\n+    // 나머지 메서드 (userFlow, orderFlow, cartFlow 등)는 공간 관계상 생략\r\n+}\r\n"
                }
            ],
            "date": 1743647391029,
            "name": "Commit-0",
            "content": ""
        }
    ]
}