{
    "sourceFile": "src/ViewMainTest.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1743647427285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743647441210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,5 +308,6 @@\n         scanner.nextLine();\r\n     }\r\n \r\n     // 나머지 메서드 (userFlow, orderFlow, cartFlow 등)는 공간 관계상 생략\r\n+    \r\n }\r\n"
                },
                {
                    "date": 1743647459619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,6 +308,80 @@\n         scanner.nextLine();\r\n     }\r\n \r\n     // 나머지 메서드 (userFlow, orderFlow, cartFlow 등)는 공간 관계상 생략\r\n-    \r\n+    // ▼▼▼▼▼ 추가 구현 필요 메서드들 ▼▼▼▼▼\r\n+\r\n+    // 회원 정보 관리 플로우 (3단계)\r\n+    private static void userFlow(Scanner scanner) {\r\n+        while(true) {\r\n+            printHeader(\"회원 정보 관리\");\r\n+            printMenu(new String[]{\r\n+                \"1. 개인정보 수정\", \r\n+                \"2. 결제 수단 관리\",\r\n+                \"3. 구독 서비스 관리\",\r\n+                \"0. 홈으로 돌아가기\"\r\n+            });\r\n+            \r\n+            System.out.print(\"▶ 선택: \");\r\n+            switch(scanner.nextInt()) {\r\n+                case 1: updateProfile(scanner); break;\r\n+                case 2: managePayment(scanner); break;\r\n+                case 3: manageSubscription(scanner); break;\r\n+                case 0: return;\r\n+                default: errorMsg(\"잘못된 입력\");\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // 주문 이력 상세 조회\r\n+    private static void orderFlow(Scanner scanner) {\r\n+        printHeader(\"주문 이력 관리\");\r\n+        List<Order> orders = MockOrderDB.getOrders();\r\n+        \r\n+        if(orders.isEmpty()) {\r\n+            System.out.println(\"⚠ 최근 주문 내역이 없습니다\");\r\n+            return;\r\n+        }\r\n+\r\n+        orders.forEach(order -> {\r\n+            System.out.printf(\"\\n📅 주문일: %s\\n\", order.date());\r\n+            System.out.printf(\"├─ 주문번호: %s\\n\", order.id());\r\n+            System.out.printf(\"└─ 총액: %,d원\\n\", order.total());\r\n+        });\r\n+\r\n+        System.out.print(\"\\n▶ 상세 조회할 주문 번호 입력 (0: 뒤로가기): \");\r\n+        String orderId = scanner.nextLine();\r\n+        if(!orderId.equals(\"0\")) showOrderDetail(orderId, scanner);\r\n+    }\r\n+\r\n+    // 장바구니 심화 관리\r\n+    private static void cartFlow(Scanner scanner) {\r\n+        while(true) {\r\n+            printHeader(\"장바구니 관리\");\r\n+            List<CartItem> cart = MockCartDB.getCart();\r\n+            \r\n+            cart.forEach(item -> {\r\n+                System.out.printf(\"\\n📕 %s\\n\", item.book().title());\r\n+                System.out.printf(\"├─ 수량: %d개\\n\", item.quantity());\r\n+                System.out.printf(\"└─ 소계: %,d원\\n\", item.totalPrice());\r\n+            });\r\n+\r\n+            printMenu(new String[]{\r\n+                \"1. 수량 변경\", \r\n+                \"2. 선택 삭제\",\r\n+                \"3. 일괄 구매\",\r\n+                \"0. 뒤로가기\"\r\n+            });\r\n+            \r\n+            switch(scanner.nextInt()) {\r\n+                case 1: changeQuantity(scanner); break;\r\n+                case 2: removeItem(scanner); break;\r\n+                case 3: bulkPurchase(scanner); break;\r\n+                case 0: return;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+// ▲▲▲▲▲ 추가 구현 필요 메서드들 ▲▲▲▲▲\r\n+\r\n }\r\n"
                },
                {
                    "date": 1743647495534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -382,6 +382,18 @@\n         }\r\n     }\r\n \r\n // ▲▲▲▲▲ 추가 구현 필요 메서드들 ▲▲▲▲▲\r\n+static class MockOrderDB {\r\n+    static List<Order> getOrders() {\r\n+        // 주문 내역 조회 구현\r\n+        return Arrays.asList(\r\n+            new Order(\"ORD-20250403-001\", \"2025-04-03\", 75000),\r\n+            new Order(\"ORD-20250402-005\", \"2025-04-02\", 120000)\r\n+        );\r\n+    }\r\n+}\r\n \r\n+record Order(String id, String date, int total) {}\r\n+\r\n+\r\n }\r\n"
                },
                {
                    "date": 1743647528102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,7 +393,14 @@\n     }\r\n }\r\n \r\n record Order(String id, String date, int total) {}\r\n+static List<CartItem> getCart() {\r\n+    // 장바구니 데이터 구현\r\n+    return Arrays.asList(\r\n+        new CartItem(MockDB.getBookById(\"B001\"), 2),\r\n+        new CartItem(MockDB.getBookById(\"B003\"), 1)\r\n+    );\r\n+}\r\n \r\n \r\n }\r\n"
                },
                {
                    "date": 1743647539674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,411 @@\n+import java.util.*;\r\n+import java.util.stream.Collectors;\r\n+\r\n+public class ViewMainTest {\r\n+    private static final Random random = new Random();\r\n+    private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦\";\r\n+    private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n+\r\n+    // 도서 정보 클래스\r\n+    static class Book {\r\n+        String id;\r\n+        String title;\r\n+        String author;\r\n+        int basePrice;\r\n+        String type;\r\n+        String condition;\r\n+\r\n+        public Book(String id, String title, String author, int basePrice, String type, String condition) {\r\n+            this.id = id;\r\n+            this.title = title;\r\n+            this.author = author;\r\n+            this.basePrice = basePrice;\r\n+            this.type = type;\r\n+            this.condition = condition;\r\n+        }\r\n+\r\n+        public int getPrice() {\r\n+            return switch(condition) {\r\n+                case \"상\" -> (int)(basePrice * 0.7);\r\n+                case \"중\" -> (int)(basePrice * 0.5);\r\n+                case \"하\" -> (int)(basePrice * 0.3);\r\n+                default -> basePrice;\r\n+            };\r\n+        }\r\n+    }\r\n+\r\n+    // 개선된 Mock 데이터베이스\r\n+    static class MockDB {\r\n+        private static final List<Book> masterBooks = Arrays.asList(\r\n+            new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\"),\r\n+            new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\"),\r\n+            new Book(\"B002-1\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\"),\r\n+            new Book(\"B003\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"중\"),\r\n+            new Book(\"B003-1\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"중\"),\r\n+            new Book(\"B004\", \"React for Beginners\", \"Dan Abramov\", 35000, \"신간\", \"하\"),\r\n+            new Book(\"B005\", \"Python AI\", \"장영실\", 28000, \"전체\", \"new\"),\r\n+            new Book(\"B006\", \"Clean Code\", \"Robert C. Martin\", 40000, \"전체\", \"상\"),\r\n+            new Book(\"B007\", \"디자인 패턴의 정석\", \"GoF\", 50000, \"베스트셀러\", \"중\"),\r\n+            new Book(\"B008\", \"모던 자바스크립트\", \"이선 브라운\", 32000, \"신간\", \"new\")\r\n+        );\r\n+\r\n+        private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n+\r\n+        static List<Book> getBooks(String searchType) {\r\n+            return availableBooks.stream()\r\n+                .filter(book -> searchType.equals(\"전체\") || book.type.equals(searchType))\r\n+                .collect(Collectors.toList());\r\n+        }\r\n+\r\n+        static void removeBook(String bookId) {\r\n+            availableBooks.removeIf(book -> book.id.equals(bookId));\r\n+        }\r\n+    }\r\n+\r\n+    // 독서 통계 메시지\r\n+    private static final String[] PURCHASE_MESSAGES = {\r\n+        \"지금까지 읽으신 책의 총 페이지를 쌓으면 에베레스트 높이의 3배에 달합니다.\",\r\n+        \"당신이 읽은 책들을 쌓으면 남산타워 15개를 세운 높이입니다.\",\r\n+        \"올해 독서에 투자한 시간은 서울에서 부산까지 KTX로 20번 왕복할 수 있는 시간입니다.\",\r\n+        \"당신의 독서 시간은 넷플릭스 드라마 '오징어 게임' 시리즈를 35번 볼 수 있는 시간입니다.\",\r\n+        \"각 페이지가 한 걸음이라면, 당신은 서울에서 부산까지 두 번 왕복한 거리를 걸었습니다!\",\r\n+        \"당신이 읽은 책의 페이지를 일렬로 늘어놓으면 한강 길이의 5배에 해당합니다.\",\r\n+        \"당신의 전자책 독서 습관은 소나무 15그루를 살렸습니다—여의도 공원의 1/10에 해당하는 면적입니다.\",\r\n+        \"당신이 읽은 책들의 무게는 중형 승용차 한 대와 같습니다.\",\r\n+        \"올해 읽은 책의 두께를 모두 합치면 냉장고 높이의 2배입니다.\"\r\n+    };\r\n+\r\n+    // 출판 트렌드 메시지\r\n+    private static final String[] TREND_MESSAGES = {\r\n+        \"당신이 선호하는 장르의 평균 가격은 2020년 이후 15% 하락했습니다.\",\r\n+        \"A출판사는 시장 점유율 30%로 선두를 달리고, B출판사가 20%로 뒤를 잇고 있습니다.\",\r\n+        \"높은 평점을 받은 책들은 대체로 가격이 낮고 2020년 이후 출간된 경향이 있습니다.\",\r\n+        \"미스터리 장르는 다른 장르에 비해 일관되게 높은 평점을 받고 있습니다.\"\r\n+    };\r\n+\r\n+    public static void main(String[] args) {\r\n+        Scanner scanner = new Scanner(System.in);\r\n+        clearScreen();\r\n+        \r\n+        printHeader(\"온라인 서점 시스템\");\r\n+        printSection(\"로그인\");\r\n+        System.out.print(\"├─ 성명: \");\r\n+        scanner.nextLine();\r\n+        System.out.print(\"├─ 비밀번호: \");\r\n+        scanner.nextLine();\r\n+        \r\n+        home(scanner);\r\n+    }\r\n+\r\n+    private static void home(Scanner scanner) {\r\n+        while(true) {\r\n+            clearScreen();\r\n+            printHeader(\"메인 메뉴\");\r\n+            printMenu(new String[]{\r\n+                \"1. 도서 검색\", \r\n+                \"2. 회원 정보\", \r\n+                \"3. 주문 이력\", \r\n+                \"4. 장바구니\",\r\n+                \"99. 종료\"\r\n+            });\r\n+            \r\n+            try {\r\n+                System.out.print(\"\\n▶ 메뉴 선택: \");\r\n+                switch(scanner.nextInt()) {\r\n+                    case 1: searchFlow(scanner); break;\r\n+                    case 2: userFlow(scanner); break;\r\n+                    case 3: orderFlow(scanner); break;\r\n+                    case 4: cartFlow(scanner); break;\r\n+                    case 99: exit(scanner); break;\r\n+                    default: errorMsg(\"잘못된 입력\");\r\n+                }\r\n+            } catch (Exception e) {\r\n+                errorHandler(scanner, e);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static void searchFlow(Scanner scanner) {\r\n+        while(true) {\r\n+            clearScreen();\r\n+            printHeader(\"도서 검색\");\r\n+            printMenu(new String[]{\r\n+                \"1. 베스트셀러\", \r\n+                \"2. 신간 도서\", \r\n+                \"3. 전체 검색\",\r\n+                \"0. 홈으로\",\r\n+                \"99. 종료\"\r\n+            });\r\n+\r\n+            System.out.print(\"\\n▶ 검색 유형: \");\r\n+            int type = scanner.nextInt();\r\n+            scanner.nextLine();\r\n+            \r\n+            if(type == 0) return;\r\n+            if(type == 99) exit(scanner);\r\n+            \r\n+            System.out.print(\"\\n🔍 검색어 입력: \");\r\n+            String keyword = scanner.nextLine();\r\n+            \r\n+            List<Book> results = MockDB.getBooks(getSearchType(type)).stream()\r\n+                .filter(book -> book.title.contains(keyword))\r\n+                .collect(Collectors.toList());\r\n+                \r\n+            displayResults(results, keyword, scanner);\r\n+        }\r\n+    }\r\n+\r\n+    private static void displayResults(List<Book> books, String keyword, Scanner scanner) {\r\n+        clearScreen();\r\n+        printHeader(\"'\" + keyword + \"' 검색 결과\");\r\n+        System.out.println(SUB_BORDER);\r\n+        \r\n+        if(books.isEmpty()) {\r\n+            System.out.println(\"\\n⚠ 검색 결과가 없습니다\");\r\n+            pause(scanner);\r\n+            return;\r\n+        }\r\n+\r\n+        System.out.println(\"\\n[정렬 옵션]\");\r\n+        System.out.println(\"1. 가격 낮은 순 2. 가격 높은 순\");\r\n+        System.out.print(\"▶ 선택: \");\r\n+        int sortOption = scanner.nextInt();\r\n+        scanner.nextLine();\r\n+\r\n+        if(sortOption == 1) {\r\n+            books.sort(Comparator.comparingInt(Book::getPrice));\r\n+        } else if(sortOption == 2) {\r\n+            books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n+        }\r\n+\r\n+        int index = 1;\r\n+        for(Book book : books) {\r\n+            System.out.printf(\"\\n%d. %s\\n\", index++, book.title);\r\n+            System.out.printf(\"├─ 저   자: %s\\n\", book.author);\r\n+            System.out.printf(\"├─ 가   격: %,d원\\n\", book.getPrice());\r\n+            System.out.printf(\"├─ 유   형: %s\\n\", book.type);\r\n+            System.out.printf(\"└─ 상 태: %s\\n\", book.condition.equals(\"new\") ? \"신상품\" : \"중고-\" + book.condition);\r\n+            System.out.println(SUB_BORDER);\r\n+        }\r\n+\r\n+        handleBookSelection(books, scanner);\r\n+    }\r\n+\r\n+    private static void handleBookSelection(List<Book> books, Scanner scanner) {\r\n+        System.out.print(\"\\n▶ 상세보기 할 도서 번호 (0: 뒤로가기): \");\r\n+        int choice = scanner.nextInt();\r\n+        scanner.nextLine();\r\n+\r\n+        if(choice == 0) return;\r\n+        if(choice < 1 || choice > books.size()) {\r\n+            errorMsg(\"잘못된 선택\");\r\n+            return;\r\n+        }\r\n+\r\n+        showBookDetail(books.get(choice-1), scanner);\r\n+    }\r\n+\r\n+    private static void showBookDetail(Book book, Scanner scanner) {\r\n+        clearScreen();\r\n+        printHeader(\"[상세 정보] \" + book.title);\r\n+        System.out.printf(\"├─ ISBN: %s\\n\", book.id);\r\n+        System.out.printf(\"├─ 저   자: %s\\n\", book.author);\r\n+        System.out.printf(\"├─ 정가: %,d원\\n\", book.basePrice);\r\n+        System.out.printf(\"├─ 판매가: %,d원\\n\", book.getPrice());\r\n+        System.out.printf(\"├─ 유   형: %s\\n\", book.type);\r\n+        System.out.printf(\"└─ 상 태: %s\\n\", book.condition.equals(\"new\") ? \"신상품\" : \"중고-\" + book.condition);\r\n+        System.out.println(SUB_BORDER);\r\n+\r\n+        printMenu(new String[]{\r\n+            \"1. 장바구니 추가\", \r\n+            \"2. 바로구매\", \r\n+            \"0. 돌아가기\"\r\n+        });\r\n+        \r\n+        handlePurchaseChoice(book, scanner);\r\n+    }\r\n+\r\n+    private static void handlePurchaseChoice(Book book, Scanner scanner) {\r\n+        System.out.print(\"\\n▶ 선택: \");\r\n+        switch(scanner.nextInt()) {\r\n+            case 1: \r\n+                addToCart(book, scanner);\r\n+                break;\r\n+            case 2: \r\n+                processPurchase(book, scanner);\r\n+                break;\r\n+            case 0: \r\n+                return;\r\n+        }\r\n+    }\r\n+\r\n+    private static void addToCart(Book book, Scanner scanner) {\r\n+        System.out.print(\"\\n▶ 수량 입력: \");\r\n+        int qty = scanner.nextInt();\r\n+        System.out.printf(\"\\n✅ %s %d권 장바구니 추가\\n\", book.title, qty);\r\n+        pause(scanner);\r\n+    }\r\n+\r\n+    private static void processPurchase(Book book, Scanner scanner) {\r\n+        System.out.print(\"\\n▶ 수량 입력: \");\r\n+        int qty = scanner.nextInt();\r\n+        System.out.printf(\"\\n✅ [%s] %d권 구매 완료!\\n\", book.title, qty);\r\n+        System.out.println(\"📊 \" + getRandomStat());\r\n+        MockDB.removeBook(book.id);\r\n+        pause(scanner);\r\n+    }\r\n+\r\n+    private static String getRandomStat() {\r\n+        return PURCHASE_MESSAGES[random.nextInt(PURCHASE_MESSAGES.length)]\r\n+            .formatted(random.nextDouble()*10, random.nextInt(50)+1, random.nextInt(20)+1);\r\n+    }\r\n+\r\n+    // 기타 유틸리티 메서드\r\n+    private static void printHeader(String title) {\r\n+        System.out.println(BORDER);\r\n+        System.out.printf(\"✦\\t%s\\n\", title);\r\n+        System.out.println(BORDER);\r\n+    }\r\n+\r\n+    private static void printMenu(String[] items) {\r\n+        System.out.println(\"\\n\" + SUB_BORDER);\r\n+        for(String item : items) {\r\n+            System.out.printf(\"│ %s\\n\", item);\r\n+        }\r\n+        System.out.println(SUB_BORDER);\r\n+    }\r\n+\r\n+    private static void clearScreen() {\r\n+        System.out.print(\"\\033[H\\033[2J\");\r\n+        System.out.flush();\r\n+    }\r\n+\r\n+    private static void pause(Scanner scanner) {\r\n+        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n+        scanner.nextLine();\r\n+    }\r\n+\r\n+    private static void errorMsg(String msg) {\r\n+        System.out.println(\"\\n⚠ \" + msg);\r\n+    }\r\n+\r\n+    private static void exit(Scanner scanner) {\r\n+        System.out.println(\"\\n❤ 이용해주셔서 감사합니다!\");\r\n+        System.exit(0);\r\n+    }\r\n+\r\n+    private static String getSearchType(int type) {\r\n+        return switch(type) {\r\n+            case 1 -> \"베스트셀러\";\r\n+            case 2 -> \"신간\";\r\n+            case 3 -> \"전체\";\r\n+            default -> \"\";\r\n+        };\r\n+    }\r\n+\r\n+    private static void errorHandler(Scanner scanner, Exception e) {\r\n+        System.out.println(\"⚠ 오류 발생: \" + e.getMessage());\r\n+        scanner.nextLine();\r\n+    }\r\n+\r\n+    // 나머지 메서드 (userFlow, orderFlow, cartFlow 등)는 공간 관계상 생략\r\n+    // ▼▼▼▼▼ 추가 구현 필요 메서드들 ▼▼▼▼▼\r\n+\r\n+    // 회원 정보 관리 플로우 (3단계)\r\n+    private static void userFlow(Scanner scanner) {\r\n+        while(true) {\r\n+            printHeader(\"회원 정보 관리\");\r\n+            printMenu(new String[]{\r\n+                \"1. 개인정보 수정\", \r\n+                \"2. 결제 수단 관리\",\r\n+                \"3. 구독 서비스 관리\",\r\n+                \"0. 홈으로 돌아가기\"\r\n+            });\r\n+            \r\n+            System.out.print(\"▶ 선택: \");\r\n+            switch(scanner.nextInt()) {\r\n+                case 1: updateProfile(scanner); break;\r\n+                case 2: managePayment(scanner); break;\r\n+                case 3: manageSubscription(scanner); break;\r\n+                case 0: return;\r\n+                default: errorMsg(\"잘못된 입력\");\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // 주문 이력 상세 조회\r\n+    private static void orderFlow(Scanner scanner) {\r\n+        printHeader(\"주문 이력 관리\");\r\n+        List<Order> orders = MockOrderDB.getOrders();\r\n+        \r\n+        if(orders.isEmpty()) {\r\n+            System.out.println(\"⚠ 최근 주문 내역이 없습니다\");\r\n+            return;\r\n+        }\r\n+\r\n+        orders.forEach(order -> {\r\n+            System.out.printf(\"\\n📅 주문일: %s\\n\", order.date());\r\n+            System.out.printf(\"├─ 주문번호: %s\\n\", order.id());\r\n+            System.out.printf(\"└─ 총액: %,d원\\n\", order.total());\r\n+        });\r\n+\r\n+        System.out.print(\"\\n▶ 상세 조회할 주문 번호 입력 (0: 뒤로가기): \");\r\n+        String orderId = scanner.nextLine();\r\n+        if(!orderId.equals(\"0\")) showOrderDetail(orderId, scanner);\r\n+    }\r\n+\r\n+    // 장바구니 심화 관리\r\n+    private static void cartFlow(Scanner scanner) {\r\n+        while(true) {\r\n+            printHeader(\"장바구니 관리\");\r\n+            List<CartItem> cart = MockCartDB.getCart();\r\n+            \r\n+            cart.forEach(item -> {\r\n+                System.out.printf(\"\\n📕 %s\\n\", item.book().title());\r\n+                System.out.printf(\"├─ 수량: %d개\\n\", item.quantity());\r\n+                System.out.printf(\"└─ 소계: %,d원\\n\", item.totalPrice());\r\n+            });\r\n+\r\n+            printMenu(new String[]{\r\n+                \"1. 수량 변경\", \r\n+                \"2. 선택 삭제\",\r\n+                \"3. 일괄 구매\",\r\n+                \"0. 뒤로가기\"\r\n+            });\r\n+            \r\n+            switch(scanner.nextInt()) {\r\n+                case 1: changeQuantity(scanner); break;\r\n+                case 2: removeItem(scanner); break;\r\n+                case 3: bulkPurchase(scanner); break;\r\n+                case 0: return;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+// ▲▲▲▲▲ 추가 구현 필요 메서드들 ▲▲▲▲▲\r\n+static class MockOrderDB {\r\n+    static List<Order> getOrders() {\r\n+        // 주문 내역 조회 구현\r\n+        return Arrays.asList(\r\n+            new Order(\"ORD-20250403-001\", \"2025-04-03\", 75000),\r\n+            new Order(\"ORD-20250402-005\", \"2025-04-02\", 120000)\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+    record Order(String id, String date, int total) {}\r\n+    record CartItem(Book book, int quantity) {\r\n+        int totalPrice() {\r\n+            return book.getPrice() * quantity;\r\n+        }\r\n+    }\r\n+    static List<CartItem> getCart() {\r\n+        // 장바구니 데이터 구현\r\n+        return Arrays.asList(\r\n+            new CartItem(MockDB.getBookById(\"B001\"), 2),\r\n+            new CartItem(MockDB.getBookById(\"B003\"), 1)\r\n+        );\r\n+    }\r\n+\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1743647545616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,20 +392,20 @@\n         );\r\n     }\r\n }\r\n \r\n-    record Order(String id, String date, int total) {}\r\n-    record CartItem(Book book, int quantity) {\r\n-        int totalPrice() {\r\n-            return book.getPrice() * quantity;\r\n-        }\r\n-    }\r\n+    \r\n     static List<CartItem> getCart() {\r\n         // 장바구니 데이터 구현\r\n         return Arrays.asList(\r\n             new CartItem(MockDB.getBookById(\"B001\"), 2),\r\n             new CartItem(MockDB.getBookById(\"B003\"), 1)\r\n         );\r\n     }\r\n \r\n-\r\n+    record Order(String id, String date, int total) {}\r\n+    record CartItem(Book book, int quantity) {\r\n+        int totalPrice() {\r\n+            return book.getPrice() * quantity;\r\n+        }\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1743647570203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,19 +390,19 @@\n             new Order(\"ORD-20250403-001\", \"2025-04-03\", 75000),\r\n             new Order(\"ORD-20250402-005\", \"2025-04-02\", 120000)\r\n         );\r\n     }\r\n-}\r\n-\r\n-    \r\n     static List<CartItem> getCart() {\r\n         // 장바구니 데이터 구현\r\n         return Arrays.asList(\r\n             new CartItem(MockDB.getBookById(\"B001\"), 2),\r\n             new CartItem(MockDB.getBookById(\"B003\"), 1)\r\n         );\r\n     }\r\n+}\r\n \r\n+    \r\n+\r\n     record Order(String id, String date, int total) {}\r\n     record CartItem(Book book, int quantity) {\r\n         int totalPrice() {\r\n             return book.getPrice() * quantity;\r\n"
                },
                {
                    "date": 1743647597896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -408,410 +408,4 @@\n             return book.getPrice() * quantity;\r\n         }\r\n     }\r\n }\r\n-import java.util.*;\r\n-import java.util.stream.Collectors;\r\n-\r\n-public class ViewMainTest {\r\n-    private static final Random random = new Random();\r\n-    private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦\";\r\n-    private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n-\r\n-    // 도서 정보 클래스\r\n-    static class Book {\r\n-        String id;\r\n-        String title;\r\n-        String author;\r\n-        int basePrice;\r\n-        String type;\r\n-        String condition;\r\n-\r\n-        public Book(String id, String title, String author, int basePrice, String type, String condition) {\r\n-            this.id = id;\r\n-            this.title = title;\r\n-            this.author = author;\r\n-            this.basePrice = basePrice;\r\n-            this.type = type;\r\n-            this.condition = condition;\r\n-        }\r\n-\r\n-        public int getPrice() {\r\n-            return switch(condition) {\r\n-                case \"상\" -> (int)(basePrice * 0.7);\r\n-                case \"중\" -> (int)(basePrice * 0.5);\r\n-                case \"하\" -> (int)(basePrice * 0.3);\r\n-                default -> basePrice;\r\n-            };\r\n-        }\r\n-    }\r\n-\r\n-    // 개선된 Mock 데이터베이스\r\n-    static class MockDB {\r\n-        private static final List<Book> masterBooks = Arrays.asList(\r\n-            new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\"),\r\n-            new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\"),\r\n-            new Book(\"B002-1\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\"),\r\n-            new Book(\"B003\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"중\"),\r\n-            new Book(\"B003-1\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"중\"),\r\n-            new Book(\"B004\", \"React for Beginners\", \"Dan Abramov\", 35000, \"신간\", \"하\"),\r\n-            new Book(\"B005\", \"Python AI\", \"장영실\", 28000, \"전체\", \"new\"),\r\n-            new Book(\"B006\", \"Clean Code\", \"Robert C. Martin\", 40000, \"전체\", \"상\"),\r\n-            new Book(\"B007\", \"디자인 패턴의 정석\", \"GoF\", 50000, \"베스트셀러\", \"중\"),\r\n-            new Book(\"B008\", \"모던 자바스크립트\", \"이선 브라운\", 32000, \"신간\", \"new\")\r\n-        );\r\n-\r\n-        private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n-\r\n-        static List<Book> getBooks(String searchType) {\r\n-            return availableBooks.stream()\r\n-                .filter(book -> searchType.equals(\"전체\") || book.type.equals(searchType))\r\n-                .collect(Collectors.toList());\r\n-        }\r\n-\r\n-        static void removeBook(String bookId) {\r\n-            availableBooks.removeIf(book -> book.id.equals(bookId));\r\n-        }\r\n-    }\r\n-\r\n-    // 독서 통계 메시지\r\n-    private static final String[] PURCHASE_MESSAGES = {\r\n-        \"지금까지 읽으신 책의 총 페이지를 쌓으면 에베레스트 높이의 3배에 달합니다.\",\r\n-        \"당신이 읽은 책들을 쌓으면 남산타워 15개를 세운 높이입니다.\",\r\n-        \"올해 독서에 투자한 시간은 서울에서 부산까지 KTX로 20번 왕복할 수 있는 시간입니다.\",\r\n-        \"당신의 독서 시간은 넷플릭스 드라마 '오징어 게임' 시리즈를 35번 볼 수 있는 시간입니다.\",\r\n-        \"각 페이지가 한 걸음이라면, 당신은 서울에서 부산까지 두 번 왕복한 거리를 걸었습니다!\",\r\n-        \"당신이 읽은 책의 페이지를 일렬로 늘어놓으면 한강 길이의 5배에 해당합니다.\",\r\n-        \"당신의 전자책 독서 습관은 소나무 15그루를 살렸습니다—여의도 공원의 1/10에 해당하는 면적입니다.\",\r\n-        \"당신이 읽은 책들의 무게는 중형 승용차 한 대와 같습니다.\",\r\n-        \"올해 읽은 책의 두께를 모두 합치면 냉장고 높이의 2배입니다.\"\r\n-    };\r\n-\r\n-    // 출판 트렌드 메시지\r\n-    private static final String[] TREND_MESSAGES = {\r\n-        \"당신이 선호하는 장르의 평균 가격은 2020년 이후 15% 하락했습니다.\",\r\n-        \"A출판사는 시장 점유율 30%로 선두를 달리고, B출판사가 20%로 뒤를 잇고 있습니다.\",\r\n-        \"높은 평점을 받은 책들은 대체로 가격이 낮고 2020년 이후 출간된 경향이 있습니다.\",\r\n-        \"미스터리 장르는 다른 장르에 비해 일관되게 높은 평점을 받고 있습니다.\"\r\n-    };\r\n-\r\n-    public static void main(String[] args) {\r\n-        Scanner scanner = new Scanner(System.in);\r\n-        clearScreen();\r\n-        \r\n-        printHeader(\"온라인 서점 시스템\");\r\n-        printSection(\"로그인\");\r\n-        System.out.print(\"├─ 성명: \");\r\n-        scanner.nextLine();\r\n-        System.out.print(\"├─ 비밀번호: \");\r\n-        scanner.nextLine();\r\n-        \r\n-        home(scanner);\r\n-    }\r\n-\r\n-    private static void home(Scanner scanner) {\r\n-        while(true) {\r\n-            clearScreen();\r\n-            printHeader(\"메인 메뉴\");\r\n-            printMenu(new String[]{\r\n-                \"1. 도서 검색\", \r\n-                \"2. 회원 정보\", \r\n-                \"3. 주문 이력\", \r\n-                \"4. 장바구니\",\r\n-                \"99. 종료\"\r\n-            });\r\n-            \r\n-            try {\r\n-                System.out.print(\"\\n▶ 메뉴 선택: \");\r\n-                switch(scanner.nextInt()) {\r\n-                    case 1: searchFlow(scanner); break;\r\n-                    case 2: userFlow(scanner); break;\r\n-                    case 3: orderFlow(scanner); break;\r\n-                    case 4: cartFlow(scanner); break;\r\n-                    case 99: exit(scanner); break;\r\n-                    default: errorMsg(\"잘못된 입력\");\r\n-                }\r\n-            } catch (Exception e) {\r\n-                errorHandler(scanner, e);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private static void searchFlow(Scanner scanner) {\r\n-        while(true) {\r\n-            clearScreen();\r\n-            printHeader(\"도서 검색\");\r\n-            printMenu(new String[]{\r\n-                \"1. 베스트셀러\", \r\n-                \"2. 신간 도서\", \r\n-                \"3. 전체 검색\",\r\n-                \"0. 홈으로\",\r\n-                \"99. 종료\"\r\n-            });\r\n-\r\n-            System.out.print(\"\\n▶ 검색 유형: \");\r\n-            int type = scanner.nextInt();\r\n-            scanner.nextLine();\r\n-            \r\n-            if(type == 0) return;\r\n-            if(type == 99) exit(scanner);\r\n-            \r\n-            System.out.print(\"\\n🔍 검색어 입력: \");\r\n-            String keyword = scanner.nextLine();\r\n-            \r\n-            List<Book> results = MockDB.getBooks(getSearchType(type)).stream()\r\n-                .filter(book -> book.title.contains(keyword))\r\n-                .collect(Collectors.toList());\r\n-                \r\n-            displayResults(results, keyword, scanner);\r\n-        }\r\n-    }\r\n-\r\n-    private static void displayResults(List<Book> books, String keyword, Scanner scanner) {\r\n-        clearScreen();\r\n-        printHeader(\"'\" + keyword + \"' 검색 결과\");\r\n-        System.out.println(SUB_BORDER);\r\n-        \r\n-        if(books.isEmpty()) {\r\n-            System.out.println(\"\\n⚠ 검색 결과가 없습니다\");\r\n-            pause(scanner);\r\n-            return;\r\n-        }\r\n-\r\n-        System.out.println(\"\\n[정렬 옵션]\");\r\n-        System.out.println(\"1. 가격 낮은 순 2. 가격 높은 순\");\r\n-        System.out.print(\"▶ 선택: \");\r\n-        int sortOption = scanner.nextInt();\r\n-        scanner.nextLine();\r\n-\r\n-        if(sortOption == 1) {\r\n-            books.sort(Comparator.comparingInt(Book::getPrice));\r\n-        } else if(sortOption == 2) {\r\n-            books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n-        }\r\n-\r\n-        int index = 1;\r\n-        for(Book book : books) {\r\n-            System.out.printf(\"\\n%d. %s\\n\", index++, book.title);\r\n-            System.out.printf(\"├─ 저   자: %s\\n\", book.author);\r\n-            System.out.printf(\"├─ 가   격: %,d원\\n\", book.getPrice());\r\n-            System.out.printf(\"├─ 유   형: %s\\n\", book.type);\r\n-            System.out.printf(\"└─ 상 태: %s\\n\", book.condition.equals(\"new\") ? \"신상품\" : \"중고-\" + book.condition);\r\n-            System.out.println(SUB_BORDER);\r\n-        }\r\n-\r\n-        handleBookSelection(books, scanner);\r\n-    }\r\n-\r\n-    private static void handleBookSelection(List<Book> books, Scanner scanner) {\r\n-        System.out.print(\"\\n▶ 상세보기 할 도서 번호 (0: 뒤로가기): \");\r\n-        int choice = scanner.nextInt();\r\n-        scanner.nextLine();\r\n-\r\n-        if(choice == 0) return;\r\n-        if(choice < 1 || choice > books.size()) {\r\n-            errorMsg(\"잘못된 선택\");\r\n-            return;\r\n-        }\r\n-\r\n-        showBookDetail(books.get(choice-1), scanner);\r\n-    }\r\n-\r\n-    private static void showBookDetail(Book book, Scanner scanner) {\r\n-        clearScreen();\r\n-        printHeader(\"[상세 정보] \" + book.title);\r\n-        System.out.printf(\"├─ ISBN: %s\\n\", book.id);\r\n-        System.out.printf(\"├─ 저   자: %s\\n\", book.author);\r\n-        System.out.printf(\"├─ 정가: %,d원\\n\", book.basePrice);\r\n-        System.out.printf(\"├─ 판매가: %,d원\\n\", book.getPrice());\r\n-        System.out.printf(\"├─ 유   형: %s\\n\", book.type);\r\n-        System.out.printf(\"└─ 상 태: %s\\n\", book.condition.equals(\"new\") ? \"신상품\" : \"중고-\" + book.condition);\r\n-        System.out.println(SUB_BORDER);\r\n-\r\n-        printMenu(new String[]{\r\n-            \"1. 장바구니 추가\", \r\n-            \"2. 바로구매\", \r\n-            \"0. 돌아가기\"\r\n-        });\r\n-        \r\n-        handlePurchaseChoice(book, scanner);\r\n-    }\r\n-\r\n-    private static void handlePurchaseChoice(Book book, Scanner scanner) {\r\n-        System.out.print(\"\\n▶ 선택: \");\r\n-        switch(scanner.nextInt()) {\r\n-            case 1: \r\n-                addToCart(book, scanner);\r\n-                break;\r\n-            case 2: \r\n-                processPurchase(book, scanner);\r\n-                break;\r\n-            case 0: \r\n-                return;\r\n-        }\r\n-    }\r\n-\r\n-    private static void addToCart(Book book, Scanner scanner) {\r\n-        System.out.print(\"\\n▶ 수량 입력: \");\r\n-        int qty = scanner.nextInt();\r\n-        System.out.printf(\"\\n✅ %s %d권 장바구니 추가\\n\", book.title, qty);\r\n-        pause(scanner);\r\n-    }\r\n-\r\n-    private static void processPurchase(Book book, Scanner scanner) {\r\n-        System.out.print(\"\\n▶ 수량 입력: \");\r\n-        int qty = scanner.nextInt();\r\n-        System.out.printf(\"\\n✅ [%s] %d권 구매 완료!\\n\", book.title, qty);\r\n-        System.out.println(\"📊 \" + getRandomStat());\r\n-        MockDB.removeBook(book.id);\r\n-        pause(scanner);\r\n-    }\r\n-\r\n-    private static String getRandomStat() {\r\n-        return PURCHASE_MESSAGES[random.nextInt(PURCHASE_MESSAGES.length)]\r\n-            .formatted(random.nextDouble()*10, random.nextInt(50)+1, random.nextInt(20)+1);\r\n-    }\r\n-\r\n-    // 기타 유틸리티 메서드\r\n-    private static void printHeader(String title) {\r\n-        System.out.println(BORDER);\r\n-        System.out.printf(\"✦\\t%s\\n\", title);\r\n-        System.out.println(BORDER);\r\n-    }\r\n-\r\n-    private static void printMenu(String[] items) {\r\n-        System.out.println(\"\\n\" + SUB_BORDER);\r\n-        for(String item : items) {\r\n-            System.out.printf(\"│ %s\\n\", item);\r\n-        }\r\n-        System.out.println(SUB_BORDER);\r\n-    }\r\n-\r\n-    private static void clearScreen() {\r\n-        System.out.print(\"\\033[H\\033[2J\");\r\n-        System.out.flush();\r\n-    }\r\n-\r\n-    private static void pause(Scanner scanner) {\r\n-        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n-        scanner.nextLine();\r\n-    }\r\n-\r\n-    private static void errorMsg(String msg) {\r\n-        System.out.println(\"\\n⚠ \" + msg);\r\n-    }\r\n-\r\n-    private static void exit(Scanner scanner) {\r\n-        System.out.println(\"\\n❤ 이용해주셔서 감사합니다!\");\r\n-        System.exit(0);\r\n-    }\r\n-\r\n-    private static String getSearchType(int type) {\r\n-        return switch(type) {\r\n-            case 1 -> \"베스트셀러\";\r\n-            case 2 -> \"신간\";\r\n-            case 3 -> \"전체\";\r\n-            default -> \"\";\r\n-        };\r\n-    }\r\n-\r\n-    private static void errorHandler(Scanner scanner, Exception e) {\r\n-        System.out.println(\"⚠ 오류 발생: \" + e.getMessage());\r\n-        scanner.nextLine();\r\n-    }\r\n-\r\n-    // 나머지 메서드 (userFlow, orderFlow, cartFlow 등)는 공간 관계상 생략\r\n-    // ▼▼▼▼▼ 추가 구현 필요 메서드들 ▼▼▼▼▼\r\n-\r\n-    // 회원 정보 관리 플로우 (3단계)\r\n-    private static void userFlow(Scanner scanner) {\r\n-        while(true) {\r\n-            printHeader(\"회원 정보 관리\");\r\n-            printMenu(new String[]{\r\n-                \"1. 개인정보 수정\", \r\n-                \"2. 결제 수단 관리\",\r\n-                \"3. 구독 서비스 관리\",\r\n-                \"0. 홈으로 돌아가기\"\r\n-            });\r\n-            \r\n-            System.out.print(\"▶ 선택: \");\r\n-            switch(scanner.nextInt()) {\r\n-                case 1: updateProfile(scanner); break;\r\n-                case 2: managePayment(scanner); break;\r\n-                case 3: manageSubscription(scanner); break;\r\n-                case 0: return;\r\n-                default: errorMsg(\"잘못된 입력\");\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    // 주문 이력 상세 조회\r\n-    private static void orderFlow(Scanner scanner) {\r\n-        printHeader(\"주문 이력 관리\");\r\n-        List<Order> orders = MockOrderDB.getOrders();\r\n-        \r\n-        if(orders.isEmpty()) {\r\n-            System.out.println(\"⚠ 최근 주문 내역이 없습니다\");\r\n-            return;\r\n-        }\r\n-\r\n-        orders.forEach(order -> {\r\n-            System.out.printf(\"\\n📅 주문일: %s\\n\", order.date());\r\n-            System.out.printf(\"├─ 주문번호: %s\\n\", order.id());\r\n-            System.out.printf(\"└─ 총액: %,d원\\n\", order.total());\r\n-        });\r\n-\r\n-        System.out.print(\"\\n▶ 상세 조회할 주문 번호 입력 (0: 뒤로가기): \");\r\n-        String orderId = scanner.nextLine();\r\n-        if(!orderId.equals(\"0\")) showOrderDetail(orderId, scanner);\r\n-    }\r\n-\r\n-    // 장바구니 심화 관리\r\n-    private static void cartFlow(Scanner scanner) {\r\n-        while(true) {\r\n-            printHeader(\"장바구니 관리\");\r\n-            List<CartItem> cart = MockCartDB.getCart();\r\n-            \r\n-            cart.forEach(item -> {\r\n-                System.out.printf(\"\\n📕 %s\\n\", item.book().title());\r\n-                System.out.printf(\"├─ 수량: %d개\\n\", item.quantity());\r\n-                System.out.printf(\"└─ 소계: %,d원\\n\", item.totalPrice());\r\n-            });\r\n-\r\n-            printMenu(new String[]{\r\n-                \"1. 수량 변경\", \r\n-                \"2. 선택 삭제\",\r\n-                \"3. 일괄 구매\",\r\n-                \"0. 뒤로가기\"\r\n-            });\r\n-            \r\n-            switch(scanner.nextInt()) {\r\n-                case 1: changeQuantity(scanner); break;\r\n-                case 2: removeItem(scanner); break;\r\n-                case 3: bulkPurchase(scanner); break;\r\n-                case 0: return;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-// ▲▲▲▲▲ 추가 구현 필요 메서드들 ▲▲▲▲▲\r\n-static class MockOrderDB {\r\n-    static List<Order> getOrders() {\r\n-        // 주문 내역 조회 구현\r\n-        return Arrays.asList(\r\n-            new Order(\"ORD-20250403-001\", \"2025-04-03\", 75000),\r\n-            new Order(\"ORD-20250402-005\", \"2025-04-02\", 120000)\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-record Order(String id, String date, int total) {}\r\n-static List<CartItem> getCart() {\r\n-    // 장바구니 데이터 구현\r\n-    return Arrays.asList(\r\n-        new CartItem(MockDB.getBookById(\"B001\"), 2),\r\n-        new CartItem(MockDB.getBookById(\"B003\"), 1)\r\n-    );\r\n-}\r\n-\r\n-\r\n-}\r\n"
                },
                {
                    "date": 1743647607076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import java.util.*;\r\n import java.util.stream.Collectors;\r\n \r\n-public class ViewMainTest {\r\n+public class ViewMain {\r\n     private static final Random random = new Random();\r\n     private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦\";\r\n     private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n \r\n@@ -13,16 +13,21 @@\n         String author;\r\n         int basePrice;\r\n         String type;\r\n         String condition;\r\n+        String publicationDate;  // 추가된 필드\r\n+        Integer reviewRank;      // 베스트셀러 전용 필드\r\n \r\n-        public Book(String id, String title, String author, int basePrice, String type, String condition) {\r\n+        public Book(String id, String title, String author, int basePrice, \r\n+                   String type, String condition, String publicationDate, Integer reviewRank) {\r\n             this.id = id;\r\n             this.title = title;\r\n             this.author = author;\r\n             this.basePrice = basePrice;\r\n             this.type = type;\r\n             this.condition = condition;\r\n+            this.publicationDate = publicationDate;\r\n+            this.reviewRank = reviewRank;\r\n         }\r\n \r\n         public int getPrice() {\r\n             return switch(condition) {\r\n@@ -36,18 +41,22 @@\n \r\n     // 개선된 Mock 데이터베이스\r\n     static class MockDB {\r\n         private static final List<Book> masterBooks = Arrays.asList(\r\n-            new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\"),\r\n-            new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\"),\r\n-            new Book(\"B002-1\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\"),\r\n-            new Book(\"B003\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"중\"),\r\n-            new Book(\"B003-1\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"중\"),\r\n-            new Book(\"B004\", \"React for Beginners\", \"Dan Abramov\", 35000, \"신간\", \"하\"),\r\n-            new Book(\"B005\", \"Python AI\", \"장영실\", 28000, \"전체\", \"new\"),\r\n-            new Book(\"B006\", \"Clean Code\", \"Robert C. Martin\", 40000, \"전체\", \"상\"),\r\n-            new Book(\"B007\", \"디자인 패턴의 정석\", \"GoF\", 50000, \"베스트셀러\", \"중\"),\r\n-            new Book(\"B008\", \"모던 자바스크립트\", \"이선 브라운\", 32000, \"신간\", \"new\")\r\n+            // 베스트셀러 (리뷰 순위 포함)\r\n+            new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\", \"2025-01-15\", 1),\r\n+            new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\", \"2024-12-01\", 2),\r\n+            new Book(\"B002-1\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"중\", \"2024-12-01\", 2),\r\n+            \r\n+            // 신간 도서\r\n+            new Book(\"B003\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"new\", \"2025-03-20\", null),\r\n+            new Book(\"B003-1\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"상\", \"2025-03-20\", null),\r\n+            \r\n+            // 중고 도서\r\n+            new Book(\"B004\", \"React for Beginners\", \"Dan Abramov\", 35000, \"전체\", \"하\", \"2023-05-11\", null),\r\n+            new Book(\"B005\", \"Python AI\", \"장영실\", 28000, \"전체\", \"new\", \"2025-02-28\", null),\r\n+            new Book(\"B006\", \"Clean Code\", \"Robert C. Martin\", 40000, \"전체\", \"상\", \"2024-10-01\", null),\r\n+            new Book(\"B007\", \"디자인 패턴의 정석\", \"GoF\", 50000, \"베스트셀러\", \"중\", \"2023-07-22\", 3)\r\n         );\r\n \r\n         private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n \r\n@@ -61,29 +70,44 @@\n             availableBooks.removeIf(book -> book.id.equals(bookId));\r\n         }\r\n     }\r\n \r\n+    // 장바구니 아이템 클래스\r\n+    static class CartItem {\r\n+        Book book;\r\n+        int quantity;\r\n+\r\n+        public CartItem(Book book, int quantity) {\r\n+            this.book = book;\r\n+            this.quantity = quantity;\r\n+        }\r\n+\r\n+        public int getTotalPrice() {\r\n+            return book.getPrice() * quantity;\r\n+        }\r\n+    }\r\n+\r\n+    // 장바구니 DB\r\n+    static class MockCartDB {\r\n+        private static List<CartItem> cart = new ArrayList<>();\r\n+\r\n+        static void addItem(Book book, int quantity) {\r\n+            cart.add(new CartItem(book, quantity));\r\n+        }\r\n+\r\n+        static List<CartItem> getCart() {\r\n+            return new ArrayList<>(cart);\r\n+        }\r\n+\r\n+        static void clearCart() {\r\n+            cart.clear();\r\n+        }\r\n+    }\r\n+\r\n     // 독서 통계 메시지\r\n-    private static final String[] PURCHASE_MESSAGES = {\r\n-        \"지금까지 읽으신 책의 총 페이지를 쌓으면 에베레스트 높이의 3배에 달합니다.\",\r\n-        \"당신이 읽은 책들을 쌓으면 남산타워 15개를 세운 높이입니다.\",\r\n-        \"올해 독서에 투자한 시간은 서울에서 부산까지 KTX로 20번 왕복할 수 있는 시간입니다.\",\r\n-        \"당신의 독서 시간은 넷플릭스 드라마 '오징어 게임' 시리즈를 35번 볼 수 있는 시간입니다.\",\r\n-        \"각 페이지가 한 걸음이라면, 당신은 서울에서 부산까지 두 번 왕복한 거리를 걸었습니다!\",\r\n-        \"당신이 읽은 책의 페이지를 일렬로 늘어놓으면 한강 길이의 5배에 해당합니다.\",\r\n-        \"당신의 전자책 독서 습관은 소나무 15그루를 살렸습니다—여의도 공원의 1/10에 해당하는 면적입니다.\",\r\n-        \"당신이 읽은 책들의 무게는 중형 승용차 한 대와 같습니다.\",\r\n-        \"올해 읽은 책의 두께를 모두 합치면 냉장고 높이의 2배입니다.\"\r\n-    };\r\n+    private static final String[] PURCHASE_MESSAGES = { /* 이전과 동일 */ };\r\n \r\n-    // 출판 트렌드 메시지\r\n-    private static final String[] TREND_MESSAGES = {\r\n-        \"당신이 선호하는 장르의 평균 가격은 2020년 이후 15% 하락했습니다.\",\r\n-        \"A출판사는 시장 점유율 30%로 선두를 달리고, B출판사가 20%로 뒤를 잇고 있습니다.\",\r\n-        \"높은 평점을 받은 책들은 대체로 가격이 낮고 2020년 이후 출간된 경향이 있습니다.\",\r\n-        \"미스터리 장르는 다른 장르에 비해 일관되게 높은 평점을 받고 있습니다.\"\r\n-    };\r\n-\r\n+    // 시스템 메인 흐름\r\n     public static void main(String[] args) {\r\n         Scanner scanner = new Scanner(System.in);\r\n         clearScreen();\r\n         \r\n@@ -124,97 +148,143 @@\n             }\r\n         }\r\n     }\r\n \r\n+    // 도서 검색 및 정렬 시스템\r\n     private static void searchFlow(Scanner scanner) {\r\n         while(true) {\r\n             clearScreen();\r\n-            printHeader(\"도서 검색\");\r\n+            printHeader(\"도서 검색 시스템\");\r\n             printMenu(new String[]{\r\n-                \"1. 베스트셀러\", \r\n-                \"2. 신간 도서\", \r\n+                \"1. 베스트셀러 검색\",\r\n+                \"2. 신간 도서 검색\", \r\n                 \"3. 전체 검색\",\r\n-                \"0. 홈으로\",\r\n-                \"99. 종료\"\r\n+                \"0. 홈으로 돌아가기\",\r\n+                \"99. 시스템 종료\"\r\n             });\r\n \r\n-            System.out.print(\"\\n▶ 검색 유형: \");\r\n-            int type = scanner.nextInt();\r\n-            scanner.nextLine();\r\n+            int choice = getValidNumber(scanner, 0, 99);\r\n+            if(choice == 0) return;\r\n+            if(choice == 99) exit(scanner);\r\n             \r\n-            if(type == 0) return;\r\n-            if(type == 99) exit(scanner);\r\n-            \r\n+            String searchType = switch(choice) {\r\n+                case 1 -> \"베스트셀러\";\r\n+                case 2 -> \"신간\";\r\n+                case 3 -> \"전체\";\r\n+                default -> \"\";\r\n+            };\r\n+\r\n             System.out.print(\"\\n🔍 검색어 입력: \");\r\n-            String keyword = scanner.nextLine();\r\n+            String keyword = scanner.next();\r\n             \r\n-            List<Book> results = MockDB.getBooks(getSearchType(type)).stream()\r\n+            List<Book> results = MockDB.getBooks(searchType).stream()\r\n                 .filter(book -> book.title.contains(keyword))\r\n                 .collect(Collectors.toList());\r\n                 \r\n-            displayResults(results, keyword, scanner);\r\n+            handleSearchResults(results, searchType, keyword, scanner);\r\n         }\r\n     }\r\n \r\n-    private static void displayResults(List<Book> books, String keyword, Scanner scanner) {\r\n+    private static void handleSearchResults(List<Book> books, String type, String keyword, Scanner scanner) {\r\n         clearScreen();\r\n-        printHeader(\"'\" + keyword + \"' 검색 결과\");\r\n-        System.out.println(SUB_BORDER);\r\n-        \r\n+        printHeader(\"'\" + keyword + \"' 검색 결과 (\" + type + \")\");\r\n+\r\n         if(books.isEmpty()) {\r\n             System.out.println(\"\\n⚠ 검색 결과가 없습니다\");\r\n             pause(scanner);\r\n             return;\r\n         }\r\n \r\n+        // 정렬 옵션 표시\r\n         System.out.println(\"\\n[정렬 옵션]\");\r\n-        System.out.println(\"1. 가격 낮은 순 2. 가격 높은 순\");\r\n-        System.out.print(\"▶ 선택: \");\r\n-        int sortOption = scanner.nextInt();\r\n-        scanner.nextLine();\r\n+        List<String> sortOptions = new ArrayList<>(Arrays.asList(\r\n+            \"1. 가격 낮은 순\", \r\n+            \"2. 가격 높은 순\", \r\n+            \"3. 출판일 최신순\"\r\n+        ));\r\n+        \r\n+        if(type.equals(\"베스트셀러\")) {\r\n+            sortOptions.add(\"4. 리뷰 순위 순\");\r\n+        }\r\n+        sortOptions.add(\"0. 기본 정렬(가나다순)\");\r\n+        printMenu(sortOptions);\r\n \r\n-        if(sortOption == 1) {\r\n-            books.sort(Comparator.comparingInt(Book::getPrice));\r\n-        } else if(sortOption == 2) {\r\n-            books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n+        int sortChoice = getValidNumber(scanner, 0, sortOptions.size());\r\n+        sortBooks(books, sortChoice, type);\r\n+\r\n+        displayBooks(books);\r\n+        handleBookSelection(books, scanner);\r\n+    }\r\n+\r\n+    private static void sortBooks(List<Book> books, int sortChoice, String type) {\r\n+        switch(sortChoice) {\r\n+            case 1:\r\n+                books.sort(Comparator.comparingInt(Book::getPrice));\r\n+                break;\r\n+            case 2:\r\n+                books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n+                break;\r\n+            case 3:\r\n+                books.sort((b1, b2) -> b2.publicationDate.compareTo(b1.publicationDate));\r\n+                break;\r\n+            case 4:\r\n+                if(type.equals(\"베스트셀러\")) {\r\n+                    books.sort(Comparator.comparingInt(b -> b.reviewRank));\r\n+                }\r\n+                break;\r\n+            default:\r\n+                books.sort(Comparator.comparing(b -> b.title));\r\n         }\r\n+    }\r\n \r\n+    private static void displayBooks(List<Book> books) {\r\n         int index = 1;\r\n         for(Book book : books) {\r\n             System.out.printf(\"\\n%d. %s\\n\", index++, book.title);\r\n-            System.out.printf(\"├─ 저   자: %s\\n\", book.author);\r\n-            System.out.printf(\"├─ 가   격: %,d원\\n\", book.getPrice());\r\n-            System.out.printf(\"├─ 유   형: %s\\n\", book.type);\r\n-            System.out.printf(\"└─ 상 태: %s\\n\", book.condition.equals(\"new\") ? \"신상품\" : \"중고-\" + book.condition);\r\n+            System.out.printf(\"├─ ID: %s\\n\", book.id);\r\n+            System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n+            System.out.printf(\"├─ 가격: %,d원\\n\", book.getPrice());\r\n+            System.out.printf(\"├─ 상태: %s\\n\", getConditionText(book.condition));\r\n+            System.out.printf(\"├─ 출판일: %s\\n\", book.publicationDate);\r\n+            if(book.reviewRank != null) {\r\n+                System.out.printf(\"└─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n+            }\r\n             System.out.println(SUB_BORDER);\r\n         }\r\n+    }\r\n \r\n-        handleBookSelection(books, scanner);\r\n+    private static String getConditionText(String condition) {\r\n+        return switch(condition) {\r\n+            case \"new\" -> \"신상품\";\r\n+            case \"상\" -> \"중고-상\";\r\n+            case \"중\" -> \"중고-중\";\r\n+            case \"하\" -> \"중고-하\";\r\n+            default -> \"알 수 없음\";\r\n+        };\r\n     }\r\n \r\n     private static void handleBookSelection(List<Book> books, Scanner scanner) {\r\n         System.out.print(\"\\n▶ 상세보기 할 도서 번호 (0: 뒤로가기): \");\r\n-        int choice = scanner.nextInt();\r\n-        scanner.nextLine();\r\n-\r\n-        if(choice == 0) return;\r\n-        if(choice < 1 || choice > books.size()) {\r\n-            errorMsg(\"잘못된 선택\");\r\n-            return;\r\n+        int choice = getValidNumber(scanner, 0, books.size());\r\n+        \r\n+        if(choice != 0) {\r\n+            Book selected = books.get(choice-1);\r\n+            showBookDetail(selected, scanner);\r\n         }\r\n-\r\n-        showBookDetail(books.get(choice-1), scanner);\r\n     }\r\n \r\n     private static void showBookDetail(Book book, Scanner scanner) {\r\n         clearScreen();\r\n         printHeader(\"[상세 정보] \" + book.title);\r\n         System.out.printf(\"├─ ISBN: %s\\n\", book.id);\r\n-        System.out.printf(\"├─ 저   자: %s\\n\", book.author);\r\n+        System.out.printf(\"├─ 저자: %s\\n\", book.author);\r\n         System.out.printf(\"├─ 정가: %,d원\\n\", book.basePrice);\r\n         System.out.printf(\"├─ 판매가: %,d원\\n\", book.getPrice());\r\n-        System.out.printf(\"├─ 유   형: %s\\n\", book.type);\r\n-        System.out.printf(\"└─ 상 태: %s\\n\", book.condition.equals(\"new\") ? \"신상품\" : \"중고-\" + book.condition);\r\n+        System.out.printf(\"├─ 상태: %s\\n\", getConditionText(book.condition));\r\n+        System.out.printf(\"├─ 출판일: %s\\n\", book.publicationDate);\r\n+        if(book.reviewRank != null) {\r\n+            System.out.printf(\"├─ 리뷰 순위: %d위\\n\", book.reviewRank);\r\n+        }\r\n         System.out.println(SUB_BORDER);\r\n \r\n         printMenu(new String[]{\r\n             \"1. 장바구니 추가\", \r\n@@ -225,187 +295,97 @@\n         handlePurchaseChoice(book, scanner);\r\n     }\r\n \r\n     private static void handlePurchaseChoice(Book book, Scanner scanner) {\r\n-        System.out.print(\"\\n▶ 선택: \");\r\n-        switch(scanner.nextInt()) {\r\n-            case 1: \r\n-                addToCart(book, scanner);\r\n+        int choice = getValidNumber(scanner, 0, 2);\r\n+        switch(choice) {\r\n+            case 1:\r\n+                handleAddToCart(book, scanner);\r\n                 break;\r\n-            case 2: \r\n+            case 2:\r\n                 processPurchase(book, scanner);\r\n                 break;\r\n-            case 0: \r\n-                return;\r\n         }\r\n     }\r\n \r\n-    private static void addToCart(Book book, Scanner scanner) {\r\n+    private static void handleAddToCart(Book book, Scanner scanner) {\r\n         System.out.print(\"\\n▶ 수량 입력: \");\r\n-        int qty = scanner.nextInt();\r\n-        System.out.printf(\"\\n✅ %s %d권 장바구니 추가\\n\", book.title, qty);\r\n+        int quantity = getValidNumber(scanner, 1, 10);\r\n+        MockCartDB.addItem(book, quantity);\r\n+        System.out.printf(\"\\n✅ %s %d권 장바구니 추가 완료!\\n\", book.title, quantity);\r\n         pause(scanner);\r\n     }\r\n \r\n     private static void processPurchase(Book book, Scanner scanner) {\r\n         System.out.print(\"\\n▶ 수량 입력: \");\r\n-        int qty = scanner.nextInt();\r\n-        System.out.printf(\"\\n✅ [%s] %d권 구매 완료!\\n\", book.title, qty);\r\n-        System.out.println(\"📊 \" + getRandomStat());\r\n-        MockDB.removeBook(book.id);\r\n-        pause(scanner);\r\n-    }\r\n-\r\n-    private static String getRandomStat() {\r\n-        return PURCHASE_MESSAGES[random.nextInt(PURCHASE_MESSAGES.length)]\r\n-            .formatted(random.nextDouble()*10, random.nextInt(50)+1, random.nextInt(20)+1);\r\n-    }\r\n-\r\n-    // 기타 유틸리티 메서드\r\n-    private static void printHeader(String title) {\r\n-        System.out.println(BORDER);\r\n-        System.out.printf(\"✦\\t%s\\n\", title);\r\n-        System.out.println(BORDER);\r\n-    }\r\n-\r\n-    private static void printMenu(String[] items) {\r\n-        System.out.println(\"\\n\" + SUB_BORDER);\r\n-        for(String item : items) {\r\n-            System.out.printf(\"│ %s\\n\", item);\r\n-        }\r\n-        System.out.println(SUB_BORDER);\r\n-    }\r\n-\r\n-    private static void clearScreen() {\r\n-        System.out.print(\"\\033[H\\033[2J\");\r\n-        System.out.flush();\r\n-    }\r\n-\r\n-    private static void pause(Scanner scanner) {\r\n-        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n-        scanner.nextLine();\r\n-    }\r\n-\r\n-    private static void errorMsg(String msg) {\r\n-        System.out.println(\"\\n⚠ \" + msg);\r\n-    }\r\n-\r\n-    private static void exit(Scanner scanner) {\r\n-        System.out.println(\"\\n❤ 이용해주셔서 감사합니다!\");\r\n-        System.exit(0);\r\n-    }\r\n-\r\n-    private static String getSearchType(int type) {\r\n-        return switch(type) {\r\n-            case 1 -> \"베스트셀러\";\r\n-            case 2 -> \"신간\";\r\n-            case 3 -> \"전체\";\r\n-            default -> \"\";\r\n-        };\r\n-    }\r\n-\r\n-    private static void errorHandler(Scanner scanner, Exception e) {\r\n-        System.out.println(\"⚠ 오류 발생: \" + e.getMessage());\r\n-        scanner.nextLine();\r\n-    }\r\n-\r\n-    // 나머지 메서드 (userFlow, orderFlow, cartFlow 등)는 공간 관계상 생략\r\n-    // ▼▼▼▼▼ 추가 구현 필요 메서드들 ▼▼▼▼▼\r\n-\r\n-    // 회원 정보 관리 플로우 (3단계)\r\n-    private static void userFlow(Scanner scanner) {\r\n-        while(true) {\r\n-            printHeader(\"회원 정보 관리\");\r\n-            printMenu(new String[]{\r\n-                \"1. 개인정보 수정\", \r\n-                \"2. 결제 수단 관리\",\r\n-                \"3. 구독 서비스 관리\",\r\n-                \"0. 홈으로 돌아가기\"\r\n-            });\r\n-            \r\n-            System.out.print(\"▶ 선택: \");\r\n-            switch(scanner.nextInt()) {\r\n-                case 1: updateProfile(scanner); break;\r\n-                case 2: managePayment(scanner); break;\r\n-                case 3: manageSubscription(scanner); break;\r\n-                case 0: return;\r\n-                default: errorMsg(\"잘못된 입력\");\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    // 주문 이력 상세 조회\r\n-    private static void orderFlow(Scanner scanner) {\r\n-        printHeader(\"주문 이력 관리\");\r\n-        List<Order> orders = MockOrderDB.getOrders();\r\n+        int quantity = getValidNumber(scanner, 1, 10);\r\n         \r\n-        if(orders.isEmpty()) {\r\n-            System.out.println(\"⚠ 최근 주문 내역이 없습니다\");\r\n-            return;\r\n+        System.out.println(\"\\n================ 결제 정보 ================\");\r\n+        System.out.printf(\"도서명: %s\\n\", book.title);\r\n+        System.out.printf(\"수량: %d권\\n\", quantity);\r\n+        System.out.printf(\"결제금액: %,d원\\n\", book.getPrice() * quantity);\r\n+        System.out.println(\"-----------------------------------------\");\r\n+        System.out.println(\"1. 신용카드 결제 | 2. 계좌이체 | 0. 취소\");\r\n+        \r\n+        int paymentType = getValidNumber(scanner, 0, 2);\r\n+        if(paymentType != 0) {\r\n+            System.out.println(\"✅ 결제가 완료되었습니다!\");\r\n+            MockDB.removeBook(book.id);\r\n+            System.out.println(\"📊 \" + getRandomMessage(PURCHASE_MESSAGES));\r\n         }\r\n-\r\n-        orders.forEach(order -> {\r\n-            System.out.printf(\"\\n📅 주문일: %s\\n\", order.date());\r\n-            System.out.printf(\"├─ 주문번호: %s\\n\", order.id());\r\n-            System.out.printf(\"└─ 총액: %,d원\\n\", order.total());\r\n-        });\r\n-\r\n-        System.out.print(\"\\n▶ 상세 조회할 주문 번호 입력 (0: 뒤로가기): \");\r\n-        String orderId = scanner.nextLine();\r\n-        if(!orderId.equals(\"0\")) showOrderDetail(orderId, scanner);\r\n+        pause(scanner);\r\n     }\r\n \r\n-    // 장바구니 심화 관리\r\n+    // 장바구니 관리 시스템\r\n     private static void cartFlow(Scanner scanner) {\r\n         while(true) {\r\n+            clearScreen();\r\n             printHeader(\"장바구니 관리\");\r\n             List<CartItem> cart = MockCartDB.getCart();\r\n             \r\n+            if(cart.isEmpty()) {\r\n+                System.out.println(\"\\n🛒 장바구니가 비어 있습니다\");\r\n+                pause(scanner);\r\n+                return;\r\n+            }\r\n+\r\n             cart.forEach(item -> {\r\n-                System.out.printf(\"\\n📕 %s\\n\", item.book().title());\r\n-                System.out.printf(\"├─ 수량: %d개\\n\", item.quantity());\r\n-                System.out.printf(\"└─ 소계: %,d원\\n\", item.totalPrice());\r\n+                System.out.printf(\"\\n📘 %s\\n\", item.book.title);\r\n+                System.out.printf(\"├─ 수량: %d개\\n\", item.quantity);\r\n+                System.out.printf(\"├─ 단가: %,d원\\n\", item.book.getPrice());\r\n+                System.out.printf(\"└─ 소계: %,d원\\n\", item.getTotalPrice());\r\n+                System.out.println(SUB_BORDER);\r\n             });\r\n \r\n             printMenu(new String[]{\r\n-                \"1. 수량 변경\", \r\n-                \"2. 선택 삭제\",\r\n-                \"3. 일괄 구매\",\r\n+                \"1. 전체 구매\", \r\n+                \"2. 수량 변경\", \r\n+                \"3. 장바구니 비우기\",\r\n                 \"0. 뒤로가기\"\r\n             });\r\n             \r\n-            switch(scanner.nextInt()) {\r\n-                case 1: changeQuantity(scanner); break;\r\n-                case 2: removeItem(scanner); break;\r\n-                case 3: bulkPurchase(scanner); break;\r\n-                case 0: return;\r\n-            }\r\n+            handleCartAction(scanner);\r\n         }\r\n     }\r\n \r\n-// ▲▲▲▲▲ 추가 구현 필요 메서드들 ▲▲▲▲▲\r\n-static class MockOrderDB {\r\n-    static List<Order> getOrders() {\r\n-        // 주문 내역 조회 구현\r\n-        return Arrays.asList(\r\n-            new Order(\"ORD-20250403-001\", \"2025-04-03\", 75000),\r\n-            new Order(\"ORD-20250402-005\", \"2025-04-02\", 120000)\r\n-        );\r\n+    private static void handleCartAction(Scanner scanner) {\r\n+        int choice = getValidNumber(scanner, 0, 3);\r\n+        switch(choice) {\r\n+            case 1:\r\n+                processBulkPurchase(scanner);\r\n+                break;\r\n+            case 2:\r\n+                modifyQuantity(scanner);\r\n+                break;\r\n+            case 3:\r\n+                MockCartDB.clearCart();\r\n+                System.out.println(\"\\n✅ 장바구니를 비웠습니다\");\r\n+                pause(scanner);\r\n+                break;\r\n+            case 0:\r\n+                return;\r\n+        }\r\n     }\r\n-    static List<CartItem> getCart() {\r\n-        // 장바구니 데이터 구현\r\n-        return Arrays.asList(\r\n-            new CartItem(MockDB.getBookById(\"B001\"), 2),\r\n-            new CartItem(MockDB.getBookById(\"B003\"), 1)\r\n-        );\r\n-    }\r\n-}\r\n \r\n-    \r\n-\r\n-    record Order(String id, String date, int total) {}\r\n-    record CartItem(Book book, int quantity) {\r\n-        int totalPrice() {\r\n-            return book.getPrice() * quantity;\r\n-        }\r\n-    }\r\n+    // 유틸리티 메서드들 (앞선 코드와 동일)\r\n+    // ...\r\n }\r\n"
                },
                {
                    "date": 1743647720504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,6 +386,62 @@\n         }\r\n     }\r\n \r\n     // 유틸리티 메서드들 (앞선 코드와 동일)\r\n-    // ...\r\n+    // ...// 헤더 출력\r\n+private static void printHeader(String title) {\r\n+    System.out.println(\"====================\" + \"=\".repeat(title.length()*2));\r\n+    System.out.println(\"= \" + title + \" =\");\r\n+    System.out.println(\"====================\" + \"=\".repeat(title.length()*2));\r\n }\r\n+\r\n+// 메뉴 출력\r\n+private static void printMenu(String[] items) {\r\n+    System.out.println(\"\\n---------------------\");\r\n+    for (int i = 0; i < items.length; i++) {\r\n+        System.out.printf(\"%2d. %s\\n\", i+1, items[i]);\r\n+    }\r\n+    System.out.println(\"---------------------\");\r\n+}\r\n+\r\n+// 화면 클리어\r\n+private static void clearScreen() {\r\n+    for (int i = 0; i < 50; i++) {\r\n+        System.out.println();\r\n+    }\r\n+}\r\n+\r\n+// 일시 정지\r\n+private static void pause(Scanner scanner) {\r\n+    System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n+    scanner.nextLine();\r\n+}\r\n+\r\n+// 에러 메시지 출력\r\n+private static void errorMsg(String message) {\r\n+    System.out.println(\"\\n[!] \" + message);\r\n+}\r\n+\r\n+// 시스템 종료\r\n+private static void exit(Scanner scanner) {\r\n+    System.out.println(\"\\n시스템을 종료합니다.\");\r\n+    scanner.close();\r\n+    System.exit(0);\r\n+}\r\n+\r\n+// 검색 타입 변환\r\n+private static String getSearchType(int typeCode) {\r\n+    return switch (typeCode) {\r\n+        case 1 -> \"베스트셀러\";\r\n+        case 2 -> \"신간\";\r\n+        case 3 -> \"전체\";\r\n+        default -> \"\";\r\n+    };\r\n+}\r\n+\r\n+// 예외 처리 핸들러\r\n+private static void errorHandler(Exception e) {\r\n+    System.out.println(\"\\n[시스템 오류] \" + e.getMessage());\r\n+    System.out.println(\"잠시 후 다시 시도해주세요.\");\r\n+}\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1743647740113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,56 +387,56 @@\n     }\r\n \r\n     // 유틸리티 메서드들 (앞선 코드와 동일)\r\n     // ...// 헤더 출력\r\n-private static void printHeader(String title) {\r\n-    System.out.println(\"====================\" + \"=\".repeat(title.length()*2));\r\n-    System.out.println(\"= \" + title + \" =\");\r\n-    System.out.println(\"====================\" + \"=\".repeat(title.length()*2));\r\n-}\r\n+    private static void printHeader(String title) {\r\n+        System.out.println(\"====================\" + \"=\".repeat(title.length()*2));\r\n+        System.out.println(\"= \" + title + \" =\");\r\n+        System.out.println(\"====================\" + \"=\".repeat(title.length()*2));\r\n+    }\r\n \r\n-// 메뉴 출력\r\n-private static void printMenu(String[] items) {\r\n-    System.out.println(\"\\n---------------------\");\r\n-    for (int i = 0; i < items.length; i++) {\r\n-        System.out.printf(\"%2d. %s\\n\", i+1, items[i]);\r\n+    // 메뉴 출력\r\n+    private static void printMenu(String[] items) {\r\n+        System.out.println(\"\\n---------------------\");\r\n+        for (int i = 0; i < items.length; i++) {\r\n+            System.out.printf(\"%2d. %s\\n\", i+1, items[i]);\r\n+        }\r\n+        System.out.println(\"---------------------\");\r\n     }\r\n-    System.out.println(\"---------------------\");\r\n-}\r\n \r\n-// 화면 클리어\r\n-private static void clearScreen() {\r\n-    for (int i = 0; i < 50; i++) {\r\n-        System.out.println();\r\n+    // 화면 클리어\r\n+    private static void clearScreen() {\r\n+        for (int i = 0; i < 50; i++) {\r\n+            System.out.println();\r\n+        }\r\n     }\r\n-}\r\n \r\n-// 일시 정지\r\n-private static void pause(Scanner scanner) {\r\n-    System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n-    scanner.nextLine();\r\n-}\r\n+    // 일시 정지\r\n+    private static void pause(Scanner scanner) {\r\n+        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n+        scanner.nextLine();\r\n+    }\r\n \r\n-// 에러 메시지 출력\r\n-private static void errorMsg(String message) {\r\n-    System.out.println(\"\\n[!] \" + message);\r\n-}\r\n+    // 에러 메시지 출력\r\n+    private static void errorMsg(String message) {\r\n+        System.out.println(\"\\n[!] \" + message);\r\n+    }\r\n \r\n-// 시스템 종료\r\n-private static void exit(Scanner scanner) {\r\n-    System.out.println(\"\\n시스템을 종료합니다.\");\r\n-    scanner.close();\r\n-    System.exit(0);\r\n-}\r\n+    // 시스템 종료\r\n+    private static void exit(Scanner scanner) {\r\n+        System.out.println(\"\\n시스템을 종료합니다.\");\r\n+        scanner.close();\r\n+        System.exit(0);\r\n+    }\r\n \r\n-// 검색 타입 변환\r\n-private static String getSearchType(int typeCode) {\r\n-    return switch (typeCode) {\r\n-        case 1 -> \"베스트셀러\";\r\n-        case 2 -> \"신간\";\r\n-        case 3 -> \"전체\";\r\n-        default -> \"\";\r\n-    };\r\n+    // 검색 타입 변환\r\n+    private static String getSearchType(int typeCode) {\r\n+        return switch (typeCode) {\r\n+            case 1 -> \"베스트셀러\";\r\n+            case 2 -> \"신간\";\r\n+            case 3 -> \"전체\";\r\n+            default -> \"\";\r\n+        };\r\n }\r\n \r\n // 예외 처리 핸들러\r\n private static void errorHandler(Exception e) {\r\n"
                }
            ],
            "date": 1743647427285,
            "name": "Commit-0",
            "content": "import java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ViewMainTest {\r\n    private static final Random random = new Random();\r\n    private static final String BORDER = \"✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦✧✦\";\r\n    private static final String SUB_BORDER = \"───────────────────────────────────────────\";\r\n\r\n    // 도서 정보 클래스\r\n    static class Book {\r\n        String id;\r\n        String title;\r\n        String author;\r\n        int basePrice;\r\n        String type;\r\n        String condition;\r\n\r\n        public Book(String id, String title, String author, int basePrice, String type, String condition) {\r\n            this.id = id;\r\n            this.title = title;\r\n            this.author = author;\r\n            this.basePrice = basePrice;\r\n            this.type = type;\r\n            this.condition = condition;\r\n        }\r\n\r\n        public int getPrice() {\r\n            return switch(condition) {\r\n                case \"상\" -> (int)(basePrice * 0.7);\r\n                case \"중\" -> (int)(basePrice * 0.5);\r\n                case \"하\" -> (int)(basePrice * 0.3);\r\n                default -> basePrice;\r\n            };\r\n        }\r\n    }\r\n\r\n    // 개선된 Mock 데이터베이스\r\n    static class MockDB {\r\n        private static final List<Book> masterBooks = Arrays.asList(\r\n            new Book(\"B001\", \"Java Master\", \"홍길동\", 35000, \"베스트셀러\", \"new\"),\r\n            new Book(\"B002\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\"),\r\n            new Book(\"B002-1\", \"Effective Java\", \"Joshua Bloch\", 45000, \"베스트셀러\", \"상\"),\r\n            new Book(\"B003\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"중\"),\r\n            new Book(\"B003-1\", \"Spring Boot Guide\", \"이순신\", 30000, \"신간\", \"중\"),\r\n            new Book(\"B004\", \"React for Beginners\", \"Dan Abramov\", 35000, \"신간\", \"하\"),\r\n            new Book(\"B005\", \"Python AI\", \"장영실\", 28000, \"전체\", \"new\"),\r\n            new Book(\"B006\", \"Clean Code\", \"Robert C. Martin\", 40000, \"전체\", \"상\"),\r\n            new Book(\"B007\", \"디자인 패턴의 정석\", \"GoF\", 50000, \"베스트셀러\", \"중\"),\r\n            new Book(\"B008\", \"모던 자바스크립트\", \"이선 브라운\", 32000, \"신간\", \"new\")\r\n        );\r\n\r\n        private static List<Book> availableBooks = new ArrayList<>(masterBooks);\r\n\r\n        static List<Book> getBooks(String searchType) {\r\n            return availableBooks.stream()\r\n                .filter(book -> searchType.equals(\"전체\") || book.type.equals(searchType))\r\n                .collect(Collectors.toList());\r\n        }\r\n\r\n        static void removeBook(String bookId) {\r\n            availableBooks.removeIf(book -> book.id.equals(bookId));\r\n        }\r\n    }\r\n\r\n    // 독서 통계 메시지\r\n    private static final String[] PURCHASE_MESSAGES = {\r\n        \"지금까지 읽으신 책의 총 페이지를 쌓으면 에베레스트 높이의 3배에 달합니다.\",\r\n        \"당신이 읽은 책들을 쌓으면 남산타워 15개를 세운 높이입니다.\",\r\n        \"올해 독서에 투자한 시간은 서울에서 부산까지 KTX로 20번 왕복할 수 있는 시간입니다.\",\r\n        \"당신의 독서 시간은 넷플릭스 드라마 '오징어 게임' 시리즈를 35번 볼 수 있는 시간입니다.\",\r\n        \"각 페이지가 한 걸음이라면, 당신은 서울에서 부산까지 두 번 왕복한 거리를 걸었습니다!\",\r\n        \"당신이 읽은 책의 페이지를 일렬로 늘어놓으면 한강 길이의 5배에 해당합니다.\",\r\n        \"당신의 전자책 독서 습관은 소나무 15그루를 살렸습니다—여의도 공원의 1/10에 해당하는 면적입니다.\",\r\n        \"당신이 읽은 책들의 무게는 중형 승용차 한 대와 같습니다.\",\r\n        \"올해 읽은 책의 두께를 모두 합치면 냉장고 높이의 2배입니다.\"\r\n    };\r\n\r\n    // 출판 트렌드 메시지\r\n    private static final String[] TREND_MESSAGES = {\r\n        \"당신이 선호하는 장르의 평균 가격은 2020년 이후 15% 하락했습니다.\",\r\n        \"A출판사는 시장 점유율 30%로 선두를 달리고, B출판사가 20%로 뒤를 잇고 있습니다.\",\r\n        \"높은 평점을 받은 책들은 대체로 가격이 낮고 2020년 이후 출간된 경향이 있습니다.\",\r\n        \"미스터리 장르는 다른 장르에 비해 일관되게 높은 평점을 받고 있습니다.\"\r\n    };\r\n\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        clearScreen();\r\n        \r\n        printHeader(\"온라인 서점 시스템\");\r\n        printSection(\"로그인\");\r\n        System.out.print(\"├─ 성명: \");\r\n        scanner.nextLine();\r\n        System.out.print(\"├─ 비밀번호: \");\r\n        scanner.nextLine();\r\n        \r\n        home(scanner);\r\n    }\r\n\r\n    private static void home(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"메인 메뉴\");\r\n            printMenu(new String[]{\r\n                \"1. 도서 검색\", \r\n                \"2. 회원 정보\", \r\n                \"3. 주문 이력\", \r\n                \"4. 장바구니\",\r\n                \"99. 종료\"\r\n            });\r\n            \r\n            try {\r\n                System.out.print(\"\\n▶ 메뉴 선택: \");\r\n                switch(scanner.nextInt()) {\r\n                    case 1: searchFlow(scanner); break;\r\n                    case 2: userFlow(scanner); break;\r\n                    case 3: orderFlow(scanner); break;\r\n                    case 4: cartFlow(scanner); break;\r\n                    case 99: exit(scanner); break;\r\n                    default: errorMsg(\"잘못된 입력\");\r\n                }\r\n            } catch (Exception e) {\r\n                errorHandler(scanner, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void searchFlow(Scanner scanner) {\r\n        while(true) {\r\n            clearScreen();\r\n            printHeader(\"도서 검색\");\r\n            printMenu(new String[]{\r\n                \"1. 베스트셀러\", \r\n                \"2. 신간 도서\", \r\n                \"3. 전체 검색\",\r\n                \"0. 홈으로\",\r\n                \"99. 종료\"\r\n            });\r\n\r\n            System.out.print(\"\\n▶ 검색 유형: \");\r\n            int type = scanner.nextInt();\r\n            scanner.nextLine();\r\n            \r\n            if(type == 0) return;\r\n            if(type == 99) exit(scanner);\r\n            \r\n            System.out.print(\"\\n🔍 검색어 입력: \");\r\n            String keyword = scanner.nextLine();\r\n            \r\n            List<Book> results = MockDB.getBooks(getSearchType(type)).stream()\r\n                .filter(book -> book.title.contains(keyword))\r\n                .collect(Collectors.toList());\r\n                \r\n            displayResults(results, keyword, scanner);\r\n        }\r\n    }\r\n\r\n    private static void displayResults(List<Book> books, String keyword, Scanner scanner) {\r\n        clearScreen();\r\n        printHeader(\"'\" + keyword + \"' 검색 결과\");\r\n        System.out.println(SUB_BORDER);\r\n        \r\n        if(books.isEmpty()) {\r\n            System.out.println(\"\\n⚠ 검색 결과가 없습니다\");\r\n            pause(scanner);\r\n            return;\r\n        }\r\n\r\n        System.out.println(\"\\n[정렬 옵션]\");\r\n        System.out.println(\"1. 가격 낮은 순 2. 가격 높은 순\");\r\n        System.out.print(\"▶ 선택: \");\r\n        int sortOption = scanner.nextInt();\r\n        scanner.nextLine();\r\n\r\n        if(sortOption == 1) {\r\n            books.sort(Comparator.comparingInt(Book::getPrice));\r\n        } else if(sortOption == 2) {\r\n            books.sort((b1, b2) -> b2.getPrice() - b1.getPrice());\r\n        }\r\n\r\n        int index = 1;\r\n        for(Book book : books) {\r\n            System.out.printf(\"\\n%d. %s\\n\", index++, book.title);\r\n            System.out.printf(\"├─ 저   자: %s\\n\", book.author);\r\n            System.out.printf(\"├─ 가   격: %,d원\\n\", book.getPrice());\r\n            System.out.printf(\"├─ 유   형: %s\\n\", book.type);\r\n            System.out.printf(\"└─ 상 태: %s\\n\", book.condition.equals(\"new\") ? \"신상품\" : \"중고-\" + book.condition);\r\n            System.out.println(SUB_BORDER);\r\n        }\r\n\r\n        handleBookSelection(books, scanner);\r\n    }\r\n\r\n    private static void handleBookSelection(List<Book> books, Scanner scanner) {\r\n        System.out.print(\"\\n▶ 상세보기 할 도서 번호 (0: 뒤로가기): \");\r\n        int choice = scanner.nextInt();\r\n        scanner.nextLine();\r\n\r\n        if(choice == 0) return;\r\n        if(choice < 1 || choice > books.size()) {\r\n            errorMsg(\"잘못된 선택\");\r\n            return;\r\n        }\r\n\r\n        showBookDetail(books.get(choice-1), scanner);\r\n    }\r\n\r\n    private static void showBookDetail(Book book, Scanner scanner) {\r\n        clearScreen();\r\n        printHeader(\"[상세 정보] \" + book.title);\r\n        System.out.printf(\"├─ ISBN: %s\\n\", book.id);\r\n        System.out.printf(\"├─ 저   자: %s\\n\", book.author);\r\n        System.out.printf(\"├─ 정가: %,d원\\n\", book.basePrice);\r\n        System.out.printf(\"├─ 판매가: %,d원\\n\", book.getPrice());\r\n        System.out.printf(\"├─ 유   형: %s\\n\", book.type);\r\n        System.out.printf(\"└─ 상 태: %s\\n\", book.condition.equals(\"new\") ? \"신상품\" : \"중고-\" + book.condition);\r\n        System.out.println(SUB_BORDER);\r\n\r\n        printMenu(new String[]{\r\n            \"1. 장바구니 추가\", \r\n            \"2. 바로구매\", \r\n            \"0. 돌아가기\"\r\n        });\r\n        \r\n        handlePurchaseChoice(book, scanner);\r\n    }\r\n\r\n    private static void handlePurchaseChoice(Book book, Scanner scanner) {\r\n        System.out.print(\"\\n▶ 선택: \");\r\n        switch(scanner.nextInt()) {\r\n            case 1: \r\n                addToCart(book, scanner);\r\n                break;\r\n            case 2: \r\n                processPurchase(book, scanner);\r\n                break;\r\n            case 0: \r\n                return;\r\n        }\r\n    }\r\n\r\n    private static void addToCart(Book book, Scanner scanner) {\r\n        System.out.print(\"\\n▶ 수량 입력: \");\r\n        int qty = scanner.nextInt();\r\n        System.out.printf(\"\\n✅ %s %d권 장바구니 추가\\n\", book.title, qty);\r\n        pause(scanner);\r\n    }\r\n\r\n    private static void processPurchase(Book book, Scanner scanner) {\r\n        System.out.print(\"\\n▶ 수량 입력: \");\r\n        int qty = scanner.nextInt();\r\n        System.out.printf(\"\\n✅ [%s] %d권 구매 완료!\\n\", book.title, qty);\r\n        System.out.println(\"📊 \" + getRandomStat());\r\n        MockDB.removeBook(book.id);\r\n        pause(scanner);\r\n    }\r\n\r\n    private static String getRandomStat() {\r\n        return PURCHASE_MESSAGES[random.nextInt(PURCHASE_MESSAGES.length)]\r\n            .formatted(random.nextDouble()*10, random.nextInt(50)+1, random.nextInt(20)+1);\r\n    }\r\n\r\n    // 기타 유틸리티 메서드\r\n    private static void printHeader(String title) {\r\n        System.out.println(BORDER);\r\n        System.out.printf(\"✦\\t%s\\n\", title);\r\n        System.out.println(BORDER);\r\n    }\r\n\r\n    private static void printMenu(String[] items) {\r\n        System.out.println(\"\\n\" + SUB_BORDER);\r\n        for(String item : items) {\r\n            System.out.printf(\"│ %s\\n\", item);\r\n        }\r\n        System.out.println(SUB_BORDER);\r\n    }\r\n\r\n    private static void clearScreen() {\r\n        System.out.print(\"\\033[H\\033[2J\");\r\n        System.out.flush();\r\n    }\r\n\r\n    private static void pause(Scanner scanner) {\r\n        System.out.print(\"\\n계속하려면 엔터를 누르세요...\");\r\n        scanner.nextLine();\r\n    }\r\n\r\n    private static void errorMsg(String msg) {\r\n        System.out.println(\"\\n⚠ \" + msg);\r\n    }\r\n\r\n    private static void exit(Scanner scanner) {\r\n        System.out.println(\"\\n❤ 이용해주셔서 감사합니다!\");\r\n        System.exit(0);\r\n    }\r\n\r\n    private static String getSearchType(int type) {\r\n        return switch(type) {\r\n            case 1 -> \"베스트셀러\";\r\n            case 2 -> \"신간\";\r\n            case 3 -> \"전체\";\r\n            default -> \"\";\r\n        };\r\n    }\r\n\r\n    private static void errorHandler(Scanner scanner, Exception e) {\r\n        System.out.println(\"⚠ 오류 발생: \" + e.getMessage());\r\n        scanner.nextLine();\r\n    }\r\n\r\n    // 나머지 메서드 (userFlow, orderFlow, cartFlow 등)는 공간 관계상 생략\r\n}\r\n"
        }
    ]
}